   1               		.file	"quantum.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.do_code16,"ax",@progbits
  12               	do_code16:
  13               	.LVL0:
  14               	.LFB107:
  15               		.file 1 "quantum/quantum.c"
   1:quantum/quantum.c **** #include "quantum.h"
   2:quantum/quantum.c **** 
   3:quantum/quantum.c **** #ifndef TAPPING_TERM
   4:quantum/quantum.c **** #define TAPPING_TERM 200
   5:quantum/quantum.c **** #endif
   6:quantum/quantum.c **** 
   7:quantum/quantum.c **** static void do_code16 (uint16_t code, void (*f) (uint8_t)) {
  16               		.loc 1 7 60 view -0
  17               		.cfi_startproc
  18               		.loc 1 7 60 is_stmt 0 view .LVU1
  19 0000 0F93      		push r16
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 16, -2
  23 0002 1F93      		push r17
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 17, -3
  27 0004 CF93      		push r28
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 28, -4
  31 0006 DF93      		push r29
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 29, -5
  35               	/* prologue: function */
  36               	/* frame size = 0 */
  37               	/* stack size = 4 */
  38               	.L__stack_usage = 4
  39 0008 8C01      		movw r16,r24
  40 000a EB01      		movw r28,r22
   8:quantum/quantum.c ****   switch (code) {
  41               		.loc 1 8 3 is_stmt 1 view .LVU2
  42 000c 9A95      		dec r25
  43               	.LVL1:
  44               		.loc 1 8 3 is_stmt 0 view .LVU3
  45 000e 8115      		cp r24,__zero_reg__
  46 0010 9F41      		sbci r25,31
  47 0012 00F4      		brsh .L1
   9:quantum/quantum.c ****   case QK_MODS ... QK_MODS_MAX:
  10:quantum/quantum.c ****     break;
  48               		.loc 1 10 5 is_stmt 1 view .LVU4
  11:quantum/quantum.c ****   default:
  12:quantum/quantum.c ****     return;
  13:quantum/quantum.c ****   }
  14:quantum/quantum.c **** 
  15:quantum/quantum.c ****   if (code & QK_LCTL)
  49               		.loc 1 15 3 view .LVU5
  50               		.loc 1 15 6 is_stmt 0 view .LVU6
  51 0014 10FF      		sbrs r17,0
  52 0016 00C0      		rjmp .L4
  16:quantum/quantum.c ****     f(KC_LCTL);
  53               		.loc 1 16 5 is_stmt 1 view .LVU7
  54 0018 80EE      		ldi r24,lo8(-32)
  55 001a FB01      		movw r30,r22
  56 001c 0995      		icall
  57               	.LVL2:
  58               	.L4:
  17:quantum/quantum.c ****   if (code & QK_LSFT)
  59               		.loc 1 17 3 view .LVU8
  60               		.loc 1 17 6 is_stmt 0 view .LVU9
  61 001e 11FF      		sbrs r17,1
  62 0020 00C0      		rjmp .L5
  18:quantum/quantum.c ****     f(KC_LSFT);
  63               		.loc 1 18 5 is_stmt 1 view .LVU10
  64 0022 81EE      		ldi r24,lo8(-31)
  65 0024 FE01      		movw r30,r28
  66 0026 0995      		icall
  67               	.LVL3:
  68               	.L5:
  19:quantum/quantum.c ****   if (code & QK_LALT)
  69               		.loc 1 19 3 view .LVU11
  70               		.loc 1 19 6 is_stmt 0 view .LVU12
  71 0028 12FF      		sbrs r17,2
  72 002a 00C0      		rjmp .L6
  20:quantum/quantum.c ****     f(KC_LALT);
  73               		.loc 1 20 5 is_stmt 1 view .LVU13
  74 002c 82EE      		ldi r24,lo8(-30)
  75 002e FE01      		movw r30,r28
  76 0030 0995      		icall
  77               	.LVL4:
  78               	.L6:
  21:quantum/quantum.c ****   if (code & QK_LGUI)
  79               		.loc 1 21 3 view .LVU14
  80               		.loc 1 21 6 is_stmt 0 view .LVU15
  81 0032 13FF      		sbrs r17,3
  82 0034 00C0      		rjmp .L7
  22:quantum/quantum.c ****     f(KC_LGUI);
  83               		.loc 1 22 5 is_stmt 1 view .LVU16
  84 0036 83EE      		ldi r24,lo8(-29)
  85 0038 FE01      		movw r30,r28
  86 003a 0995      		icall
  87               	.LVL5:
  88               	.L7:
  23:quantum/quantum.c **** 
  24:quantum/quantum.c ****   if (code < QK_RMODS_MIN) return;
  89               		.loc 1 24 3 view .LVU17
  90               		.loc 1 24 6 is_stmt 0 view .LVU18
  91 003c 0115      		cp r16,__zero_reg__
  92 003e 1041      		sbci r17,16
  93 0040 00F0      		brlo .L1
  25:quantum/quantum.c **** 
  26:quantum/quantum.c ****   if (code & QK_RCTL)
  94               		.loc 1 26 3 is_stmt 1 view .LVU19
  27:quantum/quantum.c ****     f(KC_RCTL);
  95               		.loc 1 27 5 view .LVU20
  96 0042 84EE      		ldi r24,lo8(-28)
  97 0044 FE01      		movw r30,r28
  98 0046 0995      		icall
  99               	.LVL6:
  28:quantum/quantum.c ****   if (code & QK_RSFT)
 100               		.loc 1 28 3 view .LVU21
  29:quantum/quantum.c ****     f(KC_RSFT);
 101               		.loc 1 29 5 view .LVU22
 102 0048 85EE      		ldi r24,lo8(-27)
 103 004a FE01      		movw r30,r28
 104 004c 0995      		icall
 105               	.LVL7:
  30:quantum/quantum.c ****   if (code & QK_RALT)
 106               		.loc 1 30 3 view .LVU23
  31:quantum/quantum.c ****     f(KC_RALT);
 107               		.loc 1 31 5 view .LVU24
 108 004e 86EE      		ldi r24,lo8(-26)
 109 0050 FE01      		movw r30,r28
 110 0052 0995      		icall
 111               	.LVL8:
  32:quantum/quantum.c ****   if (code & QK_RGUI)
 112               		.loc 1 32 3 view .LVU25
  33:quantum/quantum.c ****     f(KC_RGUI);
 113               		.loc 1 33 5 view .LVU26
 114 0054 87EE      		ldi r24,lo8(-25)
 115 0056 FE01      		movw r30,r28
 116               	/* epilogue start */
  34:quantum/quantum.c **** }
 117               		.loc 1 34 1 is_stmt 0 view .LVU27
 118 0058 DF91      		pop r29
 119 005a CF91      		pop r28
 120               	.LVL9:
 121               		.loc 1 34 1 view .LVU28
 122 005c 1F91      		pop r17
 123 005e 0F91      		pop r16
 124               	.LVL10:
  33:quantum/quantum.c ****     f(KC_RGUI);
 125               		.loc 1 33 5 view .LVU29
 126 0060 0994      		ijmp
 127               	.LVL11:
 128               	.L1:
 129               	/* epilogue start */
 130               		.loc 1 34 1 view .LVU30
 131 0062 DF91      		pop r29
 132 0064 CF91      		pop r28
 133               	.LVL12:
 134               		.loc 1 34 1 view .LVU31
 135 0066 1F91      		pop r17
 136 0068 0F91      		pop r16
 137               	.LVL13:
 138               		.loc 1 34 1 view .LVU32
 139 006a 0895      		ret
 140               		.cfi_endproc
 141               	.LFE107:
 143               		.section	.text.register_code16,"ax",@progbits
 144               	.global	register_code16
 146               	register_code16:
 147               	.LVL14:
 148               	.LFB108:
  35:quantum/quantum.c **** 
  36:quantum/quantum.c **** void register_code16 (uint16_t code) {
 149               		.loc 1 36 38 is_stmt 1 view -0
 150               		.cfi_startproc
 151               		.loc 1 36 38 is_stmt 0 view .LVU34
 152 0000 CF93      		push r28
 153               	.LCFI4:
 154               		.cfi_def_cfa_offset 3
 155               		.cfi_offset 28, -2
 156               	/* prologue: function */
 157               	/* frame size = 0 */
 158               	/* stack size = 1 */
 159               	.L__stack_usage = 1
 160 0002 C82F      		mov r28,r24
  37:quantum/quantum.c ****   do_code16 (code, register_code);
 161               		.loc 1 37 3 is_stmt 1 view .LVU35
 162 0004 60E0      		ldi r22,lo8(gs(register_code))
 163 0006 70E0      		ldi r23,hi8(gs(register_code))
 164 0008 0E94 0000 		call do_code16
 165               	.LVL15:
  38:quantum/quantum.c ****   register_code (code);
 166               		.loc 1 38 3 view .LVU36
 167 000c 8C2F      		mov r24,r28
 168               	/* epilogue start */
  39:quantum/quantum.c **** }
 169               		.loc 1 39 1 is_stmt 0 view .LVU37
 170 000e CF91      		pop r28
  38:quantum/quantum.c ****   register_code (code);
 171               		.loc 1 38 3 view .LVU38
 172 0010 0C94 0000 		jmp register_code
 173               	.LVL16:
 174               		.cfi_endproc
 175               	.LFE108:
 177               		.section	.text.unregister_code16,"ax",@progbits
 178               	.global	unregister_code16
 180               	unregister_code16:
 181               	.LVL17:
 182               	.LFB109:
  40:quantum/quantum.c **** 
  41:quantum/quantum.c **** void unregister_code16 (uint16_t code) {
 183               		.loc 1 41 40 is_stmt 1 view -0
 184               		.cfi_startproc
 185               		.loc 1 41 40 is_stmt 0 view .LVU40
 186 0000 CF93      		push r28
 187               	.LCFI5:
 188               		.cfi_def_cfa_offset 3
 189               		.cfi_offset 28, -2
 190 0002 DF93      		push r29
 191               	.LCFI6:
 192               		.cfi_def_cfa_offset 4
 193               		.cfi_offset 29, -3
 194               	/* prologue: function */
 195               	/* frame size = 0 */
 196               	/* stack size = 2 */
 197               	.L__stack_usage = 2
 198 0004 EC01      		movw r28,r24
  42:quantum/quantum.c ****   unregister_code (code);
 199               		.loc 1 42 3 is_stmt 1 view .LVU41
 200 0006 0E94 0000 		call unregister_code
 201               	.LVL18:
  43:quantum/quantum.c ****   do_code16 (code, unregister_code);
 202               		.loc 1 43 3 view .LVU42
 203 000a 60E0      		ldi r22,lo8(gs(unregister_code))
 204 000c 70E0      		ldi r23,hi8(gs(unregister_code))
 205 000e CE01      		movw r24,r28
 206               	/* epilogue start */
  44:quantum/quantum.c **** }
 207               		.loc 1 44 1 is_stmt 0 view .LVU43
 208 0010 DF91      		pop r29
 209 0012 CF91      		pop r28
 210               	.LVL19:
  43:quantum/quantum.c ****   do_code16 (code, unregister_code);
 211               		.loc 1 43 3 view .LVU44
 212 0014 0C94 0000 		jmp do_code16
 213               	.LVL20:
  43:quantum/quantum.c ****   do_code16 (code, unregister_code);
 214               		.loc 1 43 3 view .LVU45
 215               		.cfi_endproc
 216               	.LFE109:
 218               		.section	.text.process_action_kb,"ax",@progbits
 219               		.weak	process_action_kb
 221               	process_action_kb:
 222               	.LVL21:
 223               	.LFB110:
  45:quantum/quantum.c **** 
  46:quantum/quantum.c **** __attribute__ ((weak))
  47:quantum/quantum.c **** bool process_action_kb(keyrecord_t *record) {
 224               		.loc 1 47 45 is_stmt 1 view -0
 225               		.cfi_startproc
 226               	/* prologue: function */
 227               	/* frame size = 0 */
 228               	/* stack size = 0 */
 229               	.L__stack_usage = 0
  48:quantum/quantum.c ****   return true;
 230               		.loc 1 48 3 view .LVU47
  49:quantum/quantum.c **** }
 231               		.loc 1 49 1 is_stmt 0 view .LVU48
 232 0000 81E0      		ldi r24,lo8(1)
 233               	.LVL22:
 234               	/* epilogue start */
 235               		.loc 1 49 1 view .LVU49
 236 0002 0895      		ret
 237               		.cfi_endproc
 238               	.LFE110:
 240               		.section	.text.process_record_user,"ax",@progbits
 241               		.weak	process_record_user
 243               	process_record_user:
 244               	.LVL23:
 245               	.LFB112:
  50:quantum/quantum.c **** 
  51:quantum/quantum.c **** __attribute__ ((weak))
  52:quantum/quantum.c **** bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
  53:quantum/quantum.c ****   return process_record_user(keycode, record);
  54:quantum/quantum.c **** }
  55:quantum/quantum.c **** 
  56:quantum/quantum.c **** __attribute__ ((weak))
  57:quantum/quantum.c **** bool process_record_user(uint16_t keycode, keyrecord_t *record) {
 246               		.loc 1 57 65 is_stmt 1 view -0
 247               		.cfi_startproc
 248               	/* prologue: function */
 249               	/* frame size = 0 */
 250               	/* stack size = 0 */
 251               	.L__stack_usage = 0
  58:quantum/quantum.c ****   return true;
 252               		.loc 1 58 3 view .LVU51
  59:quantum/quantum.c **** }
 253               		.loc 1 59 1 is_stmt 0 view .LVU52
 254 0000 81E0      		ldi r24,lo8(1)
 255               	.LVL24:
 256               	/* epilogue start */
 257               		.loc 1 59 1 view .LVU53
 258 0002 0895      		ret
 259               		.cfi_endproc
 260               	.LFE112:
 262               		.section	.text.process_record_kb,"ax",@progbits
 263               		.weak	process_record_kb
 265               	process_record_kb:
 266               	.LVL25:
 267               	.LFB111:
  52:quantum/quantum.c ****   return process_record_user(keycode, record);
 268               		.loc 1 52 63 is_stmt 1 view -0
 269               		.cfi_startproc
 270               	/* prologue: function */
 271               	/* frame size = 0 */
 272               	/* stack size = 0 */
 273               	.L__stack_usage = 0
  53:quantum/quantum.c **** }
 274               		.loc 1 53 3 view .LVU55
  53:quantum/quantum.c **** }
 275               		.loc 1 53 10 is_stmt 0 view .LVU56
 276 0000 0C94 0000 		jmp process_record_user
 277               	.LVL26:
  53:quantum/quantum.c **** }
 278               		.loc 1 53 10 view .LVU57
 279               		.cfi_endproc
 280               	.LFE111:
 282               		.section	.text.reset_keyboard,"ax",@progbits
 283               	.global	reset_keyboard
 285               	reset_keyboard:
 286               	.LFB113:
  60:quantum/quantum.c **** 
  61:quantum/quantum.c **** void reset_keyboard(void) {
 287               		.loc 1 61 27 is_stmt 1 view -0
 288               		.cfi_startproc
 289               	/* prologue: function */
 290               	/* frame size = 0 */
 291               	/* stack size = 0 */
 292               	.L__stack_usage = 0
  62:quantum/quantum.c ****   clear_keyboard();
 293               		.loc 1 62 3 view .LVU59
 294 0000 0E94 0000 		call clear_keyboard
 295               	.LVL27:
  63:quantum/quantum.c **** #ifdef AUDIO_ENABLE
  64:quantum/quantum.c ****   stop_all_notes();
  65:quantum/quantum.c ****   shutdown_user();
  66:quantum/quantum.c **** #endif
  67:quantum/quantum.c ****   wait_ms(250);
 296               		.loc 1 67 3 view .LVU60
 297               	.LBB4:
 298               	.LBI4:
 299               		.file 2 "/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h"
   1:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    All rights reserved.
   5:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
   6:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
   9:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  12:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****      distribution.
  16:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  17:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  21:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  33:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  35:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  38:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #  endif
  42:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  44:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #include <inttypes.h>
  45:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #include <math.h>
  47:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  48:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** /** \file */
  49:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     \code
  51:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     \endcode
  55:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  56:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     used.
  60:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  61:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  70:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     routines linked into the application.
  78:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  79:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  83:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** */
  84:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  85:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #endif
  89:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  90:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #ifndef F_CPU
  91:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     \def F_CPU
  95:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  97:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 103:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     integer value.
 107:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****  */
 108:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #endif
 110:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 111:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #endif
 114:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 115:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #  include <math.h>
 119:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #endif
 120:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 121:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** /**
 122:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    \ingroup util_delay
 123:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 124:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 126:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 129:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 131:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 137:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 142:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    microseconds of delay.
 146:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 147:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    respectively.
 151:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 152:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    \note
 153:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 154:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    not available to the compiler then.
 163:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 164:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****  */
 165:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** void
 166:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** _delay_ms(double __ms)
 300               		.loc 2 166 1 view .LVU61
 301               	.LBB5:
 167:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** {
 168:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	double __tmp ;
 302               		.loc 2 168 2 view .LVU62
 169:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 303               		.loc 2 172 2 view .LVU63
 173:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 304               		.loc 2 173 2 view .LVU64
 174:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 305               		.loc 2 174 2 view .LVU65
 175:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 176:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 179:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 182:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	#else
 183:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		//round up by default
 184:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 306               		.loc 2 184 3 view .LVU66
 185:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	#endif
 186:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 187:/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 307               		.loc 2 187 2 view .LVU67
 308 0004 2FEF      		ldi r18,lo8(799999)
 309 0006 84E3      		ldi r24,hi8(799999)
 310 0008 9CE0      		ldi r25,hlo8(799999)
 311 000a 2150      	1:	subi r18,1
 312 000c 8040      		sbci r24,0
 313 000e 9040      		sbci r25,0
 314 0010 01F4      		brne 1b
 315 0012 00C0      		rjmp .
 316 0014 0000      		nop
 317               	.LVL28:
 318               		.loc 2 187 2 is_stmt 0 view .LVU68
 319               	.LBE5:
 320               	.LBE4:
  68:quantum/quantum.c **** #ifdef CATERINA_BOOTLOADER
  69:quantum/quantum.c ****   *(uint16_t *)0x0800 = 0x7777; // these two are a-star-specific
  70:quantum/quantum.c **** #endif
  71:quantum/quantum.c ****   bootloader_jump();
 321               		.loc 1 71 3 is_stmt 1 view .LVU69
 322 0016 0C94 0000 		jmp bootloader_jump
 323               	.LVL29:
 324               		.cfi_endproc
 325               	.LFE113:
 327               		.section	.text.process_record_quantum,"ax",@progbits
 328               	.global	process_record_quantum
 330               	process_record_quantum:
 331               	.LVL30:
 332               	.LFB114:
  72:quantum/quantum.c **** }
  73:quantum/quantum.c **** 
  74:quantum/quantum.c **** // Shift / paren setup
  75:quantum/quantum.c **** 
  76:quantum/quantum.c **** #ifndef LSPO_KEY
  77:quantum/quantum.c ****   #define LSPO_KEY KC_9
  78:quantum/quantum.c **** #endif
  79:quantum/quantum.c **** #ifndef RSPC_KEY
  80:quantum/quantum.c ****   #define RSPC_KEY KC_0
  81:quantum/quantum.c **** #endif
  82:quantum/quantum.c **** 
  83:quantum/quantum.c **** static bool shift_interrupted[2] = {0, 0};
  84:quantum/quantum.c **** static uint16_t scs_timer = 0;
  85:quantum/quantum.c **** 
  86:quantum/quantum.c **** bool process_record_quantum(keyrecord_t *record) {
 333               		.loc 1 86 50 view -0
 334               		.cfi_startproc
 335               		.loc 1 86 50 is_stmt 0 view .LVU71
 336 0000 EF92      		push r14
 337               	.LCFI7:
 338               		.cfi_def_cfa_offset 3
 339               		.cfi_offset 14, -2
 340 0002 FF92      		push r15
 341               	.LCFI8:
 342               		.cfi_def_cfa_offset 4
 343               		.cfi_offset 15, -3
 344 0004 0F93      		push r16
 345               	.LCFI9:
 346               		.cfi_def_cfa_offset 5
 347               		.cfi_offset 16, -4
 348 0006 1F93      		push r17
 349               	.LCFI10:
 350               		.cfi_def_cfa_offset 6
 351               		.cfi_offset 17, -5
 352 0008 CF93      		push r28
 353               	.LCFI11:
 354               		.cfi_def_cfa_offset 7
 355               		.cfi_offset 28, -6
 356 000a DF93      		push r29
 357               	.LCFI12:
 358               		.cfi_def_cfa_offset 8
 359               		.cfi_offset 29, -7
 360               	/* prologue: function */
 361               	/* frame size = 0 */
 362               	/* stack size = 6 */
 363               	.L__stack_usage = 6
 364 000c 7C01      		movw r14,r24
  87:quantum/quantum.c **** 
  88:quantum/quantum.c ****   /* This gets the keycode from the key pressed */
  89:quantum/quantum.c ****   keypos_t key = record->event.key;
 365               		.loc 1 89 3 is_stmt 1 view .LVU72
 366               		.loc 1 89 12 is_stmt 0 view .LVU73
 367 000e DC01      		movw r26,r24
 368 0010 0D91      		ld r16,X+
 369 0012 1C91      		ld r17,X
 370 0014 1197      		sbiw r26,1
 371               	.LVL31:
  90:quantum/quantum.c ****   uint16_t keycode;
 372               		.loc 1 90 3 is_stmt 1 view .LVU74
  91:quantum/quantum.c **** 
  92:quantum/quantum.c ****   #if !defined(NO_ACTION_LAYER) && defined(PREVENT_STUCK_MODIFIERS)
  93:quantum/quantum.c ****     /* TODO: Use store_or_get_action() or a similar function. */
  94:quantum/quantum.c ****     if (!disable_action_cache) {
 373               		.loc 1 94 5 view .LVU75
 374               		.loc 1 94 8 is_stmt 0 view .LVU76
 375 0016 8091 0000 		lds r24,disable_action_cache
 376               	.LVL32:
 377               		.loc 1 94 8 view .LVU77
 378 001a 8111      		cpse r24,__zero_reg__
 379 001c 00C0      		rjmp .L28
 380               	.LBB6:
  95:quantum/quantum.c ****       uint8_t layer;
 381               		.loc 1 95 7 is_stmt 1 view .LVU78
  96:quantum/quantum.c **** 
  97:quantum/quantum.c ****       if (record->event.pressed) {
 382               		.loc 1 97 7 view .LVU79
 383               		.loc 1 97 10 is_stmt 0 view .LVU80
 384 001e 1296      		adiw r26,2
 385 0020 8C91      		ld r24,X
 386 0022 8823      		tst r24
 387 0024 01F4      		brne .+2
 388 0026 00C0      		rjmp .L29
  98:quantum/quantum.c ****         layer = layer_switch_get_layer(key);
 389               		.loc 1 98 9 is_stmt 1 view .LVU81
 390               	.LVL33:
 391               		.loc 1 98 17 is_stmt 0 view .LVU82
 392 0028 C801      		movw r24,r16
 393 002a 0E94 0000 		call layer_switch_get_layer
 394               	.LVL34:
 395 002e C82F      		mov r28,r24
 396               	.LVL35:
  99:quantum/quantum.c ****         update_source_layers_cache(key, layer);
 397               		.loc 1 99 9 is_stmt 1 view .LVU83
 398 0030 682F      		mov r22,r24
 399 0032 C801      		movw r24,r16
 400               	.LVL36:
 401               		.loc 1 99 9 is_stmt 0 view .LVU84
 402 0034 0E94 0000 		call update_source_layers_cache
 403               	.LVL37:
 404               	.L30:
 100:quantum/quantum.c ****       } else {
 101:quantum/quantum.c ****         layer = read_source_layers_cache(key);
 102:quantum/quantum.c ****       }
 103:quantum/quantum.c ****       keycode = keymap_key_to_keycode(layer, key);
 405               		.loc 1 103 7 is_stmt 1 view .LVU85
 406               		.loc 1 103 17 is_stmt 0 view .LVU86
 407 0038 B801      		movw r22,r16
 408 003a 8C2F      		mov r24,r28
 409               	.LVL38:
 410               	.L123:
 411               		.loc 1 103 17 view .LVU87
 412               	.LBE6:
 104:quantum/quantum.c ****     } else
 105:quantum/quantum.c ****   #endif
 106:quantum/quantum.c ****     keycode = keymap_key_to_keycode(layer_switch_get_layer(key), key);
 413               		.loc 1 106 15 view .LVU88
 414 003c 0E94 0000 		call keymap_key_to_keycode
 415               	.LVL39:
 416 0040 EC01      		movw r28,r24
 417               	.LVL40:
 107:quantum/quantum.c **** 
 108:quantum/quantum.c ****     // This is how you use actions here
 109:quantum/quantum.c ****     // if (keycode == KC_LEAD) {
 110:quantum/quantum.c ****     //   action_t action;
 111:quantum/quantum.c ****     //   action.code = ACTION_DEFAULT_LAYER_SET(0);
 112:quantum/quantum.c ****     //   process_action(record, action);
 113:quantum/quantum.c ****     //   return false;
 114:quantum/quantum.c ****     // }
 115:quantum/quantum.c **** 
 116:quantum/quantum.c ****   if (!(
 418               		.loc 1 116 3 is_stmt 1 view .LVU89
 117:quantum/quantum.c ****     process_record_kb(keycode, record) &&
 419               		.loc 1 117 5 is_stmt 0 view .LVU90
 420 0042 B701      		movw r22,r14
 421 0044 0E94 0000 		call process_record_kb
 422               	.LVL41:
 118:quantum/quantum.c ****   #ifdef MIDI_ENABLE
 119:quantum/quantum.c ****     process_midi(keycode, record) &&
 120:quantum/quantum.c ****   #endif
 121:quantum/quantum.c ****   #ifdef AUDIO_ENABLE
 122:quantum/quantum.c ****     process_music(keycode, record) &&
 123:quantum/quantum.c ****   #endif
 124:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 125:quantum/quantum.c ****     process_tap_dance(keycode, record) &&
 423               		.loc 1 125 40 view .LVU91
 424 0048 8823      		tst r24
 425 004a 01F4      		brne .+2
 426 004c 00C0      		rjmp .L33
 427               		.loc 1 125 5 discriminator 2 view .LVU92
 428 004e B701      		movw r22,r14
 429 0050 CE01      		movw r24,r28
 430 0052 0E94 0000 		call process_tap_dance
 431               	.LVL42:
 117:quantum/quantum.c ****     process_record_kb(keycode, record) &&
 432               		.loc 1 117 40 discriminator 2 view .LVU93
 433 0056 8823      		tst r24
 434 0058 01F4      		brne .+2
 435 005a 00C0      		rjmp .L33
 126:quantum/quantum.c ****   #endif
 127:quantum/quantum.c ****   #ifndef DISABLE_LEADER
 128:quantum/quantum.c ****     process_leader(keycode, record) &&
 436               		.loc 1 128 5 discriminator 3 view .LVU94
 437 005c B701      		movw r22,r14
 438 005e CE01      		movw r24,r28
 439 0060 0E94 0000 		call process_leader
 440               	.LVL43:
 125:quantum/quantum.c ****   #endif
 441               		.loc 1 125 40 discriminator 3 view .LVU95
 442 0064 8823      		tst r24
 443 0066 01F4      		brne .+2
 444 0068 00C0      		rjmp .L33
 129:quantum/quantum.c ****   #endif
 130:quantum/quantum.c ****   #ifndef DISABLE_CHORDING
 131:quantum/quantum.c ****     process_chording(keycode, record) &&
 132:quantum/quantum.c ****   #endif
 133:quantum/quantum.c ****   #ifdef UNICODE_ENABLE
 134:quantum/quantum.c ****     process_unicode(keycode, record) &&
 135:quantum/quantum.c ****   #endif
 136:quantum/quantum.c ****   #ifdef UCIS_ENABLE
 137:quantum/quantum.c ****     process_ucis(keycode, record) &&
 138:quantum/quantum.c ****   #endif
 139:quantum/quantum.c ****   #ifdef PRINTING_ENABLE
 140:quantum/quantum.c ****     process_printer(keycode, record) &&
 141:quantum/quantum.c ****   #endif
 142:quantum/quantum.c ****   #ifdef UNICODEMAP_ENABLE
 143:quantum/quantum.c ****     process_unicode_map(keycode, record) &&
 144:quantum/quantum.c ****   #endif
 145:quantum/quantum.c ****       true)) {
 146:quantum/quantum.c ****     return false;
 147:quantum/quantum.c ****   }
 148:quantum/quantum.c **** 
 149:quantum/quantum.c ****   // Shift / paren setup
 150:quantum/quantum.c **** 
 151:quantum/quantum.c ****   switch(keycode) {
 445               		.loc 1 151 3 is_stmt 1 view .LVU96
 446 006a CE33      		cpi r28,62
 447 006c B0E7      		ldi r27,112
 448 006e DB07      		cpc r29,r27
 449 0070 00F4      		brsh .L35
 450 0072 C433      		cpi r28,52
 451 0074 E0E7      		ldi r30,112
 452 0076 DE07      		cpc r29,r30
 453 0078 00F4      		brsh .L36
 454 007a C130      		cpi r28,1
 455 007c F0E7      		ldi r31,112
 456 007e DF07      		cpc r29,r31
 457 0080 01F4      		brne .+2
 458 0082 00C0      		rjmp .L37
 459 0084 00F4      		brsh .L38
 460 0086 C115      		cp r28,__zero_reg__
 461 0088 D047      		sbci r29,112
 462 008a 01F4      		brne .+2
 463 008c 00C0      		rjmp .L39
 464               	.L35:
 152:quantum/quantum.c ****     case RESET:
 153:quantum/quantum.c ****       if (record->event.pressed) {
 154:quantum/quantum.c ****         reset_keyboard();
 155:quantum/quantum.c ****       }
 156:quantum/quantum.c **** 	  return false;
 157:quantum/quantum.c ****       break;
 158:quantum/quantum.c ****     case DEBUG:
 159:quantum/quantum.c ****       if (record->event.pressed) {
 160:quantum/quantum.c ****           print("\nDEBUG: enabled.\n");
 161:quantum/quantum.c ****           debug_enable = true;
 162:quantum/quantum.c ****       }
 163:quantum/quantum.c **** 	  return false;
 164:quantum/quantum.c ****       break;
 165:quantum/quantum.c **** 	#ifdef RGBLIGHT_ENABLE
 166:quantum/quantum.c **** 	case RGB_TOG:
 167:quantum/quantum.c **** 		if (record->event.pressed) {
 168:quantum/quantum.c **** 			rgblight_toggle();
 169:quantum/quantum.c ****       }
 170:quantum/quantum.c **** 	  return false;
 171:quantum/quantum.c ****       break;
 172:quantum/quantum.c **** 	case RGB_MOD:
 173:quantum/quantum.c **** 		if (record->event.pressed) {
 174:quantum/quantum.c **** 			rgblight_step();
 175:quantum/quantum.c ****       }
 176:quantum/quantum.c **** 	  return false;
 177:quantum/quantum.c ****       break;
 178:quantum/quantum.c **** 	case RGB_HUI:
 179:quantum/quantum.c **** 		if (record->event.pressed) {
 180:quantum/quantum.c **** 			rgblight_increase_hue();
 181:quantum/quantum.c ****       }
 182:quantum/quantum.c **** 	  return false;
 183:quantum/quantum.c ****       break;
 184:quantum/quantum.c **** 	case RGB_HUD:
 185:quantum/quantum.c **** 		if (record->event.pressed) {
 186:quantum/quantum.c **** 			rgblight_decrease_hue();
 187:quantum/quantum.c ****       }
 188:quantum/quantum.c **** 	  return false;
 189:quantum/quantum.c ****       break;
 190:quantum/quantum.c **** 	case RGB_SAI:
 191:quantum/quantum.c **** 		if (record->event.pressed) {
 192:quantum/quantum.c **** 			rgblight_increase_sat();
 193:quantum/quantum.c ****       }
 194:quantum/quantum.c **** 	  return false;
 195:quantum/quantum.c ****       break;
 196:quantum/quantum.c **** 	case RGB_SAD:
 197:quantum/quantum.c **** 		if (record->event.pressed) {
 198:quantum/quantum.c **** 			rgblight_decrease_sat();
 199:quantum/quantum.c ****       }
 200:quantum/quantum.c **** 	  return false;
 201:quantum/quantum.c ****       break;
 202:quantum/quantum.c **** 	case RGB_VAI:
 203:quantum/quantum.c **** 		if (record->event.pressed) {
 204:quantum/quantum.c **** 			rgblight_increase_val();
 205:quantum/quantum.c ****       }
 206:quantum/quantum.c **** 	  return false;
 207:quantum/quantum.c ****       break;
 208:quantum/quantum.c **** 	case RGB_VAD:
 209:quantum/quantum.c **** 		if (record->event.pressed) {
 210:quantum/quantum.c **** 			rgblight_decrease_val();
 211:quantum/quantum.c ****       }
 212:quantum/quantum.c **** 	  return false;
 213:quantum/quantum.c ****       break;
 214:quantum/quantum.c **** 	#endif
 215:quantum/quantum.c ****     case MAGIC_SWAP_CONTROL_CAPSLOCK ... MAGIC_TOGGLE_NKRO:
 216:quantum/quantum.c ****       if (record->event.pressed) {
 217:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 218:quantum/quantum.c ****         if (!eeconfig_is_enabled()) {
 219:quantum/quantum.c ****             eeconfig_init();
 220:quantum/quantum.c ****         }
 221:quantum/quantum.c ****         /* keymap config */
 222:quantum/quantum.c ****         keymap_config.raw = eeconfig_read_keymap();
 223:quantum/quantum.c ****         switch (keycode)
 224:quantum/quantum.c ****         {
 225:quantum/quantum.c ****           case MAGIC_SWAP_CONTROL_CAPSLOCK:
 226:quantum/quantum.c ****             keymap_config.swap_control_capslock = true;
 227:quantum/quantum.c ****             break;
 228:quantum/quantum.c ****           case MAGIC_CAPSLOCK_TO_CONTROL:
 229:quantum/quantum.c ****             keymap_config.capslock_to_control = true;
 230:quantum/quantum.c ****             break;
 231:quantum/quantum.c ****           case MAGIC_SWAP_LALT_LGUI:
 232:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = true;
 233:quantum/quantum.c ****             break;
 234:quantum/quantum.c ****           case MAGIC_SWAP_RALT_RGUI:
 235:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 236:quantum/quantum.c ****             break;
 237:quantum/quantum.c ****           case MAGIC_NO_GUI:
 238:quantum/quantum.c ****             keymap_config.no_gui = true;
 239:quantum/quantum.c ****             break;
 240:quantum/quantum.c ****           case MAGIC_SWAP_GRAVE_ESC:
 241:quantum/quantum.c ****             keymap_config.swap_grave_esc = true;
 242:quantum/quantum.c ****             break;
 243:quantum/quantum.c ****           case MAGIC_SWAP_BACKSLASH_BACKSPACE:
 244:quantum/quantum.c ****             keymap_config.swap_backslash_backspace = true;
 245:quantum/quantum.c ****             break;
 246:quantum/quantum.c ****           case MAGIC_HOST_NKRO:
 247:quantum/quantum.c ****             keymap_config.nkro = true;
 248:quantum/quantum.c ****             break;
 249:quantum/quantum.c ****           case MAGIC_SWAP_ALT_GUI:
 250:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = true;
 251:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 252:quantum/quantum.c ****             break;
 253:quantum/quantum.c ****           case MAGIC_UNSWAP_CONTROL_CAPSLOCK:
 254:quantum/quantum.c ****             keymap_config.swap_control_capslock = false;
 255:quantum/quantum.c ****             break;
 256:quantum/quantum.c ****           case MAGIC_UNCAPSLOCK_TO_CONTROL:
 257:quantum/quantum.c ****             keymap_config.capslock_to_control = false;
 258:quantum/quantum.c ****             break;
 259:quantum/quantum.c ****           case MAGIC_UNSWAP_LALT_LGUI:
 260:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = false;
 261:quantum/quantum.c ****             break;
 262:quantum/quantum.c ****           case MAGIC_UNSWAP_RALT_RGUI:
 263:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 264:quantum/quantum.c ****             break;
 265:quantum/quantum.c ****           case MAGIC_UNNO_GUI:
 266:quantum/quantum.c ****             keymap_config.no_gui = false;
 267:quantum/quantum.c ****             break;
 268:quantum/quantum.c ****           case MAGIC_UNSWAP_GRAVE_ESC:
 269:quantum/quantum.c ****             keymap_config.swap_grave_esc = false;
 270:quantum/quantum.c ****             break;
 271:quantum/quantum.c ****           case MAGIC_UNSWAP_BACKSLASH_BACKSPACE:
 272:quantum/quantum.c ****             keymap_config.swap_backslash_backspace = false;
 273:quantum/quantum.c ****             break;
 274:quantum/quantum.c ****           case MAGIC_UNHOST_NKRO:
 275:quantum/quantum.c ****             keymap_config.nkro = false;
 276:quantum/quantum.c ****             break;
 277:quantum/quantum.c ****           case MAGIC_UNSWAP_ALT_GUI:
 278:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = false;
 279:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 280:quantum/quantum.c ****             break;
 281:quantum/quantum.c ****           case MAGIC_TOGGLE_NKRO:
 282:quantum/quantum.c ****             keymap_config.nkro = !keymap_config.nkro;
 283:quantum/quantum.c ****             break;
 284:quantum/quantum.c ****           default:
 285:quantum/quantum.c ****             break;
 286:quantum/quantum.c ****         }
 287:quantum/quantum.c ****         eeconfig_update_keymap(keymap_config.raw);
 288:quantum/quantum.c ****         clear_keyboard(); // clear to prevent stuck keys
 289:quantum/quantum.c **** 
 290:quantum/quantum.c ****         return false;
 291:quantum/quantum.c ****       }
 292:quantum/quantum.c ****       break;
 293:quantum/quantum.c ****     case KC_LSPO: {
 294:quantum/quantum.c ****       if (record->event.pressed) {
 295:quantum/quantum.c ****         shift_interrupted[0] = false;
 296:quantum/quantum.c ****         scs_timer = timer_read ();
 297:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 298:quantum/quantum.c ****       }
 299:quantum/quantum.c ****       else {
 300:quantum/quantum.c ****         #ifdef DISABLE_SPACE_CADET_ROLLOVER
 301:quantum/quantum.c ****           if (get_mods() & MOD_BIT(KC_RSFT)) {
 302:quantum/quantum.c ****             shift_interrupted[0] = true;
 303:quantum/quantum.c ****             shift_interrupted[1] = true;
 304:quantum/quantum.c ****           }
 305:quantum/quantum.c ****         #endif
 306:quantum/quantum.c ****         if (!shift_interrupted[0] && timer_elapsed(scs_timer) < TAPPING_TERM) {
 307:quantum/quantum.c ****           register_code(LSPO_KEY);
 308:quantum/quantum.c ****           unregister_code(LSPO_KEY);
 309:quantum/quantum.c ****         }
 310:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_LSFT));
 311:quantum/quantum.c ****       }
 312:quantum/quantum.c ****       return false;
 313:quantum/quantum.c ****       // break;
 314:quantum/quantum.c ****     }
 315:quantum/quantum.c **** 
 316:quantum/quantum.c ****     case KC_RSPC: {
 317:quantum/quantum.c ****       if (record->event.pressed) {
 318:quantum/quantum.c ****         shift_interrupted[1] = false;
 319:quantum/quantum.c ****         scs_timer = timer_read ();
 320:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 321:quantum/quantum.c ****       }
 322:quantum/quantum.c ****       else {
 323:quantum/quantum.c ****         #ifdef DISABLE_SPACE_CADET_ROLLOVER
 324:quantum/quantum.c ****           if (get_mods() & MOD_BIT(KC_LSFT)) {
 325:quantum/quantum.c ****             shift_interrupted[0] = true;
 326:quantum/quantum.c ****             shift_interrupted[1] = true;
 327:quantum/quantum.c ****           }
 328:quantum/quantum.c ****         #endif
 329:quantum/quantum.c ****         if (!shift_interrupted[1] && timer_elapsed(scs_timer) < TAPPING_TERM) {
 330:quantum/quantum.c ****           register_code(RSPC_KEY);
 331:quantum/quantum.c ****           unregister_code(RSPC_KEY);
 332:quantum/quantum.c ****         }
 333:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 334:quantum/quantum.c ****       }
 335:quantum/quantum.c ****       return false;
 336:quantum/quantum.c ****       // break;
 337:quantum/quantum.c ****     }
 338:quantum/quantum.c ****     default: {
 339:quantum/quantum.c ****       shift_interrupted[0] = true;
 465               		.loc 1 339 7 view .LVU97
 466               		.loc 1 339 28 is_stmt 0 view .LVU98
 467 008e 81E0      		ldi r24,lo8(1)
 468 0090 8093 0000 		sts shift_interrupted,r24
 340:quantum/quantum.c ****       shift_interrupted[1] = true;
 469               		.loc 1 340 7 is_stmt 1 view .LVU99
 470               		.loc 1 340 28 is_stmt 0 view .LVU100
 471 0094 8093 0000 		sts shift_interrupted+1,r24
 341:quantum/quantum.c ****       break;
 472               		.loc 1 341 7 is_stmt 1 view .LVU101
 473               	.L52:
 342:quantum/quantum.c ****     }
 343:quantum/quantum.c ****   }
 344:quantum/quantum.c **** 
 345:quantum/quantum.c ****   return process_action_kb(record);
 474               		.loc 1 345 3 view .LVU102
 475               		.loc 1 345 10 is_stmt 0 view .LVU103
 476 0098 C701      		movw r24,r14
 477               	/* epilogue start */
 346:quantum/quantum.c **** }
 478               		.loc 1 346 1 view .LVU104
 479 009a DF91      		pop r29
 480 009c CF91      		pop r28
 481               	.LVL44:
 482               		.loc 1 346 1 view .LVU105
 483 009e 1F91      		pop r17
 484 00a0 0F91      		pop r16
 485               	.LVL45:
 486               		.loc 1 346 1 view .LVU106
 487 00a2 FF90      		pop r15
 488 00a4 EF90      		pop r14
 489               	.LVL46:
 345:quantum/quantum.c **** }
 490               		.loc 1 345 10 view .LVU107
 491 00a6 0C94 0000 		jmp process_action_kb
 492               	.LVL47:
 493               	.L29:
 494               	.LBB7:
 101:quantum/quantum.c ****       }
 495               		.loc 1 101 9 is_stmt 1 view .LVU108
 101:quantum/quantum.c ****       }
 496               		.loc 1 101 17 is_stmt 0 view .LVU109
 497 00aa C801      		movw r24,r16
 498 00ac 0E94 0000 		call read_source_layers_cache
 499               	.LVL48:
 500 00b0 C82F      		mov r28,r24
 501               	.LVL49:
 101:quantum/quantum.c ****       }
 502               		.loc 1 101 17 view .LVU110
 503 00b2 00C0      		rjmp .L30
 504               	.LVL50:
 505               	.L28:
 101:quantum/quantum.c ****       }
 506               		.loc 1 101 17 view .LVU111
 507               	.LBE7:
 106:quantum/quantum.c **** 
 508               		.loc 1 106 5 is_stmt 1 view .LVU112
 106:quantum/quantum.c **** 
 509               		.loc 1 106 37 is_stmt 0 view .LVU113
 510 00b4 C801      		movw r24,r16
 511 00b6 0E94 0000 		call layer_switch_get_layer
 512               	.LVL51:
 106:quantum/quantum.c **** 
 513               		.loc 1 106 15 view .LVU114
 514 00ba B801      		movw r22,r16
 515 00bc 00C0      		rjmp .L123
 516               	.LVL52:
 517               	.L36:
 106:quantum/quantum.c **** 
 518               		.loc 1 106 15 view .LVU115
 519 00be FE01      		movw r30,r28
 520 00c0 E553      		subi r30,53
 521 00c2 F047      		sbci r31,112
 522 00c4 D701      		movw r26,r14
 523 00c6 1296      		adiw r26,2
 524 00c8 8C91      		ld r24,X
 525 00ca E930      		cpi r30,9
 526 00cc F105      		cpc r31,__zero_reg__
 527 00ce 00F0      		brlo .+2
 528 00d0 00C0      		rjmp .L40
 106:quantum/quantum.c **** 
 529               		.loc 1 106 15 view .LVU116
 530 00d2 E050      		subi r30,lo8(-(gs(.L42)))
 531 00d4 F040      		sbci r31,hi8(-(gs(.L42)))
 532 00d6 0C94 0000 		jmp __tablejump2__
 533               		.section	.jumptables.gcc.process_record_quantum,"a",@progbits
 534               		.p2align	1
 535               	.L42:
 536 0000 0000      		.word gs(.L50)
 537 0002 0000      		.word gs(.L49)
 538 0004 0000      		.word gs(.L48)
 539 0006 0000      		.word gs(.L47)
 540 0008 0000      		.word gs(.L46)
 541 000a 0000      		.word gs(.L45)
 542 000c 0000      		.word gs(.L44)
 543 000e 0000      		.word gs(.L43)
 544 0010 0000      		.word gs(.L41)
 545               		.section	.text.process_record_quantum
 546               	.L38:
 151:quantum/quantum.c ****     case RESET:
 547               		.loc 1 151 3 view .LVU117
 548 00da CE01      		movw r24,r28
 549 00dc 8250      		subi r24,2
 550 00de 9047      		sbci r25,112
 551 00e0 4397      		sbiw r24,19
 552 00e2 00F4      		brsh .L35
 213:quantum/quantum.c **** 	#endif
 553               		.loc 1 213 7 is_stmt 1 view .LVU118
 216:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 554               		.loc 1 216 7 view .LVU119
 216:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 555               		.loc 1 216 10 is_stmt 0 view .LVU120
 556 00e4 F701      		movw r30,r14
 557 00e6 8281      		ldd r24,Z+2
 558 00e8 8823      		tst r24
 559 00ea 01F0      		breq .L52
 218:quantum/quantum.c ****             eeconfig_init();
 560               		.loc 1 218 9 is_stmt 1 view .LVU121
 218:quantum/quantum.c ****             eeconfig_init();
 561               		.loc 1 218 14 is_stmt 0 view .LVU122
 562 00ec 0E94 0000 		call eeconfig_is_enabled
 563               	.LVL53:
 218:quantum/quantum.c ****             eeconfig_init();
 564               		.loc 1 218 12 view .LVU123
 565 00f0 8111      		cpse r24,__zero_reg__
 566 00f2 00C0      		rjmp .L53
 219:quantum/quantum.c ****         }
 567               		.loc 1 219 13 is_stmt 1 view .LVU124
 568 00f4 0E94 0000 		call eeconfig_init
 569               	.LVL54:
 570               	.L53:
 222:quantum/quantum.c ****         switch (keycode)
 571               		.loc 1 222 9 view .LVU125
 222:quantum/quantum.c ****         switch (keycode)
 572               		.loc 1 222 29 is_stmt 0 view .LVU126
 573 00f8 0E94 0000 		call eeconfig_read_keymap
 574               	.LVL55:
 575 00fc 90E0      		ldi r25,0
 576 00fe 9093 0000 		sts keymap_config+1,r25
 577 0102 8093 0000 		sts keymap_config,r24
 223:quantum/quantum.c ****         {
 578               		.loc 1 223 9 is_stmt 1 view .LVU127
 579 0106 FE01      		movw r30,r28
 580 0108 E350      		subi r30,3
 581 010a F047      		sbci r31,112
 226:quantum/quantum.c ****             break;
 582               		.loc 1 226 49 is_stmt 0 view .LVU128
 583 010c 8091 0000 		lds r24,keymap_config
 584 0110 8160      		ori r24,lo8(1<<0)
 585 0112 E231      		cpi r30,18
 586 0114 F105      		cpc r31,__zero_reg__
 587 0116 00F0      		brlo .+2
 588 0118 00C0      		rjmp .L124
 589 011a E050      		subi r30,lo8(-(gs(.L56)))
 590 011c F040      		sbci r31,hi8(-(gs(.L56)))
 591 011e 0C94 0000 		jmp __tablejump2__
 592               		.section	.jumptables.gcc.process_record_quantum,"a",@progbits
 593               		.p2align	1
 594               	.L56:
 595 0012 0000      		.word gs(.L73)
 596 0014 0000      		.word gs(.L72)
 597 0016 0000      		.word gs(.L71)
 598 0018 0000      		.word gs(.L70)
 599 001a 0000      		.word gs(.L69)
 600 001c 0000      		.word gs(.L68)
 601 001e 0000      		.word gs(.L67)
 602 0020 0000      		.word gs(.L66)
 603 0022 0000      		.word gs(.L65)
 604 0024 0000      		.word gs(.L64)
 605 0026 0000      		.word gs(.L63)
 606 0028 0000      		.word gs(.L62)
 607 002a 0000      		.word gs(.L61)
 608 002c 0000      		.word gs(.L60)
 609 002e 0000      		.word gs(.L59)
 610 0030 0000      		.word gs(.L58)
 611 0032 0000      		.word gs(.L57)
 612 0034 0000      		.word gs(.L55)
 613               		.section	.text.process_record_quantum
 614               	.L39:
 153:quantum/quantum.c ****         reset_keyboard();
 615               		.loc 1 153 7 is_stmt 1 view .LVU129
 153:quantum/quantum.c ****         reset_keyboard();
 616               		.loc 1 153 10 is_stmt 0 view .LVU130
 617 0122 F701      		movw r30,r14
 618 0124 8281      		ldd r24,Z+2
 619 0126 8111      		cpse r24,__zero_reg__
 154:quantum/quantum.c ****       }
 620               		.loc 1 154 9 is_stmt 1 view .LVU131
 621 0128 0E94 0000 		call reset_keyboard
 622               	.LVL56:
 623               	.L33:
 624               		.loc 1 346 1 is_stmt 0 view .LVU132
 625 012c 80E0      		ldi r24,0
 626               	/* epilogue start */
 627 012e DF91      		pop r29
 628 0130 CF91      		pop r28
 629               	.LVL57:
 630               		.loc 1 346 1 view .LVU133
 631 0132 1F91      		pop r17
 632 0134 0F91      		pop r16
 633               	.LVL58:
 634               		.loc 1 346 1 view .LVU134
 635 0136 FF90      		pop r15
 636 0138 EF90      		pop r14
 637               	.LVL59:
 638               		.loc 1 346 1 view .LVU135
 639 013a 0895      		ret
 640               	.LVL60:
 641               	.L37:
 157:quantum/quantum.c ****     case DEBUG:
 642               		.loc 1 157 7 is_stmt 1 view .LVU136
 159:quantum/quantum.c ****           print("\nDEBUG: enabled.\n");
 643               		.loc 1 159 7 view .LVU137
 159:quantum/quantum.c ****           print("\nDEBUG: enabled.\n");
 644               		.loc 1 159 10 is_stmt 0 view .LVU138
 645 013c D701      		movw r26,r14
 646 013e 1296      		adiw r26,2
 647 0140 8C91      		ld r24,X
 648 0142 8823      		tst r24
 649 0144 01F0      		breq .L33
 160:quantum/quantum.c ****           debug_enable = true;
 650               		.loc 1 160 39 is_stmt 1 view .LVU139
 161:quantum/quantum.c ****       }
 651               		.loc 1 161 11 view .LVU140
 161:quantum/quantum.c ****       }
 652               		.loc 1 161 24 is_stmt 0 view .LVU141
 653 0146 8091 0000 		lds r24,debug_config
 654 014a 8160      		ori r24,lo8(1<<0)
 655 014c 8093 0000 		sts debug_config,r24
 656 0150 00C0      		rjmp .L33
 657               	.L40:
 164:quantum/quantum.c **** 	#ifdef RGBLIGHT_ENABLE
 658               		.loc 1 164 7 is_stmt 1 view .LVU142
 167:quantum/quantum.c **** 			rgblight_toggle();
 659               		.loc 1 167 3 view .LVU143
 167:quantum/quantum.c **** 			rgblight_toggle();
 660               		.loc 1 167 6 is_stmt 0 view .LVU144
 661 0152 8823      		tst r24
 662 0154 01F0      		breq .L33
 168:quantum/quantum.c ****       }
 663               		.loc 1 168 4 is_stmt 1 view .LVU145
 664 0156 0E94 0000 		call rgblight_toggle
 665               	.LVL61:
 666 015a 00C0      		rjmp .L33
 667               	.L50:
 171:quantum/quantum.c **** 	case RGB_MOD:
 668               		.loc 1 171 7 view .LVU146
 173:quantum/quantum.c **** 			rgblight_step();
 669               		.loc 1 173 3 view .LVU147
 173:quantum/quantum.c **** 			rgblight_step();
 670               		.loc 1 173 6 is_stmt 0 view .LVU148
 671 015c 8823      		tst r24
 672 015e 01F0      		breq .L33
 174:quantum/quantum.c ****       }
 673               		.loc 1 174 4 is_stmt 1 view .LVU149
 674 0160 0E94 0000 		call rgblight_step
 675               	.LVL62:
 676 0164 00C0      		rjmp .L33
 677               	.L49:
 177:quantum/quantum.c **** 	case RGB_HUI:
 678               		.loc 1 177 7 view .LVU150
 179:quantum/quantum.c **** 			rgblight_increase_hue();
 679               		.loc 1 179 3 view .LVU151
 179:quantum/quantum.c **** 			rgblight_increase_hue();
 680               		.loc 1 179 6 is_stmt 0 view .LVU152
 681 0166 8823      		tst r24
 682 0168 01F0      		breq .L33
 180:quantum/quantum.c ****       }
 683               		.loc 1 180 4 is_stmt 1 view .LVU153
 684 016a 0E94 0000 		call rgblight_increase_hue
 685               	.LVL63:
 686 016e 00C0      		rjmp .L33
 687               	.L48:
 183:quantum/quantum.c **** 	case RGB_HUD:
 688               		.loc 1 183 7 view .LVU154
 185:quantum/quantum.c **** 			rgblight_decrease_hue();
 689               		.loc 1 185 3 view .LVU155
 185:quantum/quantum.c **** 			rgblight_decrease_hue();
 690               		.loc 1 185 6 is_stmt 0 view .LVU156
 691 0170 8823      		tst r24
 692 0172 01F0      		breq .L33
 186:quantum/quantum.c ****       }
 693               		.loc 1 186 4 is_stmt 1 view .LVU157
 694 0174 0E94 0000 		call rgblight_decrease_hue
 695               	.LVL64:
 696 0178 00C0      		rjmp .L33
 697               	.L47:
 189:quantum/quantum.c **** 	case RGB_SAI:
 698               		.loc 1 189 7 view .LVU158
 191:quantum/quantum.c **** 			rgblight_increase_sat();
 699               		.loc 1 191 3 view .LVU159
 191:quantum/quantum.c **** 			rgblight_increase_sat();
 700               		.loc 1 191 6 is_stmt 0 view .LVU160
 701 017a 8823      		tst r24
 702 017c 01F0      		breq .L33
 192:quantum/quantum.c ****       }
 703               		.loc 1 192 4 is_stmt 1 view .LVU161
 704 017e 0E94 0000 		call rgblight_increase_sat
 705               	.LVL65:
 706 0182 00C0      		rjmp .L33
 707               	.L46:
 195:quantum/quantum.c **** 	case RGB_SAD:
 708               		.loc 1 195 7 view .LVU162
 197:quantum/quantum.c **** 			rgblight_decrease_sat();
 709               		.loc 1 197 3 view .LVU163
 197:quantum/quantum.c **** 			rgblight_decrease_sat();
 710               		.loc 1 197 6 is_stmt 0 view .LVU164
 711 0184 8823      		tst r24
 712 0186 01F0      		breq .L33
 198:quantum/quantum.c ****       }
 713               		.loc 1 198 4 is_stmt 1 view .LVU165
 714 0188 0E94 0000 		call rgblight_decrease_sat
 715               	.LVL66:
 716 018c 00C0      		rjmp .L33
 717               	.L45:
 201:quantum/quantum.c **** 	case RGB_VAI:
 718               		.loc 1 201 7 view .LVU166
 203:quantum/quantum.c **** 			rgblight_increase_val();
 719               		.loc 1 203 3 view .LVU167
 203:quantum/quantum.c **** 			rgblight_increase_val();
 720               		.loc 1 203 6 is_stmt 0 view .LVU168
 721 018e 8823      		tst r24
 722 0190 01F0      		breq .L33
 204:quantum/quantum.c ****       }
 723               		.loc 1 204 4 is_stmt 1 view .LVU169
 724 0192 0E94 0000 		call rgblight_increase_val
 725               	.LVL67:
 726 0196 00C0      		rjmp .L33
 727               	.L44:
 207:quantum/quantum.c **** 	case RGB_VAD:
 728               		.loc 1 207 7 view .LVU170
 209:quantum/quantum.c **** 			rgblight_decrease_val();
 729               		.loc 1 209 3 view .LVU171
 209:quantum/quantum.c **** 			rgblight_decrease_val();
 730               		.loc 1 209 6 is_stmt 0 view .LVU172
 731 0198 8823      		tst r24
 732 019a 01F0      		breq .L33
 210:quantum/quantum.c ****       }
 733               		.loc 1 210 4 is_stmt 1 view .LVU173
 734 019c 0E94 0000 		call rgblight_decrease_val
 735               	.LVL68:
 736 01a0 00C0      		rjmp .L33
 737               	.L73:
 229:quantum/quantum.c ****             break;
 738               		.loc 1 229 13 view .LVU174
 229:quantum/quantum.c ****             break;
 739               		.loc 1 229 47 is_stmt 0 view .LVU175
 740 01a2 8091 0000 		lds r24,keymap_config
 741 01a6 8260      		ori r24,lo8(1<<1)
 742               	.L124:
 282:quantum/quantum.c ****             break;
 743               		.loc 1 282 32 view .LVU176
 744 01a8 8093 0000 		sts keymap_config,r24
 283:quantum/quantum.c ****           default:
 745               		.loc 1 283 13 is_stmt 1 view .LVU177
 287:quantum/quantum.c ****         clear_keyboard(); // clear to prevent stuck keys
 746               		.loc 1 287 9 view .LVU178
 747 01ac 8091 0000 		lds r24,keymap_config
 748 01b0 0E94 0000 		call eeconfig_update_keymap
 749               	.LVL69:
 288:quantum/quantum.c **** 
 750               		.loc 1 288 9 view .LVU179
 751 01b4 0E94 0000 		call clear_keyboard
 752               	.LVL70:
 290:quantum/quantum.c ****       }
 753               		.loc 1 290 9 view .LVU180
 290:quantum/quantum.c ****       }
 754               		.loc 1 290 16 is_stmt 0 view .LVU181
 755 01b8 00C0      		rjmp .L33
 756               	.L72:
 232:quantum/quantum.c ****             break;
 757               		.loc 1 232 13 is_stmt 1 view .LVU182
 232:quantum/quantum.c ****             break;
 758               		.loc 1 232 42 is_stmt 0 view .LVU183
 759 01ba 8091 0000 		lds r24,keymap_config
 760 01be 8460      		ori r24,lo8(1<<2)
 761 01c0 00C0      		rjmp .L124
 762               	.L71:
 235:quantum/quantum.c ****             break;
 763               		.loc 1 235 13 is_stmt 1 view .LVU184
 235:quantum/quantum.c ****             break;
 764               		.loc 1 235 42 is_stmt 0 view .LVU185
 765 01c2 8091 0000 		lds r24,keymap_config
 766 01c6 8860      		ori r24,lo8(1<<3)
 767 01c8 00C0      		rjmp .L124
 768               	.L70:
 238:quantum/quantum.c ****             break;
 769               		.loc 1 238 13 is_stmt 1 view .LVU186
 238:quantum/quantum.c ****             break;
 770               		.loc 1 238 34 is_stmt 0 view .LVU187
 771 01ca 8091 0000 		lds r24,keymap_config
 772 01ce 8061      		ori r24,lo8(1<<4)
 773 01d0 00C0      		rjmp .L124
 774               	.L69:
 241:quantum/quantum.c ****             break;
 775               		.loc 1 241 13 is_stmt 1 view .LVU188
 241:quantum/quantum.c ****             break;
 776               		.loc 1 241 42 is_stmt 0 view .LVU189
 777 01d2 8091 0000 		lds r24,keymap_config
 778 01d6 8062      		ori r24,lo8(1<<5)
 779 01d8 00C0      		rjmp .L124
 780               	.L68:
 244:quantum/quantum.c ****             break;
 781               		.loc 1 244 13 is_stmt 1 view .LVU190
 244:quantum/quantum.c ****             break;
 782               		.loc 1 244 52 is_stmt 0 view .LVU191
 783 01da 8091 0000 		lds r24,keymap_config
 784 01de 8064      		ori r24,lo8(1<<6)
 785 01e0 00C0      		rjmp .L124
 786               	.L67:
 247:quantum/quantum.c ****             break;
 787               		.loc 1 247 13 is_stmt 1 view .LVU192
 247:quantum/quantum.c ****             break;
 788               		.loc 1 247 32 is_stmt 0 view .LVU193
 789 01e2 8091 0000 		lds r24,keymap_config
 790 01e6 8068      		ori r24,lo8(1<<7)
 791 01e8 00C0      		rjmp .L124
 792               	.L66:
 250:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 793               		.loc 1 250 13 is_stmt 1 view .LVU194
 251:quantum/quantum.c ****             break;
 794               		.loc 1 251 13 view .LVU195
 250:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 795               		.loc 1 250 42 is_stmt 0 view .LVU196
 796 01ea 8091 0000 		lds r24,keymap_config
 797 01ee 8C60      		ori r24,lo8(12)
 798 01f0 00C0      		rjmp .L124
 799               	.L65:
 254:quantum/quantum.c ****             break;
 800               		.loc 1 254 13 is_stmt 1 view .LVU197
 254:quantum/quantum.c ****             break;
 801               		.loc 1 254 49 is_stmt 0 view .LVU198
 802 01f2 8091 0000 		lds r24,keymap_config
 803 01f6 8E7F      		andi r24,lo8(~(1<<0))
 804 01f8 00C0      		rjmp .L124
 805               	.L64:
 257:quantum/quantum.c ****             break;
 806               		.loc 1 257 13 is_stmt 1 view .LVU199
 257:quantum/quantum.c ****             break;
 807               		.loc 1 257 47 is_stmt 0 view .LVU200
 808 01fa 8091 0000 		lds r24,keymap_config
 809 01fe 8D7F      		andi r24,lo8(~(1<<1))
 810 0200 00C0      		rjmp .L124
 811               	.L63:
 260:quantum/quantum.c ****             break;
 812               		.loc 1 260 13 is_stmt 1 view .LVU201
 260:quantum/quantum.c ****             break;
 813               		.loc 1 260 42 is_stmt 0 view .LVU202
 814 0202 8091 0000 		lds r24,keymap_config
 815 0206 8B7F      		andi r24,lo8(~(1<<2))
 816 0208 00C0      		rjmp .L124
 817               	.L62:
 263:quantum/quantum.c ****             break;
 818               		.loc 1 263 13 is_stmt 1 view .LVU203
 263:quantum/quantum.c ****             break;
 819               		.loc 1 263 42 is_stmt 0 view .LVU204
 820 020a 8091 0000 		lds r24,keymap_config
 821 020e 877F      		andi r24,lo8(~(1<<3))
 822 0210 00C0      		rjmp .L124
 823               	.L61:
 266:quantum/quantum.c ****             break;
 824               		.loc 1 266 13 is_stmt 1 view .LVU205
 266:quantum/quantum.c ****             break;
 825               		.loc 1 266 34 is_stmt 0 view .LVU206
 826 0212 8091 0000 		lds r24,keymap_config
 827 0216 8F7E      		andi r24,lo8(~(1<<4))
 828 0218 00C0      		rjmp .L124
 829               	.L60:
 269:quantum/quantum.c ****             break;
 830               		.loc 1 269 13 is_stmt 1 view .LVU207
 269:quantum/quantum.c ****             break;
 831               		.loc 1 269 42 is_stmt 0 view .LVU208
 832 021a 8091 0000 		lds r24,keymap_config
 833 021e 8F7D      		andi r24,lo8(~(1<<5))
 834 0220 00C0      		rjmp .L124
 835               	.L59:
 272:quantum/quantum.c ****             break;
 836               		.loc 1 272 13 is_stmt 1 view .LVU209
 272:quantum/quantum.c ****             break;
 837               		.loc 1 272 52 is_stmt 0 view .LVU210
 838 0222 8091 0000 		lds r24,keymap_config
 839 0226 8F7B      		andi r24,lo8(~(1<<6))
 840 0228 00C0      		rjmp .L124
 841               	.L58:
 275:quantum/quantum.c ****             break;
 842               		.loc 1 275 13 is_stmt 1 view .LVU211
 275:quantum/quantum.c ****             break;
 843               		.loc 1 275 32 is_stmt 0 view .LVU212
 844 022a 8091 0000 		lds r24,keymap_config
 845 022e 8F77      		andi r24,lo8(~(1<<7))
 846 0230 00C0      		rjmp .L124
 847               	.L57:
 278:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 848               		.loc 1 278 13 is_stmt 1 view .LVU213
 279:quantum/quantum.c ****             break;
 849               		.loc 1 279 13 view .LVU214
 278:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 850               		.loc 1 278 42 is_stmt 0 view .LVU215
 851 0232 8091 0000 		lds r24,keymap_config
 852 0236 837F      		andi r24,lo8(-13)
 853 0238 00C0      		rjmp .L124
 854               	.L55:
 282:quantum/quantum.c ****             break;
 855               		.loc 1 282 13 is_stmt 1 view .LVU216
 282:quantum/quantum.c ****             break;
 856               		.loc 1 282 48 is_stmt 0 view .LVU217
 857 023a 9091 0000 		lds r25,keymap_config
 282:quantum/quantum.c ****             break;
 858               		.loc 1 282 32 view .LVU218
 859 023e 892F      		mov r24,r25
 860 0240 97FB      		bst r25,7
 861 0242 87F9      		bld r24,7
 862 0244 8058      		subi r24,0x80
 863 0246 00C0      		rjmp .L124
 864               	.L43:
 294:quantum/quantum.c ****         shift_interrupted[0] = false;
 865               		.loc 1 294 7 is_stmt 1 view .LVU219
 294:quantum/quantum.c ****         shift_interrupted[0] = false;
 866               		.loc 1 294 10 is_stmt 0 view .LVU220
 867 0248 8823      		tst r24
 868 024a 01F0      		breq .L75
 295:quantum/quantum.c ****         scs_timer = timer_read ();
 869               		.loc 1 295 9 is_stmt 1 view .LVU221
 295:quantum/quantum.c ****         scs_timer = timer_read ();
 870               		.loc 1 295 30 is_stmt 0 view .LVU222
 871 024c 1092 0000 		sts shift_interrupted,__zero_reg__
 296:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 872               		.loc 1 296 9 is_stmt 1 view .LVU223
 296:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 873               		.loc 1 296 21 is_stmt 0 view .LVU224
 874 0250 0E94 0000 		call timer_read
 875               	.LVL71:
 296:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 876               		.loc 1 296 19 view .LVU225
 877 0254 9093 0000 		sts scs_timer+1,r25
 878 0258 8093 0000 		sts scs_timer,r24
 297:quantum/quantum.c ****       }
 879               		.loc 1 297 9 is_stmt 1 view .LVU226
 880 025c 82E0      		ldi r24,lo8(2)
 881               	.L125:
 320:quantum/quantum.c ****       }
 882               		.loc 1 320 9 is_stmt 0 view .LVU227
 883 025e 0E94 0000 		call register_mods
 884               	.LVL72:
 885 0262 00C0      		rjmp .L33
 886               	.L75:
 306:quantum/quantum.c ****           register_code(LSPO_KEY);
 887               		.loc 1 306 9 is_stmt 1 view .LVU228
 306:quantum/quantum.c ****           register_code(LSPO_KEY);
 888               		.loc 1 306 12 is_stmt 0 view .LVU229
 889 0264 8091 0000 		lds r24,shift_interrupted
 890 0268 8111      		cpse r24,__zero_reg__
 891 026a 00C0      		rjmp .L77
 306:quantum/quantum.c ****           register_code(LSPO_KEY);
 892               		.loc 1 306 38 discriminator 1 view .LVU230
 893 026c 8091 0000 		lds r24,scs_timer
 894 0270 9091 0000 		lds r25,scs_timer+1
 895 0274 0E94 0000 		call timer_elapsed
 896               	.LVL73:
 306:quantum/quantum.c ****           register_code(LSPO_KEY);
 897               		.loc 1 306 35 discriminator 1 view .LVU231
 898 0278 883C      		cpi r24,-56
 899 027a 9105      		cpc r25,__zero_reg__
 900 027c 00F4      		brsh .L77
 307:quantum/quantum.c ****           unregister_code(LSPO_KEY);
 901               		.loc 1 307 11 is_stmt 1 view .LVU232
 902 027e 86E2      		ldi r24,lo8(38)
 903 0280 0E94 0000 		call register_code
 904               	.LVL74:
 308:quantum/quantum.c ****         }
 905               		.loc 1 308 11 view .LVU233
 906 0284 86E2      		ldi r24,lo8(38)
 907 0286 0E94 0000 		call unregister_code
 908               	.LVL75:
 909               	.L77:
 310:quantum/quantum.c ****       }
 910               		.loc 1 310 9 view .LVU234
 911 028a 82E0      		ldi r24,lo8(2)
 912               	.L126:
 333:quantum/quantum.c ****       }
 913               		.loc 1 333 9 is_stmt 0 view .LVU235
 914 028c 0E94 0000 		call unregister_mods
 915               	.LVL76:
 916 0290 00C0      		rjmp .L33
 917               	.L41:
 317:quantum/quantum.c ****         shift_interrupted[1] = false;
 918               		.loc 1 317 7 is_stmt 1 view .LVU236
 317:quantum/quantum.c ****         shift_interrupted[1] = false;
 919               		.loc 1 317 10 is_stmt 0 view .LVU237
 920 0292 8823      		tst r24
 921 0294 01F0      		breq .L79
 318:quantum/quantum.c ****         scs_timer = timer_read ();
 922               		.loc 1 318 9 is_stmt 1 view .LVU238
 318:quantum/quantum.c ****         scs_timer = timer_read ();
 923               		.loc 1 318 30 is_stmt 0 view .LVU239
 924 0296 1092 0000 		sts shift_interrupted+1,__zero_reg__
 319:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 925               		.loc 1 319 9 is_stmt 1 view .LVU240
 319:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 926               		.loc 1 319 21 is_stmt 0 view .LVU241
 927 029a 0E94 0000 		call timer_read
 928               	.LVL77:
 319:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 929               		.loc 1 319 19 view .LVU242
 930 029e 9093 0000 		sts scs_timer+1,r25
 931 02a2 8093 0000 		sts scs_timer,r24
 320:quantum/quantum.c ****       }
 932               		.loc 1 320 9 is_stmt 1 view .LVU243
 933 02a6 80E2      		ldi r24,lo8(32)
 934 02a8 00C0      		rjmp .L125
 935               	.L79:
 329:quantum/quantum.c ****           register_code(RSPC_KEY);
 936               		.loc 1 329 9 view .LVU244
 329:quantum/quantum.c ****           register_code(RSPC_KEY);
 937               		.loc 1 329 12 is_stmt 0 view .LVU245
 938 02aa 8091 0000 		lds r24,shift_interrupted+1
 939 02ae 8111      		cpse r24,__zero_reg__
 940 02b0 00C0      		rjmp .L81
 329:quantum/quantum.c ****           register_code(RSPC_KEY);
 941               		.loc 1 329 38 discriminator 1 view .LVU246
 942 02b2 8091 0000 		lds r24,scs_timer
 943 02b6 9091 0000 		lds r25,scs_timer+1
 944 02ba 0E94 0000 		call timer_elapsed
 945               	.LVL78:
 329:quantum/quantum.c ****           register_code(RSPC_KEY);
 946               		.loc 1 329 35 discriminator 1 view .LVU247
 947 02be 883C      		cpi r24,-56
 948 02c0 9105      		cpc r25,__zero_reg__
 949 02c2 00F4      		brsh .L81
 330:quantum/quantum.c ****           unregister_code(RSPC_KEY);
 950               		.loc 1 330 11 is_stmt 1 view .LVU248
 951 02c4 87E2      		ldi r24,lo8(39)
 952 02c6 0E94 0000 		call register_code
 953               	.LVL79:
 331:quantum/quantum.c ****         }
 954               		.loc 1 331 11 view .LVU249
 955 02ca 87E2      		ldi r24,lo8(39)
 956 02cc 0E94 0000 		call unregister_code
 957               	.LVL80:
 958               	.L81:
 333:quantum/quantum.c ****       }
 959               		.loc 1 333 9 view .LVU250
 960 02d0 80E2      		ldi r24,lo8(32)
 961 02d2 00C0      		rjmp .L126
 962               		.cfi_endproc
 963               	.LFE114:
 965               		.section	.text.send_string,"ax",@progbits
 966               	.global	send_string
 968               	send_string:
 969               	.LVL81:
 970               	.LFB115:
 347:quantum/quantum.c **** 
 348:quantum/quantum.c **** const bool ascii_to_qwerty_shift_lut[0x80] PROGMEM = {
 349:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 350:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 351:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 352:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 353:quantum/quantum.c ****     0, 1, 1, 1, 1, 1, 1, 0,
 354:quantum/quantum.c ****     1, 1, 1, 1, 0, 0, 0, 0,
 355:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 356:quantum/quantum.c ****     0, 0, 1, 0, 1, 0, 1, 1,
 357:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 358:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 359:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 360:quantum/quantum.c ****     1, 1, 1, 0, 0, 0, 1, 1,
 361:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 362:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 363:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 364:quantum/quantum.c ****     0, 0, 0, 1, 1, 1, 1, 0
 365:quantum/quantum.c **** };
 366:quantum/quantum.c **** 
 367:quantum/quantum.c **** const uint8_t ascii_to_qwerty_keycode_lut[0x80] PROGMEM = {
 368:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 369:quantum/quantum.c ****     KC_BSPC, KC_TAB, KC_ENT, 0, 0, 0, 0, 0,
 370:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 371:quantum/quantum.c ****     0, 0, 0, KC_ESC, 0, 0, 0, 0,
 372:quantum/quantum.c ****     KC_SPC, KC_1, KC_QUOT, KC_3, KC_4, KC_5, KC_7, KC_QUOT,
 373:quantum/quantum.c ****     KC_9, KC_0, KC_8, KC_EQL, KC_COMM, KC_MINS, KC_DOT, KC_SLSH,
 374:quantum/quantum.c ****     KC_0, KC_1, KC_2, KC_3, KC_4, KC_5, KC_6, KC_7,
 375:quantum/quantum.c ****     KC_8, KC_9, KC_SCLN, KC_SCLN, KC_COMM, KC_EQL, KC_DOT, KC_SLSH,
 376:quantum/quantum.c ****     KC_2, KC_A, KC_B, KC_C, KC_D, KC_E, KC_F, KC_G,
 377:quantum/quantum.c ****     KC_H, KC_I, KC_J, KC_K, KC_L, KC_M, KC_N, KC_O,
 378:quantum/quantum.c ****     KC_P, KC_Q, KC_R, KC_S, KC_T, KC_U, KC_V, KC_W,
 379:quantum/quantum.c ****     KC_X, KC_Y, KC_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_6, KC_MINS,
 380:quantum/quantum.c ****     KC_GRV, KC_A, KC_B, KC_C, KC_D, KC_E, KC_F, KC_G,
 381:quantum/quantum.c ****     KC_H, KC_I, KC_J, KC_K, KC_L, KC_M, KC_N, KC_O,
 382:quantum/quantum.c ****     KC_P, KC_Q, KC_R, KC_S, KC_T, KC_U, KC_V, KC_W,
 383:quantum/quantum.c ****     KC_X, KC_Y, KC_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_GRV, KC_DEL
 384:quantum/quantum.c **** };
 385:quantum/quantum.c **** 
 386:quantum/quantum.c **** /* for users whose OSes are set to Colemak */
 387:quantum/quantum.c **** #if 0
 388:quantum/quantum.c **** #include "keymap_colemak.h"
 389:quantum/quantum.c **** 
 390:quantum/quantum.c **** const bool ascii_to_colemak_shift_lut[0x80] PROGMEM = {
 391:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 392:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 393:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 394:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 395:quantum/quantum.c ****     0, 1, 1, 1, 1, 1, 1, 0,
 396:quantum/quantum.c ****     1, 1, 1, 1, 0, 0, 0, 0,
 397:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 398:quantum/quantum.c ****     0, 0, 1, 0, 1, 0, 1, 1,
 399:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 400:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 401:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 402:quantum/quantum.c ****     1, 1, 1, 0, 0, 0, 1, 1,
 403:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 404:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 405:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 406:quantum/quantum.c ****     0, 0, 0, 1, 1, 1, 1, 0
 407:quantum/quantum.c **** };
 408:quantum/quantum.c **** 
 409:quantum/quantum.c **** const uint8_t ascii_to_colemak_keycode_lut[0x80] PROGMEM = {
 410:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 411:quantum/quantum.c ****     KC_BSPC, KC_TAB, KC_ENT, 0, 0, 0, 0, 0,
 412:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 413:quantum/quantum.c ****     0, 0, 0, KC_ESC, 0, 0, 0, 0,
 414:quantum/quantum.c ****     KC_SPC, KC_1, KC_QUOT, KC_3, KC_4, KC_5, KC_7, KC_QUOT,
 415:quantum/quantum.c ****     KC_9, KC_0, KC_8, KC_EQL, KC_COMM, KC_MINS, KC_DOT, KC_SLSH,
 416:quantum/quantum.c ****     KC_0, KC_1, KC_2, KC_3, KC_4, KC_5, KC_6, KC_7,
 417:quantum/quantum.c ****     KC_8, KC_9, CM_SCLN, CM_SCLN, KC_COMM, KC_EQL, KC_DOT, KC_SLSH,
 418:quantum/quantum.c ****     KC_2, CM_A, CM_B, CM_C, CM_D, CM_E, CM_F, CM_G,
 419:quantum/quantum.c ****     CM_H, CM_I, CM_J, CM_K, CM_L, CM_M, CM_N, CM_O,
 420:quantum/quantum.c ****     CM_P, CM_Q, CM_R, CM_S, CM_T, CM_U, CM_V, CM_W,
 421:quantum/quantum.c ****     CM_X, CM_Y, CM_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_6, KC_MINS,
 422:quantum/quantum.c ****     KC_GRV, CM_A, CM_B, CM_C, CM_D, CM_E, CM_F, CM_G,
 423:quantum/quantum.c ****     CM_H, CM_I, CM_J, CM_K, CM_L, CM_M, CM_N, CM_O,
 424:quantum/quantum.c ****     CM_P, CM_Q, CM_R, CM_S, CM_T, CM_U, CM_V, CM_W,
 425:quantum/quantum.c ****     CM_X, CM_Y, CM_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_GRV, KC_DEL
 426:quantum/quantum.c **** };
 427:quantum/quantum.c **** 
 428:quantum/quantum.c **** #endif
 429:quantum/quantum.c **** 
 430:quantum/quantum.c **** void send_string(const char *str) {
 971               		.loc 1 430 35 view -0
 972               		.cfi_startproc
 973               		.loc 1 430 35 is_stmt 0 view .LVU252
 974 0000 0F93      		push r16
 975               	.LCFI13:
 976               		.cfi_def_cfa_offset 3
 977               		.cfi_offset 16, -2
 978 0002 1F93      		push r17
 979               	.LCFI14:
 980               		.cfi_def_cfa_offset 4
 981               		.cfi_offset 17, -3
 982 0004 CF93      		push r28
 983               	.LCFI15:
 984               		.cfi_def_cfa_offset 5
 985               		.cfi_offset 28, -4
 986               	/* prologue: function */
 987               	/* frame size = 0 */
 988               	/* stack size = 3 */
 989               	.L__stack_usage = 3
 990 0006 8C01      		movw r16,r24
 991               	.LVL82:
 992               	.L131:
 431:quantum/quantum.c ****     while (1) {
 993               		.loc 1 431 5 is_stmt 1 view .LVU253
 994               	.LBB8:
 432:quantum/quantum.c ****         uint8_t keycode;
 995               		.loc 1 432 9 view .LVU254
 433:quantum/quantum.c ****         uint8_t ascii_code = pgm_read_byte(str);
 996               		.loc 1 433 9 view .LVU255
 997               	.LBB9:
 998               		.loc 1 433 30 view .LVU256
 999               		.loc 1 433 30 view .LVU257
 1000               		.loc 1 433 30 view .LVU258
 1001 0008 F801      		movw r30,r16
 1002               	/* #APP */
 1003               	 ;  433 "quantum/quantum.c" 1
 1004 000a 2491      		lpm r18, Z
 1005               		
 1006               	 ;  0 "" 2
 1007               	.LVL83:
 1008               		.loc 1 433 30 view .LVU259
 1009               		.loc 1 433 30 is_stmt 0 view .LVU260
 1010               	/* #NOAPP */
 1011               	.LBE9:
 434:quantum/quantum.c ****         if (!ascii_code) break;
 1012               		.loc 1 434 9 is_stmt 1 view .LVU261
 1013               		.loc 1 434 12 is_stmt 0 view .LVU262
 1014 000c 2223      		tst r18
 1015 000e 01F0      		breq .L127
 435:quantum/quantum.c ****         keycode = pgm_read_byte(&ascii_to_qwerty_keycode_lut[ascii_code]);
 1016               		.loc 1 435 9 is_stmt 1 view .LVU263
 1017               	.LBB10:
 1018               		.loc 1 435 19 view .LVU264
 1019 0010 30E0      		ldi r19,0
 1020               	.LVL84:
 1021               		.loc 1 435 19 view .LVU265
 1022               		.loc 1 435 19 view .LVU266
 1023 0012 F901      		movw r30,r18
 1024 0014 E050      		subi r30,lo8(-(ascii_to_qwerty_keycode_lut))
 1025 0016 F040      		sbci r31,hi8(-(ascii_to_qwerty_keycode_lut))
 1026               	.LVL85:
 1027               		.loc 1 435 19 is_stmt 0 view .LVU267
 1028               	/* #APP */
 1029               	 ;  435 "quantum/quantum.c" 1
 1030 0018 C491      		lpm r28, Z
 1031               		
 1032               	 ;  0 "" 2
 1033               	.LVL86:
 1034               		.loc 1 435 19 is_stmt 1 view .LVU268
 1035               		.loc 1 435 19 is_stmt 0 view .LVU269
 1036               	/* #NOAPP */
 1037               	.LBE10:
 436:quantum/quantum.c ****         if (pgm_read_byte(&ascii_to_qwerty_shift_lut[ascii_code])) {
 1038               		.loc 1 436 9 is_stmt 1 view .LVU270
 1039               	.LBB11:
 1040               		.loc 1 436 13 view .LVU271
 1041               		.loc 1 436 13 view .LVU272
 1042               		.loc 1 436 13 view .LVU273
 1043 001a 2050      		subi r18,lo8(-(ascii_to_qwerty_shift_lut))
 1044 001c 3040      		sbci r19,hi8(-(ascii_to_qwerty_shift_lut))
 1045               	.LVL87:
 1046               		.loc 1 436 13 is_stmt 0 view .LVU274
 1047 001e F901      		movw r30,r18
 1048               	.LVL88:
 1049               		.loc 1 436 13 view .LVU275
 1050               	/* #APP */
 1051               	 ;  436 "quantum/quantum.c" 1
 1052 0020 2491      		lpm r18, Z
 1053               		
 1054               	 ;  0 "" 2
 1055               	.LVL89:
 1056               		.loc 1 436 13 is_stmt 1 view .LVU276
 1057               	/* #NOAPP */
 1058               	.LBE11:
 1059               		.loc 1 436 12 is_stmt 0 view .LVU277
 1060 0022 2223      		tst r18
 1061 0024 01F0      		breq .L129
 437:quantum/quantum.c ****             register_code(KC_LSFT);
 1062               		.loc 1 437 13 is_stmt 1 view .LVU278
 1063 0026 81EE      		ldi r24,lo8(-31)
 1064 0028 0E94 0000 		call register_code
 1065               	.LVL90:
 438:quantum/quantum.c ****             register_code(keycode);
 1066               		.loc 1 438 13 view .LVU279
 1067 002c 8C2F      		mov r24,r28
 1068 002e 0E94 0000 		call register_code
 1069               	.LVL91:
 439:quantum/quantum.c ****             unregister_code(keycode);
 1070               		.loc 1 439 13 view .LVU280
 1071 0032 8C2F      		mov r24,r28
 1072 0034 0E94 0000 		call unregister_code
 1073               	.LVL92:
 440:quantum/quantum.c ****             unregister_code(KC_LSFT);
 1074               		.loc 1 440 13 view .LVU281
 1075 0038 81EE      		ldi r24,lo8(-31)
 1076               	.L132:
 441:quantum/quantum.c ****         }
 442:quantum/quantum.c ****         else {
 443:quantum/quantum.c ****             register_code(keycode);
 444:quantum/quantum.c ****             unregister_code(keycode);
 1077               		.loc 1 444 13 is_stmt 0 view .LVU282
 1078 003a 0E94 0000 		call unregister_code
 1079               	.LVL93:
 445:quantum/quantum.c ****         }
 446:quantum/quantum.c ****         ++str;
 1080               		.loc 1 446 9 is_stmt 1 view .LVU283
 1081 003e 0F5F      		subi r16,-1
 1082 0040 1F4F      		sbci r17,-1
 1083               	.LVL94:
 1084               		.loc 1 446 9 is_stmt 0 view .LVU284
 1085               	.LBE8:
 431:quantum/quantum.c ****         uint8_t keycode;
 1086               		.loc 1 431 11 is_stmt 1 view .LVU285
 431:quantum/quantum.c ****         uint8_t keycode;
 1087               		.loc 1 431 15 is_stmt 0 view .LVU286
 1088 0042 00C0      		rjmp .L131
 1089               	.LVL95:
 1090               	.L129:
 1091               	.LBB12:
 443:quantum/quantum.c ****             unregister_code(keycode);
 1092               		.loc 1 443 13 is_stmt 1 view .LVU287
 1093 0044 8C2F      		mov r24,r28
 1094 0046 0E94 0000 		call register_code
 1095               	.LVL96:
 444:quantum/quantum.c ****         }
 1096               		.loc 1 444 13 view .LVU288
 1097 004a 8C2F      		mov r24,r28
 1098 004c 00C0      		rjmp .L132
 1099               	.LVL97:
 1100               	.L127:
 1101               	/* epilogue start */
 444:quantum/quantum.c ****         }
 1102               		.loc 1 444 13 is_stmt 0 view .LVU289
 1103               	.LBE12:
 447:quantum/quantum.c ****     }
 448:quantum/quantum.c **** }
 1104               		.loc 1 448 1 view .LVU290
 1105 004e CF91      		pop r28
 1106 0050 1F91      		pop r17
 1107 0052 0F91      		pop r16
 1108               	.LVL98:
 1109               		.loc 1 448 1 view .LVU291
 1110 0054 0895      		ret
 1111               		.cfi_endproc
 1112               	.LFE115:
 1114               		.section	.text.update_tri_layer,"ax",@progbits
 1115               	.global	update_tri_layer
 1117               	update_tri_layer:
 1118               	.LVL99:
 1119               	.LFB116:
 449:quantum/quantum.c **** 
 450:quantum/quantum.c **** void update_tri_layer(uint8_t layer1, uint8_t layer2, uint8_t layer3) {
 1120               		.loc 1 450 71 is_stmt 1 view -0
 1121               		.cfi_startproc
 1122               		.loc 1 450 71 is_stmt 0 view .LVU293
 1123 0000 CF92      		push r12
 1124               	.LCFI16:
 1125               		.cfi_def_cfa_offset 3
 1126               		.cfi_offset 12, -2
 1127 0002 DF92      		push r13
 1128               	.LCFI17:
 1129               		.cfi_def_cfa_offset 4
 1130               		.cfi_offset 13, -3
 1131 0004 EF92      		push r14
 1132               	.LCFI18:
 1133               		.cfi_def_cfa_offset 5
 1134               		.cfi_offset 14, -4
 1135 0006 FF92      		push r15
 1136               	.LCFI19:
 1137               		.cfi_def_cfa_offset 6
 1138               		.cfi_offset 15, -5
 1139 0008 0F93      		push r16
 1140               	.LCFI20:
 1141               		.cfi_def_cfa_offset 7
 1142               		.cfi_offset 16, -6
 1143 000a 1F93      		push r17
 1144               	.LCFI21:
 1145               		.cfi_def_cfa_offset 8
 1146               		.cfi_offset 17, -7
 1147               	/* prologue: function */
 1148               	/* frame size = 0 */
 1149               	/* stack size = 6 */
 1150               	.L__stack_usage = 6
 1151 000c 982F      		mov r25,r24
 1152 000e 842F      		mov r24,r20
 1153               	.LVL100:
 451:quantum/quantum.c ****   if (IS_LAYER_ON(layer1) && IS_LAYER_ON(layer2)) {
 1154               		.loc 1 451 3 is_stmt 1 view .LVU294
 1155 0010 01E0      		ldi r16,lo8(1)
 1156 0012 10E0      		ldi r17,0
 1157 0014 20E0      		ldi r18,0
 1158 0016 30E0      		ldi r19,0
 1159 0018 6801      		movw r12,r16
 1160 001a 7901      		movw r14,r18
 1161 001c 00C0      		rjmp 2f
 1162               		1:
 1163 001e CC0C      		lsl r12
 1164 0020 DD1C      		rol r13
 1165 0022 EE1C      		rol r14
 1166 0024 FF1C      		rol r15
 1167               		2:
 1168 0026 6A95      		dec r22
 1169 0028 02F4      		brpl 1b
 1170 002a B701      		movw r22,r14
 1171               	.LVL101:
 1172               		.loc 1 451 3 is_stmt 0 view .LVU295
 1173 002c A601      		movw r20,r12
 1174               	.LVL102:
 1175               		.loc 1 451 3 view .LVU296
 1176 002e 00C0      		rjmp 2f
 1177               		1:
 1178 0030 000F      		lsl r16
 1179 0032 111F      		rol r17
 1180 0034 221F      		rol r18
 1181 0036 331F      		rol r19
 1182               		2:
 1183 0038 9A95      		dec r25
 1184 003a 02F4      		brpl 1b
 1185 003c 402B      		or r20,r16
 1186 003e 512B      		or r21,r17
 1187 0040 622B      		or r22,r18
 1188 0042 732B      		or r23,r19
 1189               		.loc 1 451 27 view .LVU297
 1190 0044 0091 0000 		lds r16,layer_state
 1191 0048 1091 0000 		lds r17,layer_state+1
 1192 004c 2091 0000 		lds r18,layer_state+2
 1193 0050 3091 0000 		lds r19,layer_state+3
 1194 0054 0423      		and r16,r20
 1195 0056 1523      		and r17,r21
 1196 0058 2623      		and r18,r22
 1197 005a 3723      		and r19,r23
 1198 005c 4017      		cp r20,r16
 1199 005e 5107      		cpc r21,r17
 1200 0060 6207      		cpc r22,r18
 1201 0062 7307      		cpc r23,r19
 1202 0064 01F4      		brne .L134
 452:quantum/quantum.c ****     layer_on(layer3);
 1203               		.loc 1 452 5 is_stmt 1 view .LVU298
 1204               	/* epilogue start */
 453:quantum/quantum.c ****   } else {
 454:quantum/quantum.c ****     layer_off(layer3);
 455:quantum/quantum.c ****   }
 456:quantum/quantum.c **** }
 1205               		.loc 1 456 1 is_stmt 0 view .LVU299
 1206 0066 1F91      		pop r17
 1207 0068 0F91      		pop r16
 1208 006a FF90      		pop r15
 1209 006c EF90      		pop r14
 1210 006e DF90      		pop r13
 1211 0070 CF90      		pop r12
 452:quantum/quantum.c ****     layer_on(layer3);
 1212               		.loc 1 452 5 view .LVU300
 1213 0072 0C94 0000 		jmp layer_on
 1214               	.LVL103:
 1215               	.L134:
 454:quantum/quantum.c ****   }
 1216               		.loc 1 454 5 is_stmt 1 view .LVU301
 1217               	/* epilogue start */
 1218               		.loc 1 456 1 is_stmt 0 view .LVU302
 1219 0076 1F91      		pop r17
 1220 0078 0F91      		pop r16
 1221 007a FF90      		pop r15
 1222 007c EF90      		pop r14
 1223 007e DF90      		pop r13
 1224 0080 CF90      		pop r12
 454:quantum/quantum.c ****   }
 1225               		.loc 1 454 5 view .LVU303
 1226 0082 0C94 0000 		jmp layer_off
 1227               	.LVL104:
 454:quantum/quantum.c ****   }
 1228               		.loc 1 454 5 view .LVU304
 1229               		.cfi_endproc
 1230               	.LFE116:
 1232               		.section	.text.tap_random_base64,"ax",@progbits
 1233               	.global	tap_random_base64
 1235               	tap_random_base64:
 1236               	.LFB117:
 457:quantum/quantum.c **** 
 458:quantum/quantum.c **** void tap_random_base64(void) {
 1237               		.loc 1 458 30 is_stmt 1 view -0
 1238               		.cfi_startproc
 1239 0000 CF93      		push r28
 1240               	.LCFI22:
 1241               		.cfi_def_cfa_offset 3
 1242               		.cfi_offset 28, -2
 1243 0002 DF93      		push r29
 1244               	.LCFI23:
 1245               		.cfi_def_cfa_offset 4
 1246               		.cfi_offset 29, -3
 1247               	/* prologue: function */
 1248               	/* frame size = 0 */
 1249               	/* stack size = 2 */
 1250               	.L__stack_usage = 2
 459:quantum/quantum.c ****   #if defined(__AVR_ATmega32U4__)
 460:quantum/quantum.c ****     uint8_t key = (TCNT0 + TCNT1 + TCNT3 + TCNT4) % 64;
 1251               		.loc 1 460 5 view .LVU306
 1252               		.loc 1 460 20 is_stmt 0 view .LVU307
 1253 0004 46B5      		in r20,0x26
 1254               		.loc 1 460 28 view .LVU308
 1255 0006 2091 8400 		lds r18,132
 1256 000a 3091 8500 		lds r19,132+1
 1257               		.loc 1 460 36 view .LVU309
 1258 000e C091 9400 		lds r28,148
 1259 0012 D091 9500 		lds r29,148+1
 1260               		.loc 1 460 44 view .LVU310
 1261 0016 8091 BE00 		lds r24,190
 1262 001a 9091 BF00 		lds r25,190+1
 1263               		.loc 1 460 34 view .LVU311
 1264 001e C20F      		add r28,r18
 1265 0020 C40F      		add r28,r20
 1266               		.loc 1 460 42 view .LVU312
 1267 0022 C80F      		add r28,r24
 1268               		.loc 1 460 13 view .LVU313
 1269 0024 CF73      		andi r28,lo8(63)
 1270               	.LVL105:
 461:quantum/quantum.c ****   #else
 462:quantum/quantum.c ****     uint8_t key = rand() % 64;
 463:quantum/quantum.c ****   #endif
 464:quantum/quantum.c ****   switch (key) {
 1271               		.loc 1 464 3 is_stmt 1 view .LVU314
 1272 0026 CE33      		cpi r28,lo8(62)
 1273 0028 00F4      		brsh .L136
 1274 002a C533      		cpi r28,lo8(53)
 1275 002c 00F4      		brsh .L137
 1276 002e C433      		cpi r28,lo8(52)
 1277 0030 01F0      		breq .L138
 1278 0032 CA31      		cpi r28,lo8(26)
 1279 0034 00F0      		brlo .L143
 465:quantum/quantum.c ****     case 0 ... 25:
 466:quantum/quantum.c ****       register_code(KC_LSFT);
 467:quantum/quantum.c ****       register_code(key + KC_A);
 468:quantum/quantum.c ****       unregister_code(key + KC_A);
 469:quantum/quantum.c ****       unregister_code(KC_LSFT);
 470:quantum/quantum.c ****       break;
 471:quantum/quantum.c ****     case 26 ... 51:
 472:quantum/quantum.c ****       register_code(key - 26 + KC_A);
 1280               		.loc 1 472 7 view .LVU315
 1281 0036 C651      		subi r28,lo8(-(-22))
 1282               	.LVL106:
 1283               	.L147:
 473:quantum/quantum.c ****       unregister_code(key - 26 + KC_A);
 474:quantum/quantum.c ****       break;
 475:quantum/quantum.c ****     case 52:
 476:quantum/quantum.c ****       register_code(KC_0);
 477:quantum/quantum.c ****       unregister_code(KC_0);
 478:quantum/quantum.c ****       break;
 479:quantum/quantum.c ****     case 53 ... 61:
 480:quantum/quantum.c ****       register_code(key - 53 + KC_1);
 1284               		.loc 1 480 7 is_stmt 0 view .LVU316
 1285 0038 8C2F      		mov r24,r28
 1286 003a 0E94 0000 		call register_code
 1287               	.LVL107:
 481:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 1288               		.loc 1 481 7 is_stmt 1 view .LVU317
 1289 003e 8C2F      		mov r24,r28
 1290 0040 00C0      		rjmp .L145
 1291               	.LVL108:
 1292               	.L136:
 464:quantum/quantum.c ****     case 0 ... 25:
 1293               		.loc 1 464 3 is_stmt 0 view .LVU318
 1294 0042 CE33      		cpi r28,lo8(62)
 1295 0044 01F4      		brne .L144
 482:quantum/quantum.c ****       break;
 483:quantum/quantum.c ****     case 62:
 484:quantum/quantum.c ****       register_code(KC_LSFT);
 1296               		.loc 1 484 7 is_stmt 1 view .LVU319
 1297 0046 81EE      		ldi r24,lo8(-31)
 1298 0048 0E94 0000 		call register_code
 1299               	.LVL109:
 485:quantum/quantum.c ****       register_code(KC_EQL);
 1300               		.loc 1 485 7 view .LVU320
 1301 004c 8EE2      		ldi r24,lo8(46)
 1302 004e 0E94 0000 		call register_code
 1303               	.LVL110:
 486:quantum/quantum.c ****       unregister_code(KC_EQL);
 1304               		.loc 1 486 7 view .LVU321
 1305 0052 8EE2      		ldi r24,lo8(46)
 1306 0054 00C0      		rjmp .L146
 1307               	.L143:
 466:quantum/quantum.c ****       register_code(key + KC_A);
 1308               		.loc 1 466 7 view .LVU322
 1309 0056 81EE      		ldi r24,lo8(-31)
 1310 0058 0E94 0000 		call register_code
 1311               	.LVL111:
 467:quantum/quantum.c ****       unregister_code(key + KC_A);
 1312               		.loc 1 467 7 view .LVU323
 1313 005c CC5F      		subi r28,lo8(-(4))
 1314               	.LVL112:
 467:quantum/quantum.c ****       unregister_code(key + KC_A);
 1315               		.loc 1 467 7 is_stmt 0 view .LVU324
 1316 005e 8C2F      		mov r24,r28
 1317 0060 0E94 0000 		call register_code
 1318               	.LVL113:
 468:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1319               		.loc 1 468 7 is_stmt 1 view .LVU325
 1320 0064 8C2F      		mov r24,r28
 1321               	.LVL114:
 1322               	.L146:
 1323               		.loc 1 486 7 is_stmt 0 view .LVU326
 1324 0066 0E94 0000 		call unregister_code
 1325               	.LVL115:
 487:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1326               		.loc 1 487 7 is_stmt 1 view .LVU327
 1327 006a 81EE      		ldi r24,lo8(-31)
 1328 006c 00C0      		rjmp .L145
 1329               	.LVL116:
 1330               	.L138:
 476:quantum/quantum.c ****       unregister_code(KC_0);
 1331               		.loc 1 476 7 view .LVU328
 1332 006e 87E2      		ldi r24,lo8(39)
 1333 0070 0E94 0000 		call register_code
 1334               	.LVL117:
 477:quantum/quantum.c ****       break;
 1335               		.loc 1 477 7 view .LVU329
 1336 0074 87E2      		ldi r24,lo8(39)
 1337               	.LVL118:
 1338               	.L145:
 1339               	/* epilogue start */
 488:quantum/quantum.c ****       break;
 489:quantum/quantum.c ****     case 63:
 490:quantum/quantum.c ****       register_code(KC_SLSH);
 491:quantum/quantum.c ****       unregister_code(KC_SLSH);
 492:quantum/quantum.c ****       break;
 493:quantum/quantum.c ****   }
 494:quantum/quantum.c **** }
 1340               		.loc 1 494 1 is_stmt 0 view .LVU330
 1341 0076 DF91      		pop r29
 1342 0078 CF91      		pop r28
 491:quantum/quantum.c ****       break;
 1343               		.loc 1 491 7 view .LVU331
 1344 007a 0C94 0000 		jmp unregister_code
 1345               	.LVL119:
 1346               	.L137:
 480:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 1347               		.loc 1 480 7 is_stmt 1 view .LVU332
 1348 007e C751      		subi r28,lo8(-(-23))
 1349               	.LVL120:
 480:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 1350               		.loc 1 480 7 is_stmt 0 view .LVU333
 1351 0080 00C0      		rjmp .L147
 1352               	.LVL121:
 1353               	.L144:
 490:quantum/quantum.c ****       unregister_code(KC_SLSH);
 1354               		.loc 1 490 7 is_stmt 1 view .LVU334
 1355 0082 88E3      		ldi r24,lo8(56)
 1356 0084 0E94 0000 		call register_code
 1357               	.LVL122:
 491:quantum/quantum.c ****       break;
 1358               		.loc 1 491 7 view .LVU335
 1359 0088 88E3      		ldi r24,lo8(56)
 1360 008a 00C0      		rjmp .L145
 1361               		.cfi_endproc
 1362               	.LFE117:
 1364               		.section	.text.matrix_scan_quantum,"ax",@progbits
 1365               	.global	matrix_scan_quantum
 1367               	matrix_scan_quantum:
 1368               	.LFB119:
 495:quantum/quantum.c **** 
 496:quantum/quantum.c **** void matrix_init_quantum() {
 497:quantum/quantum.c ****   #ifdef BACKLIGHT_ENABLE
 498:quantum/quantum.c ****     backlight_init_ports();
 499:quantum/quantum.c ****   #endif
 500:quantum/quantum.c ****   matrix_init_kb();
 501:quantum/quantum.c **** }
 502:quantum/quantum.c **** 
 503:quantum/quantum.c **** void matrix_scan_quantum() {
 1369               		.loc 1 503 28 view -0
 1370               		.cfi_startproc
 1371               	/* prologue: function */
 1372               	/* frame size = 0 */
 1373               	/* stack size = 0 */
 1374               	.L__stack_usage = 0
 504:quantum/quantum.c ****   #ifdef AUDIO_ENABLE
 505:quantum/quantum.c ****     matrix_scan_music();
 506:quantum/quantum.c ****   #endif
 507:quantum/quantum.c **** 
 508:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 509:quantum/quantum.c ****     matrix_scan_tap_dance();
 1375               		.loc 1 509 5 view .LVU337
 1376 0000 0E94 0000 		call matrix_scan_tap_dance
 1377               	.LVL123:
 510:quantum/quantum.c ****   #endif
 511:quantum/quantum.c ****   matrix_scan_kb();
 1378               		.loc 1 511 3 view .LVU338
 1379 0004 0C94 0000 		jmp matrix_scan_kb
 1380               	.LVL124:
 1381               		.cfi_endproc
 1382               	.LFE119:
 1384               		.section	.text.backlight_init_ports,"ax",@progbits
 1385               		.weak	backlight_init_ports
 1387               	backlight_init_ports:
 1388               	.LFB120:
 512:quantum/quantum.c **** }
 513:quantum/quantum.c **** 
 514:quantum/quantum.c **** #if defined(BACKLIGHT_ENABLE) && defined(BACKLIGHT_PIN)
 515:quantum/quantum.c **** 
 516:quantum/quantum.c **** static const uint8_t backlight_pin = BACKLIGHT_PIN;
 517:quantum/quantum.c **** 
 518:quantum/quantum.c **** #if BACKLIGHT_PIN == B7
 519:quantum/quantum.c **** #  define COM1x1 COM1C1
 520:quantum/quantum.c **** #  define OCR1x  OCR1C
 521:quantum/quantum.c **** #elif BACKLIGHT_PIN == B6
 522:quantum/quantum.c **** #  define COM1x1 COM1B1
 523:quantum/quantum.c **** #  define OCR1x  OCR1B
 524:quantum/quantum.c **** #elif BACKLIGHT_PIN == B5
 525:quantum/quantum.c **** #  define COM1x1 COM1A1
 526:quantum/quantum.c **** #  define OCR1x  OCR1A
 527:quantum/quantum.c **** #else
 528:quantum/quantum.c **** #  error "Backlight pin not supported - use B5, B6, or B7"
 529:quantum/quantum.c **** #endif
 530:quantum/quantum.c **** 
 531:quantum/quantum.c **** __attribute__ ((weak))
 532:quantum/quantum.c **** void backlight_init_ports(void)
 533:quantum/quantum.c **** {
 1389               		.loc 1 533 1 view -0
 1390               		.cfi_startproc
 1391               	/* prologue: function */
 1392               	/* frame size = 0 */
 1393               	/* stack size = 0 */
 1394               	.L__stack_usage = 0
 534:quantum/quantum.c **** 
 535:quantum/quantum.c ****   // Setup backlight pin as output and output low.
 536:quantum/quantum.c ****   // DDRx |= n
 537:quantum/quantum.c ****   _SFR_IO8((backlight_pin >> 4) + 1) |= _BV(backlight_pin & 0xF);
 1395               		.loc 1 537 3 view .LVU340
 1396               		.loc 1 537 38 is_stmt 0 view .LVU341
 1397 0000 269A      		sbi 0x4,6
 538:quantum/quantum.c ****   // PORTx &= ~n
 539:quantum/quantum.c ****   _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 1398               		.loc 1 539 3 is_stmt 1 view .LVU342
 1399               		.loc 1 539 38 is_stmt 0 view .LVU343
 1400 0002 2E98      		cbi 0x5,6
 540:quantum/quantum.c **** 
 541:quantum/quantum.c ****   // Use full 16-bit resolution.
 542:quantum/quantum.c ****   ICR1 = 0xFFFF;
 1401               		.loc 1 542 3 is_stmt 1 view .LVU344
 1402               		.loc 1 542 8 is_stmt 0 view .LVU345
 1403 0004 8FEF      		ldi r24,lo8(-1)
 1404 0006 9FEF      		ldi r25,lo8(-1)
 1405 0008 9093 8700 		sts 134+1,r25
 1406 000c 8093 8600 		sts 134,r24
 543:quantum/quantum.c **** 
 544:quantum/quantum.c ****   // I could write a wall of text here to explain... but TL;DW
 545:quantum/quantum.c ****   // Go read the ATmega32u4 datasheet.
 546:quantum/quantum.c ****   // And this: http://blog.saikoled.com/post/43165849837/secret-konami-cheat-code-to-high-resolutio
 547:quantum/quantum.c **** 
 548:quantum/quantum.c ****   // Pin PB7 = OCR1C (Timer 1, Channel C)
 549:quantum/quantum.c ****   // Compare Output Mode = Clear on compare match, Channel C = COM1C1=1 COM1C0=0
 550:quantum/quantum.c ****   // (i.e. start high, go low when counter matches.)
 551:quantum/quantum.c ****   // WGM Mode 14 (Fast PWM) = WGM13=1 WGM12=1 WGM11=1 WGM10=0
 552:quantum/quantum.c ****   // Clock Select = clk/1 (no prescaling) = CS12=0 CS11=0 CS10=1
 553:quantum/quantum.c **** 
 554:quantum/quantum.c ****   TCCR1A = _BV(COM1x1) | _BV(WGM11); // = 0b00001010;
 1407               		.loc 1 554 3 is_stmt 1 view .LVU346
 1408               		.loc 1 554 10 is_stmt 0 view .LVU347
 1409 0010 82E2      		ldi r24,lo8(34)
 1410 0012 8093 8000 		sts 128,r24
 555:quantum/quantum.c ****   TCCR1B = _BV(WGM13) | _BV(WGM12) | _BV(CS10); // = 0b00011001;
 1411               		.loc 1 555 3 is_stmt 1 view .LVU348
 1412               		.loc 1 555 10 is_stmt 0 view .LVU349
 1413 0016 89E1      		ldi r24,lo8(25)
 1414 0018 8093 8100 		sts 129,r24
 556:quantum/quantum.c **** 
 557:quantum/quantum.c ****   backlight_init();
 1415               		.loc 1 557 3 is_stmt 1 view .LVU350
 1416 001c 0C94 0000 		jmp backlight_init
 1417               	.LVL125:
 1418               		.cfi_endproc
 1419               	.LFE120:
 1421               		.section	.text.matrix_init_quantum,"ax",@progbits
 1422               	.global	matrix_init_quantum
 1424               	matrix_init_quantum:
 1425               	.LFB118:
 496:quantum/quantum.c ****   #ifdef BACKLIGHT_ENABLE
 1426               		.loc 1 496 28 view -0
 1427               		.cfi_startproc
 1428               	/* prologue: function */
 1429               	/* frame size = 0 */
 1430               	/* stack size = 0 */
 1431               	.L__stack_usage = 0
 498:quantum/quantum.c ****   #endif
 1432               		.loc 1 498 5 view .LVU352
 1433 0000 0E94 0000 		call backlight_init_ports
 1434               	.LVL126:
 500:quantum/quantum.c **** }
 1435               		.loc 1 500 3 view .LVU353
 1436 0004 0C94 0000 		jmp matrix_init_kb
 1437               	.LVL127:
 1438               		.cfi_endproc
 1439               	.LFE118:
 1441               		.section	.text.backlight_set,"ax",@progbits
 1442               		.weak	backlight_set
 1444               	backlight_set:
 1445               	.LVL128:
 1446               	.LFB121:
 558:quantum/quantum.c ****   #ifdef BACKLIGHT_BREATHING
 559:quantum/quantum.c ****     breathing_defaults();
 560:quantum/quantum.c ****   #endif
 561:quantum/quantum.c **** }
 562:quantum/quantum.c **** 
 563:quantum/quantum.c **** __attribute__ ((weak))
 564:quantum/quantum.c **** void backlight_set(uint8_t level)
 565:quantum/quantum.c **** {
 1447               		.loc 1 565 1 view -0
 1448               		.cfi_startproc
 1449               	/* prologue: function */
 1450               	/* frame size = 0 */
 1451               	/* stack size = 0 */
 1452               	.L__stack_usage = 0
 1453               		.loc 1 565 1 is_stmt 0 view .LVU355
 1454 0000 282F      		mov r18,r24
 566:quantum/quantum.c ****   // Prevent backlight blink on lowest level
 567:quantum/quantum.c ****   // PORTx &= ~n
 568:quantum/quantum.c ****   _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 1455               		.loc 1 568 3 is_stmt 1 view .LVU356
 1456               		.loc 1 568 38 is_stmt 0 view .LVU357
 1457 0002 2E98      		cbi 0x5,6
 569:quantum/quantum.c **** 
 570:quantum/quantum.c ****   if ( level == 0 ) {
 1458               		.loc 1 570 3 is_stmt 1 view .LVU358
 571:quantum/quantum.c ****     // Turn off PWM control on backlight pin, revert to output low.
 572:quantum/quantum.c ****     TCCR1A &= ~(_BV(COM1x1));
 1459               		.loc 1 572 12 is_stmt 0 view .LVU359
 1460 0004 8091 8000 		lds r24,128
 1461               	.LVL129:
 570:quantum/quantum.c ****     // Turn off PWM control on backlight pin, revert to output low.
 1462               		.loc 1 570 6 view .LVU360
 1463 0008 2111      		cpse r18,__zero_reg__
 1464 000a 00C0      		rjmp .L152
 1465               		.loc 1 572 5 is_stmt 1 view .LVU361
 1466               		.loc 1 572 12 is_stmt 0 view .LVU362
 1467 000c 8F7D      		andi r24,lo8(-33)
 1468 000e 8093 8000 		sts 128,r24
 573:quantum/quantum.c ****     OCR1x = 0x0;
 1469               		.loc 1 573 5 is_stmt 1 view .LVU363
 1470               		.loc 1 573 11 is_stmt 0 view .LVU364
 1471 0012 1092 8B00 		sts 138+1,__zero_reg__
 1472 0016 1092 8A00 		sts 138,__zero_reg__
 1473 001a 0895      		ret
 1474               	.L152:
 574:quantum/quantum.c ****   } else if ( level == BACKLIGHT_LEVELS ) {
 1475               		.loc 1 574 10 is_stmt 1 view .LVU365
 575:quantum/quantum.c ****     // Turn on PWM control of backlight pin
 576:quantum/quantum.c ****     TCCR1A |= _BV(COM1x1);
 1476               		.loc 1 576 12 is_stmt 0 view .LVU366
 1477 001c 8062      		ori r24,lo8(32)
 1478 001e 8093 8000 		sts 128,r24
 574:quantum/quantum.c ****   } else if ( level == BACKLIGHT_LEVELS ) {
 1479               		.loc 1 574 13 view .LVU367
 1480 0022 2330      		cpi r18,lo8(3)
 1481 0024 01F4      		brne .L154
 1482               		.loc 1 576 5 is_stmt 1 view .LVU368
 577:quantum/quantum.c ****     // Set the brightness
 578:quantum/quantum.c ****     OCR1x = 0xFFFF;
 1483               		.loc 1 578 5 view .LVU369
 1484               		.loc 1 578 11 is_stmt 0 view .LVU370
 1485 0026 8FEF      		ldi r24,lo8(-1)
 1486 0028 9FEF      		ldi r25,lo8(-1)
 1487 002a 9093 8B00 		sts 138+1,r25
 1488 002e 8093 8A00 		sts 138,r24
 1489 0032 0895      		ret
 1490               	.L154:
 579:quantum/quantum.c ****   } else {
 580:quantum/quantum.c ****     // Turn on PWM control of backlight pin
 581:quantum/quantum.c ****     TCCR1A |= _BV(COM1x1);
 1491               		.loc 1 581 5 is_stmt 1 view .LVU371
 582:quantum/quantum.c ****     // Set the brightness
 583:quantum/quantum.c ****     OCR1x = 0xFFFF >> ((BACKLIGHT_LEVELS - level) * ((BACKLIGHT_LEVELS + 1) / 2));
 1492               		.loc 1 583 5 view .LVU372
 1493               		.loc 1 583 42 is_stmt 0 view .LVU373
 1494 0034 83E0      		ldi r24,lo8(3)
 1495 0036 90E0      		ldi r25,0
 1496 0038 821B      		sub r24,r18
 1497 003a 9109      		sbc r25,__zero_reg__
 1498               		.loc 1 583 51 view .LVU374
 1499 003c 880F      		lsl r24
 1500 003e 991F      		rol r25
 1501               	.LVL130:
 1502               		.loc 1 583 20 view .LVU375
 1503 0040 2FEF      		ldi r18,lo8(-1)
 1504 0042 3FEF      		ldi r19,lo8(-1)
 1505 0044 00C0      		rjmp 2f
 1506               		1:
 1507 0046 3695      		lsr r19
 1508 0048 2795      		ror r18
 1509               		2:
 1510 004a 8A95      		dec r24
 1511 004c 02F4      		brpl 1b
 1512               		.loc 1 583 11 view .LVU376
 1513 004e 3093 8B00 		sts 138+1,r19
 1514 0052 2093 8A00 		sts 138,r18
 1515               	/* epilogue start */
 584:quantum/quantum.c ****   }
 585:quantum/quantum.c **** 
 586:quantum/quantum.c ****   #ifdef BACKLIGHT_BREATHING
 587:quantum/quantum.c ****     breathing_intensity_default();
 588:quantum/quantum.c ****   #endif
 589:quantum/quantum.c **** }
 1516               		.loc 1 589 1 view .LVU377
 1517 0056 0895      		ret
 1518               		.cfi_endproc
 1519               	.LFE121:
 1521               		.section	.text.send_nibble,"ax",@progbits
 1522               	.global	send_nibble
 1524               	send_nibble:
 1525               	.LVL131:
 1526               	.LFB125:
 590:quantum/quantum.c **** 
 591:quantum/quantum.c **** 
 592:quantum/quantum.c **** #ifdef BACKLIGHT_BREATHING
 593:quantum/quantum.c **** 
 594:quantum/quantum.c **** #define BREATHING_NO_HALT  0
 595:quantum/quantum.c **** #define BREATHING_HALT_OFF 1
 596:quantum/quantum.c **** #define BREATHING_HALT_ON  2
 597:quantum/quantum.c **** 
 598:quantum/quantum.c **** static uint8_t breath_intensity;
 599:quantum/quantum.c **** static uint8_t breath_speed;
 600:quantum/quantum.c **** static uint16_t breathing_index;
 601:quantum/quantum.c **** static uint8_t breathing_halt;
 602:quantum/quantum.c **** 
 603:quantum/quantum.c **** void breathing_enable(void)
 604:quantum/quantum.c **** {
 605:quantum/quantum.c ****     if (get_backlight_level() == 0)
 606:quantum/quantum.c ****     {
 607:quantum/quantum.c ****         breathing_index = 0;
 608:quantum/quantum.c ****     }
 609:quantum/quantum.c ****     else
 610:quantum/quantum.c ****     {
 611:quantum/quantum.c ****         // Set breathing_index to be at the midpoint (brightest point)
 612:quantum/quantum.c ****         breathing_index = 0x20 << breath_speed;
 613:quantum/quantum.c ****     }
 614:quantum/quantum.c **** 
 615:quantum/quantum.c ****     breathing_halt = BREATHING_NO_HALT;
 616:quantum/quantum.c **** 
 617:quantum/quantum.c ****     // Enable breathing interrupt
 618:quantum/quantum.c ****     TIMSK1 |= _BV(OCIE1A);
 619:quantum/quantum.c **** }
 620:quantum/quantum.c **** 
 621:quantum/quantum.c **** void breathing_pulse(void)
 622:quantum/quantum.c **** {
 623:quantum/quantum.c ****     if (get_backlight_level() == 0)
 624:quantum/quantum.c ****     {
 625:quantum/quantum.c ****         breathing_index = 0;
 626:quantum/quantum.c ****     }
 627:quantum/quantum.c ****     else
 628:quantum/quantum.c ****     {
 629:quantum/quantum.c ****         // Set breathing_index to be at the midpoint + 1 (brightest point)
 630:quantum/quantum.c ****         breathing_index = 0x21 << breath_speed;
 631:quantum/quantum.c ****     }
 632:quantum/quantum.c **** 
 633:quantum/quantum.c ****     breathing_halt = BREATHING_HALT_ON;
 634:quantum/quantum.c **** 
 635:quantum/quantum.c ****     // Enable breathing interrupt
 636:quantum/quantum.c ****     TIMSK1 |= _BV(OCIE1A);
 637:quantum/quantum.c **** }
 638:quantum/quantum.c **** 
 639:quantum/quantum.c **** void breathing_disable(void)
 640:quantum/quantum.c **** {
 641:quantum/quantum.c ****     // Disable breathing interrupt
 642:quantum/quantum.c ****     TIMSK1 &= ~_BV(OCIE1A);
 643:quantum/quantum.c ****     backlight_set(get_backlight_level());
 644:quantum/quantum.c **** }
 645:quantum/quantum.c **** 
 646:quantum/quantum.c **** void breathing_self_disable(void)
 647:quantum/quantum.c **** {
 648:quantum/quantum.c ****     if (get_backlight_level() == 0)
 649:quantum/quantum.c ****     {
 650:quantum/quantum.c ****         breathing_halt = BREATHING_HALT_OFF;
 651:quantum/quantum.c ****     }
 652:quantum/quantum.c ****     else
 653:quantum/quantum.c ****     {
 654:quantum/quantum.c ****         breathing_halt = BREATHING_HALT_ON;
 655:quantum/quantum.c ****     }
 656:quantum/quantum.c **** 
 657:quantum/quantum.c ****     //backlight_set(get_backlight_level());
 658:quantum/quantum.c **** }
 659:quantum/quantum.c **** 
 660:quantum/quantum.c **** void breathing_toggle(void)
 661:quantum/quantum.c **** {
 662:quantum/quantum.c ****     if (!is_breathing())
 663:quantum/quantum.c ****     {
 664:quantum/quantum.c ****         if (get_backlight_level() == 0)
 665:quantum/quantum.c ****         {
 666:quantum/quantum.c ****             breathing_index = 0;
 667:quantum/quantum.c ****         }
 668:quantum/quantum.c ****         else
 669:quantum/quantum.c ****         {
 670:quantum/quantum.c ****             // Set breathing_index to be at the midpoint + 1 (brightest point)
 671:quantum/quantum.c ****             breathing_index = 0x21 << breath_speed;
 672:quantum/quantum.c ****         }
 673:quantum/quantum.c **** 
 674:quantum/quantum.c ****         breathing_halt = BREATHING_NO_HALT;
 675:quantum/quantum.c ****     }
 676:quantum/quantum.c **** 
 677:quantum/quantum.c ****     // Toggle breathing interrupt
 678:quantum/quantum.c ****     TIMSK1 ^= _BV(OCIE1A);
 679:quantum/quantum.c **** 
 680:quantum/quantum.c ****     // Restore backlight level
 681:quantum/quantum.c ****     if (!is_breathing())
 682:quantum/quantum.c ****     {
 683:quantum/quantum.c ****         backlight_set(get_backlight_level());
 684:quantum/quantum.c ****     }
 685:quantum/quantum.c **** }
 686:quantum/quantum.c **** 
 687:quantum/quantum.c **** bool is_breathing(void)
 688:quantum/quantum.c **** {
 689:quantum/quantum.c ****     return (TIMSK1 && _BV(OCIE1A));
 690:quantum/quantum.c **** }
 691:quantum/quantum.c **** 
 692:quantum/quantum.c **** void breathing_intensity_default(void)
 693:quantum/quantum.c **** {
 694:quantum/quantum.c ****     //breath_intensity = (uint8_t)((uint16_t)100 * (uint16_t)get_backlight_level() / (uint16_t)BACK
 695:quantum/quantum.c ****     breath_intensity = ((BACKLIGHT_LEVELS - get_backlight_level()) * ((BACKLIGHT_LEVELS + 1) / 2));
 696:quantum/quantum.c **** }
 697:quantum/quantum.c **** 
 698:quantum/quantum.c **** void breathing_intensity_set(uint8_t value)
 699:quantum/quantum.c **** {
 700:quantum/quantum.c ****     breath_intensity = value;
 701:quantum/quantum.c **** }
 702:quantum/quantum.c **** 
 703:quantum/quantum.c **** void breathing_speed_default(void)
 704:quantum/quantum.c **** {
 705:quantum/quantum.c ****     breath_speed = 4;
 706:quantum/quantum.c **** }
 707:quantum/quantum.c **** 
 708:quantum/quantum.c **** void breathing_speed_set(uint8_t value)
 709:quantum/quantum.c **** {
 710:quantum/quantum.c ****     bool is_breathing_now = is_breathing();
 711:quantum/quantum.c ****     uint8_t old_breath_speed = breath_speed;
 712:quantum/quantum.c **** 
 713:quantum/quantum.c ****     if (is_breathing_now)
 714:quantum/quantum.c ****     {
 715:quantum/quantum.c ****         // Disable breathing interrupt
 716:quantum/quantum.c ****         TIMSK1 &= ~_BV(OCIE1A);
 717:quantum/quantum.c ****     }
 718:quantum/quantum.c **** 
 719:quantum/quantum.c ****     breath_speed = value;
 720:quantum/quantum.c **** 
 721:quantum/quantum.c ****     if (is_breathing_now)
 722:quantum/quantum.c ****     {
 723:quantum/quantum.c ****         // Adjust index to account for new speed
 724:quantum/quantum.c ****         breathing_index = (( (uint8_t)( (breathing_index) >> old_breath_speed ) ) & 0x3F) << breath
 725:quantum/quantum.c **** 
 726:quantum/quantum.c ****         // Enable breathing interrupt
 727:quantum/quantum.c ****         TIMSK1 |= _BV(OCIE1A);
 728:quantum/quantum.c ****     }
 729:quantum/quantum.c **** 
 730:quantum/quantum.c **** }
 731:quantum/quantum.c **** 
 732:quantum/quantum.c **** void breathing_speed_inc(uint8_t value)
 733:quantum/quantum.c **** {
 734:quantum/quantum.c ****     if ((uint16_t)(breath_speed - value) > 10 )
 735:quantum/quantum.c ****     {
 736:quantum/quantum.c ****         breathing_speed_set(0);
 737:quantum/quantum.c ****     }
 738:quantum/quantum.c ****     else
 739:quantum/quantum.c ****     {
 740:quantum/quantum.c ****         breathing_speed_set(breath_speed - value);
 741:quantum/quantum.c ****     }
 742:quantum/quantum.c **** }
 743:quantum/quantum.c **** 
 744:quantum/quantum.c **** void breathing_speed_dec(uint8_t value)
 745:quantum/quantum.c **** {
 746:quantum/quantum.c ****     if ((uint16_t)(breath_speed + value) > 10 )
 747:quantum/quantum.c ****     {
 748:quantum/quantum.c ****         breathing_speed_set(10);
 749:quantum/quantum.c ****     }
 750:quantum/quantum.c ****     else
 751:quantum/quantum.c ****     {
 752:quantum/quantum.c ****         breathing_speed_set(breath_speed + value);
 753:quantum/quantum.c ****     }
 754:quantum/quantum.c **** }
 755:quantum/quantum.c **** 
 756:quantum/quantum.c **** void breathing_defaults(void)
 757:quantum/quantum.c **** {
 758:quantum/quantum.c ****     breathing_intensity_default();
 759:quantum/quantum.c ****     breathing_speed_default();
 760:quantum/quantum.c ****     breathing_halt = BREATHING_NO_HALT;
 761:quantum/quantum.c **** }
 762:quantum/quantum.c **** 
 763:quantum/quantum.c **** /* Breathing Sleep LED brighness(PWM On period) table
 764:quantum/quantum.c ****  * (64[steps] * 4[duration]) / 64[PWM periods/s] = 4 second breath cycle
 765:quantum/quantum.c ****  *
 766:quantum/quantum.c ****  * http://www.wolframalpha.com/input/?i=%28sin%28+x%2F64*pi%29**8+*+255%2C+x%3D0+to+63
 767:quantum/quantum.c ****  * (0..63).each {|x| p ((sin(x/64.0*PI)**8)*255).to_i }
 768:quantum/quantum.c ****  */
 769:quantum/quantum.c **** static const uint8_t breathing_table[64] PROGMEM = {
 770:quantum/quantum.c ****   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   2,   4,   6,  10,
 771:quantum/quantum.c ****  15,  23,  32,  44,  58,  74,  93, 113, 135, 157, 179, 199, 218, 233, 245, 252,
 772:quantum/quantum.c **** 255, 252, 245, 233, 218, 199, 179, 157, 135, 113,  93,  74,  58,  44,  32,  23,
 773:quantum/quantum.c ****  15,  10,   6,   4,   2,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 774:quantum/quantum.c **** };
 775:quantum/quantum.c **** 
 776:quantum/quantum.c **** ISR(TIMER1_COMPA_vect)
 777:quantum/quantum.c **** {
 778:quantum/quantum.c ****     // OCR1x = (pgm_read_byte(&breathing_table[ ( (uint8_t)( (breathing_index++) >> breath_speed ) 
 779:quantum/quantum.c **** 
 780:quantum/quantum.c **** 
 781:quantum/quantum.c ****     uint8_t local_index = ( (uint8_t)( (breathing_index++) >> breath_speed ) ) & 0x3F;
 782:quantum/quantum.c **** 
 783:quantum/quantum.c ****     if (((breathing_halt == BREATHING_HALT_ON) && (local_index == 0x20)) || ((breathing_halt == BRE
 784:quantum/quantum.c ****     {
 785:quantum/quantum.c ****         // Disable breathing interrupt
 786:quantum/quantum.c ****         TIMSK1 &= ~_BV(OCIE1A);
 787:quantum/quantum.c ****     }
 788:quantum/quantum.c **** 
 789:quantum/quantum.c ****     OCR1x = (uint16_t)(((uint16_t)pgm_read_byte(&breathing_table[local_index]) * 257)) >> breath_in
 790:quantum/quantum.c **** 
 791:quantum/quantum.c **** }
 792:quantum/quantum.c **** 
 793:quantum/quantum.c **** 
 794:quantum/quantum.c **** 
 795:quantum/quantum.c **** #endif // breathing
 796:quantum/quantum.c **** 
 797:quantum/quantum.c **** #else // backlight
 798:quantum/quantum.c **** 
 799:quantum/quantum.c **** __attribute__ ((weak))
 800:quantum/quantum.c **** void backlight_init_ports(void)
 801:quantum/quantum.c **** {
 802:quantum/quantum.c **** 
 803:quantum/quantum.c **** }
 804:quantum/quantum.c **** 
 805:quantum/quantum.c **** __attribute__ ((weak))
 806:quantum/quantum.c **** void backlight_set(uint8_t level)
 807:quantum/quantum.c **** {
 808:quantum/quantum.c **** 
 809:quantum/quantum.c **** }
 810:quantum/quantum.c **** 
 811:quantum/quantum.c **** #endif // backlight
 812:quantum/quantum.c **** 
 813:quantum/quantum.c **** 
 814:quantum/quantum.c **** // Functions for spitting out values
 815:quantum/quantum.c **** //
 816:quantum/quantum.c **** 
 817:quantum/quantum.c **** void send_dword(uint32_t number) { // this might not actually work
 818:quantum/quantum.c ****     uint16_t word = (number >> 16);
 819:quantum/quantum.c ****     send_word(word);
 820:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
 821:quantum/quantum.c **** }
 822:quantum/quantum.c **** 
 823:quantum/quantum.c **** void send_word(uint16_t number) {
 824:quantum/quantum.c ****     uint8_t byte = number >> 8;
 825:quantum/quantum.c ****     send_byte(byte);
 826:quantum/quantum.c ****     send_byte(number & 0xFF);
 827:quantum/quantum.c **** }
 828:quantum/quantum.c **** 
 829:quantum/quantum.c **** void send_byte(uint8_t number) {
 830:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 831:quantum/quantum.c ****     send_nibble(nibble);
 832:quantum/quantum.c ****     send_nibble(number & 0xF);
 833:quantum/quantum.c **** }
 834:quantum/quantum.c **** 
 835:quantum/quantum.c **** void send_nibble(uint8_t number) {
 1527               		.loc 1 835 34 is_stmt 1 view -0
 1528               		.cfi_startproc
 1529               		.loc 1 835 34 is_stmt 0 view .LVU379
 1530 0000 CF93      		push r28
 1531               	.LCFI24:
 1532               		.cfi_def_cfa_offset 3
 1533               		.cfi_offset 28, -2
 1534               	/* prologue: function */
 1535               	/* frame size = 0 */
 1536               	/* stack size = 1 */
 1537               	.L__stack_usage = 1
 1538 0002 C82F      		mov r28,r24
 836:quantum/quantum.c ****     switch (number) {
 1539               		.loc 1 836 5 is_stmt 1 view .LVU380
 1540 0004 8A30      		cpi r24,lo8(10)
 1541 0006 00F4      		brsh .L156
 1542 0008 8823      		tst r24
 1543 000a 01F0      		breq .L161
 837:quantum/quantum.c ****         case 0:
 838:quantum/quantum.c ****             register_code(KC_0);
 839:quantum/quantum.c ****             unregister_code(KC_0);
 840:quantum/quantum.c ****             break;
 841:quantum/quantum.c ****         case 1 ... 9:
 842:quantum/quantum.c ****             register_code(KC_1 + (number - 1));
 1544               		.loc 1 842 13 view .LVU381
 1545 000c C35E      		subi r28,lo8(-(29))
 1546               	.L164:
 843:quantum/quantum.c ****             unregister_code(KC_1 + (number - 1));
 844:quantum/quantum.c ****             break;
 845:quantum/quantum.c ****         case 0xA ... 0xF:
 846:quantum/quantum.c ****             register_code(KC_A + (number - 0xA));
 1547               		.loc 1 846 13 is_stmt 0 view .LVU382
 1548 000e 8C2F      		mov r24,r28
 1549               	.LVL132:
 1550               		.loc 1 846 13 view .LVU383
 1551 0010 0E94 0000 		call register_code
 1552               	.LVL133:
 847:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 1553               		.loc 1 847 13 is_stmt 1 view .LVU384
 1554 0014 8C2F      		mov r24,r28
 1555 0016 00C0      		rjmp .L163
 1556               	.LVL134:
 1557               	.L156:
 836:quantum/quantum.c ****         case 0:
 1558               		.loc 1 836 5 is_stmt 0 view .LVU385
 1559 0018 96EF      		ldi r25,lo8(-10)
 1560 001a 980F      		add r25,r24
 846:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 1561               		.loc 1 846 13 view .LVU386
 1562 001c C650      		subi r28,lo8(-(-6))
 836:quantum/quantum.c ****         case 0:
 1563               		.loc 1 836 5 view .LVU387
 1564 001e 9630      		cpi r25,lo8(6)
 1565 0020 00F0      		brlo .L164
 1566               	/* epilogue start */
 848:quantum/quantum.c ****             break;
 849:quantum/quantum.c ****     }
 850:quantum/quantum.c **** }
 1567               		.loc 1 850 1 view .LVU388
 1568 0022 CF91      		pop r28
 1569 0024 0895      		ret
 1570               	.L161:
 838:quantum/quantum.c ****             unregister_code(KC_0);
 1571               		.loc 1 838 13 is_stmt 1 view .LVU389
 1572 0026 87E2      		ldi r24,lo8(39)
 1573               	.LVL135:
 838:quantum/quantum.c ****             unregister_code(KC_0);
 1574               		.loc 1 838 13 is_stmt 0 view .LVU390
 1575 0028 0E94 0000 		call register_code
 1576               	.LVL136:
 839:quantum/quantum.c ****             break;
 1577               		.loc 1 839 13 is_stmt 1 view .LVU391
 1578 002c 87E2      		ldi r24,lo8(39)
 1579               	.LVL137:
 1580               	.L163:
 1581               	/* epilogue start */
 1582               		.loc 1 850 1 is_stmt 0 view .LVU392
 1583 002e CF91      		pop r28
 847:quantum/quantum.c ****             break;
 1584               		.loc 1 847 13 view .LVU393
 1585 0030 0C94 0000 		jmp unregister_code
 1586               	.LVL138:
 1587               		.cfi_endproc
 1588               	.LFE125:
 1590               		.section	.text.send_byte,"ax",@progbits
 1591               	.global	send_byte
 1593               	send_byte:
 1594               	.LVL139:
 1595               	.LFB124:
 829:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 1596               		.loc 1 829 32 is_stmt 1 view -0
 1597               		.cfi_startproc
 829:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 1598               		.loc 1 829 32 is_stmt 0 view .LVU395
 1599 0000 CF93      		push r28
 1600               	.LCFI25:
 1601               		.cfi_def_cfa_offset 3
 1602               		.cfi_offset 28, -2
 1603               	/* prologue: function */
 1604               	/* frame size = 0 */
 1605               	/* stack size = 1 */
 1606               	.L__stack_usage = 1
 1607 0002 C82F      		mov r28,r24
 830:quantum/quantum.c ****     send_nibble(nibble);
 1608               		.loc 1 830 5 is_stmt 1 view .LVU396
 1609               	.LVL140:
 831:quantum/quantum.c ****     send_nibble(number & 0xF);
 1610               		.loc 1 831 5 view .LVU397
 1611 0004 8295      		swap r24
 1612               	.LVL141:
 831:quantum/quantum.c ****     send_nibble(number & 0xF);
 1613               		.loc 1 831 5 is_stmt 0 view .LVU398
 1614 0006 8F70      		andi r24,lo8(15)
 1615 0008 0E94 0000 		call send_nibble
 1616               	.LVL142:
 832:quantum/quantum.c **** }
 1617               		.loc 1 832 5 is_stmt 1 view .LVU399
 1618 000c 8C2F      		mov r24,r28
 1619 000e 8F70      		andi r24,lo8(15)
 1620               	/* epilogue start */
 833:quantum/quantum.c **** 
 1621               		.loc 1 833 1 is_stmt 0 view .LVU400
 1622 0010 CF91      		pop r28
 1623               	.LVL143:
 832:quantum/quantum.c **** }
 1624               		.loc 1 832 5 view .LVU401
 1625 0012 0C94 0000 		jmp send_nibble
 1626               	.LVL144:
 1627               		.cfi_endproc
 1628               	.LFE124:
 1630               		.section	.text.send_word,"ax",@progbits
 1631               	.global	send_word
 1633               	send_word:
 1634               	.LVL145:
 1635               	.LFB123:
 823:quantum/quantum.c ****     uint8_t byte = number >> 8;
 1636               		.loc 1 823 33 is_stmt 1 view -0
 1637               		.cfi_startproc
 823:quantum/quantum.c ****     uint8_t byte = number >> 8;
 1638               		.loc 1 823 33 is_stmt 0 view .LVU403
 1639 0000 CF93      		push r28
 1640               	.LCFI26:
 1641               		.cfi_def_cfa_offset 3
 1642               		.cfi_offset 28, -2
 1643               	/* prologue: function */
 1644               	/* frame size = 0 */
 1645               	/* stack size = 1 */
 1646               	.L__stack_usage = 1
 1647 0002 C82F      		mov r28,r24
 1648 0004 892F      		mov r24,r25
 1649               	.LVL146:
 824:quantum/quantum.c ****     send_byte(byte);
 1650               		.loc 1 824 5 is_stmt 1 view .LVU404
 825:quantum/quantum.c ****     send_byte(number & 0xFF);
 1651               		.loc 1 825 5 view .LVU405
 1652 0006 0E94 0000 		call send_byte
 1653               	.LVL147:
 826:quantum/quantum.c **** }
 1654               		.loc 1 826 5 view .LVU406
 1655 000a 8C2F      		mov r24,r28
 1656               	/* epilogue start */
 827:quantum/quantum.c **** 
 1657               		.loc 1 827 1 is_stmt 0 view .LVU407
 1658 000c CF91      		pop r28
 826:quantum/quantum.c **** }
 1659               		.loc 1 826 5 view .LVU408
 1660 000e 0C94 0000 		jmp send_byte
 1661               	.LVL148:
 1662               		.cfi_endproc
 1663               	.LFE123:
 1665               		.section	.text.send_dword,"ax",@progbits
 1666               	.global	send_dword
 1668               	send_dword:
 1669               	.LVL149:
 1670               	.LFB122:
 817:quantum/quantum.c ****     uint16_t word = (number >> 16);
 1671               		.loc 1 817 34 is_stmt 1 view -0
 1672               		.cfi_startproc
 817:quantum/quantum.c ****     uint16_t word = (number >> 16);
 1673               		.loc 1 817 34 is_stmt 0 view .LVU410
 1674 0000 CF93      		push r28
 1675               	.LCFI27:
 1676               		.cfi_def_cfa_offset 3
 1677               		.cfi_offset 28, -2
 1678 0002 DF93      		push r29
 1679               	.LCFI28:
 1680               		.cfi_def_cfa_offset 4
 1681               		.cfi_offset 29, -3
 1682               	/* prologue: function */
 1683               	/* frame size = 0 */
 1684               	/* stack size = 2 */
 1685               	.L__stack_usage = 2
 1686 0004 D62F      		mov r29,r22
 1687 0006 C72F      		mov r28,r23
 818:quantum/quantum.c ****     send_word(word);
 1688               		.loc 1 818 5 is_stmt 1 view .LVU411
 1689               	.LVL150:
 819:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
 1690               		.loc 1 819 5 view .LVU412
 1691 0008 0E94 0000 		call send_word
 1692               	.LVL151:
 820:quantum/quantum.c **** }
 1693               		.loc 1 820 5 view .LVU413
 1694 000c 8D2F      		mov r24,r29
 1695 000e 9C2F      		mov r25,r28
 1696               	/* epilogue start */
 821:quantum/quantum.c **** 
 1697               		.loc 1 821 1 is_stmt 0 view .LVU414
 1698 0010 DF91      		pop r29
 821:quantum/quantum.c **** 
 1699               		.loc 1 821 1 view .LVU415
 1700 0012 CF91      		pop r28
 820:quantum/quantum.c **** }
 1701               		.loc 1 820 5 view .LVU416
 1702 0014 0C94 0000 		jmp send_word
 1703               	.LVL152:
 820:quantum/quantum.c **** }
 1704               		.loc 1 820 5 view .LVU417
 1705               		.cfi_endproc
 1706               	.LFE122:
 1708               		.section	.text.api_send_unicode,"ax",@progbits
 1709               	.global	api_send_unicode
 1711               	api_send_unicode:
 1712               	.LVL153:
 1713               	.LFB126:
 851:quantum/quantum.c **** 
 852:quantum/quantum.c **** void api_send_unicode(uint32_t unicode) {
 1714               		.loc 1 852 41 is_stmt 1 view -0
 1715               		.cfi_startproc
 1716               	/* prologue: function */
 1717               	/* frame size = 0 */
 1718               	/* stack size = 0 */
 1719               	.L__stack_usage = 0
 853:quantum/quantum.c **** #ifdef API_ENABLE
 854:quantum/quantum.c ****     uint8_t chunk[4];
 855:quantum/quantum.c ****     dword_to_bytes(unicode, chunk);
 856:quantum/quantum.c ****     MT_SEND_DATA(DT_UNICODE, chunk, 5);
 857:quantum/quantum.c **** #endif
 858:quantum/quantum.c **** }
 1720               		.loc 1 858 1 view .LVU419
 1721               	/* epilogue start */
 1722 0000 0895      		ret
 1723               		.cfi_endproc
 1724               	.LFE126:
 1726               		.section	.text.led_set_user,"ax",@progbits
 1727               		.weak	led_set_user
 1729               	led_set_user:
 1730               	.LVL154:
 1731               	.LFB127:
 859:quantum/quantum.c **** 
 860:quantum/quantum.c **** __attribute__ ((weak))
 861:quantum/quantum.c **** void led_set_user(uint8_t usb_led) {
 1732               		.loc 1 861 36 view -0
 1733               		.cfi_startproc
 1734               	/* prologue: function */
 1735               	/* frame size = 0 */
 1736               	/* stack size = 0 */
 1737               	.L__stack_usage = 0
 862:quantum/quantum.c **** 
 863:quantum/quantum.c **** }
 1738               		.loc 1 863 1 view .LVU421
 1739               	/* epilogue start */
 1740 0000 0895      		ret
 1741               		.cfi_endproc
 1742               	.LFE127:
 1744               		.section	.text.led_set_kb,"ax",@progbits
 1745               		.weak	led_set_kb
 1747               	led_set_kb:
 1748               	.LVL155:
 1749               	.LFB128:
 864:quantum/quantum.c **** 
 865:quantum/quantum.c **** __attribute__ ((weak))
 866:quantum/quantum.c **** void led_set_kb(uint8_t usb_led) {
 1750               		.loc 1 866 34 view -0
 1751               		.cfi_startproc
 1752               	/* prologue: function */
 1753               	/* frame size = 0 */
 1754               	/* stack size = 0 */
 1755               	.L__stack_usage = 0
 867:quantum/quantum.c ****     led_set_user(usb_led);
 1756               		.loc 1 867 5 view .LVU423
 1757 0000 0C94 0000 		jmp led_set_user
 1758               	.LVL156:
 1759               		.loc 1 867 5 is_stmt 0 view .LVU424
 1760               		.cfi_endproc
 1761               	.LFE128:
 1763               		.section	.text.led_init_ports,"ax",@progbits
 1764               		.weak	led_init_ports
 1766               	led_init_ports:
 1767               	.LFB129:
 868:quantum/quantum.c **** }
 869:quantum/quantum.c **** 
 870:quantum/quantum.c **** __attribute__ ((weak))
 871:quantum/quantum.c **** void led_init_ports(void)
 872:quantum/quantum.c **** {
 1768               		.loc 1 872 1 is_stmt 1 view -0
 1769               		.cfi_startproc
 1770               	/* prologue: function */
 1771               	/* frame size = 0 */
 1772               	/* stack size = 0 */
 1773               	.L__stack_usage = 0
 873:quantum/quantum.c **** 
 874:quantum/quantum.c **** }
 1774               		.loc 1 874 1 view .LVU426
 1775               	/* epilogue start */
 1776 0000 0895      		ret
 1777               		.cfi_endproc
 1778               	.LFE129:
 1780               		.section	.text.led_set,"ax",@progbits
 1781               		.weak	led_set
 1783               	led_set:
 1784               	.LVL157:
 1785               	.LFB130:
 875:quantum/quantum.c **** 
 876:quantum/quantum.c **** __attribute__ ((weak))
 877:quantum/quantum.c **** void led_set(uint8_t usb_led)
 878:quantum/quantum.c **** {
 1786               		.loc 1 878 1 view -0
 1787               		.cfi_startproc
 1788               	/* prologue: function */
 1789               	/* frame size = 0 */
 1790               	/* stack size = 0 */
 1791               	.L__stack_usage = 0
 879:quantum/quantum.c **** 
 880:quantum/quantum.c ****   // Example LED Code
 881:quantum/quantum.c ****   //
 882:quantum/quantum.c ****     // // Using PE6 Caps Lock LED
 883:quantum/quantum.c ****     // if (usb_led & (1<<USB_LED_CAPS_LOCK))
 884:quantum/quantum.c ****     // {
 885:quantum/quantum.c ****     //     // Output high.
 886:quantum/quantum.c ****     //     DDRE |= (1<<6);
 887:quantum/quantum.c ****     //     PORTE |= (1<<6);
 888:quantum/quantum.c ****     // }
 889:quantum/quantum.c ****     // else
 890:quantum/quantum.c ****     // {
 891:quantum/quantum.c ****     //     // Output low.
 892:quantum/quantum.c ****     //     DDRE &= ~(1<<6);
 893:quantum/quantum.c ****     //     PORTE &= ~(1<<6);
 894:quantum/quantum.c ****     // }
 895:quantum/quantum.c **** 
 896:quantum/quantum.c ****   led_set_kb(usb_led);
 1792               		.loc 1 896 3 view .LVU428
 1793 0000 0C94 0000 		jmp led_set_kb
 1794               	.LVL158:
 1795               		.loc 1 896 3 is_stmt 0 view .LVU429
 1796               		.cfi_endproc
 1797               	.LFE130:
 1799               		.section	.text.startup_user,"ax",@progbits
 1800               		.weak	startup_user
 1802               	startup_user:
 1803               	.LFB134:
 1804               		.cfi_startproc
 1805               	/* prologue: function */
 1806               	/* frame size = 0 */
 1807               	/* stack size = 0 */
 1808               	.L__stack_usage = 0
 1809               	/* epilogue start */
 1810 0000 0895      		ret
 1811               		.cfi_endproc
 1812               	.LFE134:
 1814               		.section	.text.shutdown_user,"ax",@progbits
 1815               		.weak	shutdown_user
 1817               	shutdown_user:
 1818               	.LFB136:
 1819               		.cfi_startproc
 1820               	/* prologue: function */
 1821               	/* frame size = 0 */
 1822               	/* stack size = 0 */
 1823               	.L__stack_usage = 0
 1824               	/* epilogue start */
 1825 0000 0895      		ret
 1826               		.cfi_endproc
 1827               	.LFE136:
 1829               	.global	ascii_to_qwerty_keycode_lut
 1830               		.section	.progmem.data.ascii_to_qwerty_keycode_lut,"a"
 1833               	ascii_to_qwerty_keycode_lut:
 1834 0000 00        		.string	""
 1835 0001 00        		.string	""
 1836 0002 00        		.string	""
 1837 0003 00        		.string	""
 1838 0004 00        		.string	""
 1839 0005 00        		.string	""
 1840 0006 00        		.string	""
 1841 0007 00        		.string	""
 1842 0008 2A2B 2800 		.string	"*+("
 1843 000c 00        		.string	""
 1844 000d 00        		.string	""
 1845 000e 00        		.string	""
 1846 000f 00        		.string	""
 1847 0010 00        		.string	""
 1848 0011 00        		.string	""
 1849 0012 00        		.string	""
 1850 0013 00        		.string	""
 1851 0014 00        		.string	""
 1852 0015 00        		.string	""
 1853 0016 00        		.string	""
 1854 0017 00        		.string	""
 1855 0018 00        		.string	""
 1856 0019 00        		.string	""
 1857 001a 00        		.string	""
 1858 001b 2900      		.string	")"
 1859 001d 00        		.string	""
 1860 001e 00        		.string	""
 1861 001f 00        		.string	""
 1862 0020 2C1E 3420 		.ascii	",\0364 !\"$4&'%.6-78'\036\037 !\"#$%&336.78\037\004\005\006\007"
 1862      2122 2434 
 1862      2627 252E 
 1862      362D 3738 
 1862      271E 1F20 
 1863 0045 0809 0A0B 		.ascii	"\b\t\n\013\f\r\016\017\020\021\022\023\024\025\026\027\030\031"
 1863      0C0D 0E0F 
 1863      1011 1213 
 1863      1415 1617 
 1863      1819 
 1864 0057 1A1B 1C1D 		.ascii	"\032\033\034\035/10#-5\004\005\006\007\b\t\n\013\f\r\016\017"
 1864      2F31 3023 
 1864      2D35 0405 
 1864      0607 0809 
 1864      0A0B 0C0D 
 1865 006d 1011 1213 		.ascii	"\020\021\022\023\024\025\026\027\030\031\032\033\034\035/105"
 1865      1415 1617 
 1865      1819 1A1B 
 1865      1C1D 2F31 
 1865      3035 
 1866 007f 4C        		.ascii	"L"
 1867               	.global	ascii_to_qwerty_shift_lut
 1868               		.section	.progmem.data.ascii_to_qwerty_shift_lut,"a"
 1871               	ascii_to_qwerty_shift_lut:
 1872 0000 00        		.byte	0
 1873 0001 00        		.byte	0
 1874 0002 00        		.byte	0
 1875 0003 00        		.byte	0
 1876 0004 00        		.byte	0
 1877 0005 00        		.byte	0
 1878 0006 00        		.byte	0
 1879 0007 00        		.byte	0
 1880 0008 00        		.byte	0
 1881 0009 00        		.byte	0
 1882 000a 00        		.byte	0
 1883 000b 00        		.byte	0
 1884 000c 00        		.byte	0
 1885 000d 00        		.byte	0
 1886 000e 00        		.byte	0
 1887 000f 00        		.byte	0
 1888 0010 00        		.byte	0
 1889 0011 00        		.byte	0
 1890 0012 00        		.byte	0
 1891 0013 00        		.byte	0
 1892 0014 00        		.byte	0
 1893 0015 00        		.byte	0
 1894 0016 00        		.byte	0
 1895 0017 00        		.byte	0
 1896 0018 00        		.byte	0
 1897 0019 00        		.byte	0
 1898 001a 00        		.byte	0
 1899 001b 00        		.byte	0
 1900 001c 00        		.byte	0
 1901 001d 00        		.byte	0
 1902 001e 00        		.byte	0
 1903 001f 00        		.byte	0
 1904 0020 00        		.byte	0
 1905 0021 01        		.byte	1
 1906 0022 01        		.byte	1
 1907 0023 01        		.byte	1
 1908 0024 01        		.byte	1
 1909 0025 01        		.byte	1
 1910 0026 01        		.byte	1
 1911 0027 00        		.byte	0
 1912 0028 01        		.byte	1
 1913 0029 01        		.byte	1
 1914 002a 01        		.byte	1
 1915 002b 01        		.byte	1
 1916 002c 00        		.byte	0
 1917 002d 00        		.byte	0
 1918 002e 00        		.byte	0
 1919 002f 00        		.byte	0
 1920 0030 00        		.byte	0
 1921 0031 00        		.byte	0
 1922 0032 00        		.byte	0
 1923 0033 00        		.byte	0
 1924 0034 00        		.byte	0
 1925 0035 00        		.byte	0
 1926 0036 00        		.byte	0
 1927 0037 00        		.byte	0
 1928 0038 00        		.byte	0
 1929 0039 00        		.byte	0
 1930 003a 01        		.byte	1
 1931 003b 00        		.byte	0
 1932 003c 01        		.byte	1
 1933 003d 00        		.byte	0
 1934 003e 01        		.byte	1
 1935 003f 01        		.byte	1
 1936 0040 01        		.byte	1
 1937 0041 01        		.byte	1
 1938 0042 01        		.byte	1
 1939 0043 01        		.byte	1
 1940 0044 01        		.byte	1
 1941 0045 01        		.byte	1
 1942 0046 01        		.byte	1
 1943 0047 01        		.byte	1
 1944 0048 01        		.byte	1
 1945 0049 01        		.byte	1
 1946 004a 01        		.byte	1
 1947 004b 01        		.byte	1
 1948 004c 01        		.byte	1
 1949 004d 01        		.byte	1
 1950 004e 01        		.byte	1
 1951 004f 01        		.byte	1
 1952 0050 01        		.byte	1
 1953 0051 01        		.byte	1
 1954 0052 01        		.byte	1
 1955 0053 01        		.byte	1
 1956 0054 01        		.byte	1
 1957 0055 01        		.byte	1
 1958 0056 01        		.byte	1
 1959 0057 01        		.byte	1
 1960 0058 01        		.byte	1
 1961 0059 01        		.byte	1
 1962 005a 01        		.byte	1
 1963 005b 00        		.byte	0
 1964 005c 00        		.byte	0
 1965 005d 00        		.byte	0
 1966 005e 01        		.byte	1
 1967 005f 01        		.byte	1
 1968 0060 00        		.byte	0
 1969 0061 00        		.byte	0
 1970 0062 00        		.byte	0
 1971 0063 00        		.byte	0
 1972 0064 00        		.byte	0
 1973 0065 00        		.byte	0
 1974 0066 00        		.byte	0
 1975 0067 00        		.byte	0
 1976 0068 00        		.byte	0
 1977 0069 00        		.byte	0
 1978 006a 00        		.byte	0
 1979 006b 00        		.byte	0
 1980 006c 00        		.byte	0
 1981 006d 00        		.byte	0
 1982 006e 00        		.byte	0
 1983 006f 00        		.byte	0
 1984 0070 00        		.byte	0
 1985 0071 00        		.byte	0
 1986 0072 00        		.byte	0
 1987 0073 00        		.byte	0
 1988 0074 00        		.byte	0
 1989 0075 00        		.byte	0
 1990 0076 00        		.byte	0
 1991 0077 00        		.byte	0
 1992 0078 00        		.byte	0
 1993 0079 00        		.byte	0
 1994 007a 00        		.byte	0
 1995 007b 01        		.byte	1
 1996 007c 01        		.byte	1
 1997 007d 01        		.byte	1
 1998 007e 01        		.byte	1
 1999 007f 00        		.byte	0
 2000               		.section	.bss.scs_timer,"aw",@nobits
 2003               	scs_timer:
 2004 0000 0000      		.zero	2
 2005               		.section	.bss.shift_interrupted,"aw",@nobits
 2008               	shift_interrupted:
 2009 0000 0000      		.zero	2
 2010               		.text
 2011               	.Letext0:
 2012               		.file 3 "/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/stdint.h"
 2013               		.file 4 "/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/lib/avr-gcc/9/gcc/avr/9.3.0/include/stddef.h"
 2014               		.file 5 "./tmk_core/common/keyboard.h"
 2015               		.file 6 "./tmk_core/common/action.h"
 2016               		.file 7 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 2017               		.file 8 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 2018               		.file 9 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 2019               		.file 10 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/HostStandardReq.h"
 2020               		.file 11 "/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/stdio.h"
 2021               		.file 12 "./tmk_core/common/report.h"
 2022               		.file 13 "./tmk_core/common/host.h"
 2023               		.file 14 "./tmk_core/common/debug.h"
 2024               		.file 15 "quantum/keycode_config.h"
 2025               		.file 16 "./tmk_core/common/keycode.h"
 2026               		.file 17 "quantum/quantum_keycodes.h"
 2027               		.file 18 "quantum/keymap.h"
 2028               		.file 19 "quantum/light_ws2812.h"
 2029               		.file 20 "quantum/rgblight.h"
 2030               		.file 21 "./tmk_core/common/action_layer.h"
 2031               		.file 22 "./tmk_core/common/timer.h"
 2032               		.file 23 "./tmk_core/common/action_util.h"
 2033               		.file 24 "/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/stdlib.h"
 2034               		.file 25 "./quantum/process_keycode/process_tap_dance.h"
 2035               		.file 26 "./tmk_core/common/backlight.h"
 2036               		.file 27 "quantum/quantum.h"
 2037               		.file 28 "./quantum/process_keycode/process_leader.h"
 2038               		.file 29 "./tmk_core/common/eeconfig.h"
 2039               		.file 30 "./tmk_core/common/bootloader.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 quantum.c
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//cc5mvWEv.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//cc5mvWEv.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//cc5mvWEv.s:4      *ABS*:000000000000003f __SREG__
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//cc5mvWEv.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//cc5mvWEv.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//cc5mvWEv.s:12     .text.do_code16:0000000000000000 do_code16
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//cc5mvWEv.s:146    .text.register_code16:0000000000000000 register_code16
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//cc5mvWEv.s:180    .text.unregister_code16:0000000000000000 unregister_code16
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//cc5mvWEv.s:221    .text.process_action_kb:0000000000000000 process_action_kb
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//cc5mvWEv.s:243    .text.process_record_user:0000000000000000 process_record_user
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//cc5mvWEv.s:265    .text.process_record_kb:0000000000000000 process_record_kb
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//cc5mvWEv.s:285    .text.reset_keyboard:0000000000000000 reset_keyboard
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//cc5mvWEv.s:330    .text.process_record_quantum:0000000000000000 process_record_quantum
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//cc5mvWEv.s:2008   .bss.shift_interrupted:0000000000000000 shift_interrupted
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//cc5mvWEv.s:2003   .bss.scs_timer:0000000000000000 scs_timer
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//cc5mvWEv.s:968    .text.send_string:0000000000000000 send_string
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//cc5mvWEv.s:1833   .progmem.data.ascii_to_qwerty_keycode_lut:0000000000000000 ascii_to_qwerty_keycode_lut
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//cc5mvWEv.s:1871   .progmem.data.ascii_to_qwerty_shift_lut:0000000000000000 ascii_to_qwerty_shift_lut
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//cc5mvWEv.s:1117   .text.update_tri_layer:0000000000000000 update_tri_layer
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//cc5mvWEv.s:1235   .text.tap_random_base64:0000000000000000 tap_random_base64
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//cc5mvWEv.s:1367   .text.matrix_scan_quantum:0000000000000000 matrix_scan_quantum
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//cc5mvWEv.s:1387   .text.backlight_init_ports:0000000000000000 backlight_init_ports
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//cc5mvWEv.s:1424   .text.matrix_init_quantum:0000000000000000 matrix_init_quantum
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//cc5mvWEv.s:1444   .text.backlight_set:0000000000000000 backlight_set
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//cc5mvWEv.s:1524   .text.send_nibble:0000000000000000 send_nibble
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//cc5mvWEv.s:1593   .text.send_byte:0000000000000000 send_byte
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//cc5mvWEv.s:1633   .text.send_word:0000000000000000 send_word
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//cc5mvWEv.s:1668   .text.send_dword:0000000000000000 send_dword
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//cc5mvWEv.s:1711   .text.api_send_unicode:0000000000000000 api_send_unicode
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//cc5mvWEv.s:1729   .text.led_set_user:0000000000000000 led_set_user
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//cc5mvWEv.s:1747   .text.led_set_kb:0000000000000000 led_set_kb
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//cc5mvWEv.s:1766   .text.led_init_ports:0000000000000000 led_init_ports
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//cc5mvWEv.s:1783   .text.led_set:0000000000000000 led_set
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//cc5mvWEv.s:1802   .text.startup_user:0000000000000000 startup_user
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//cc5mvWEv.s:1817   .text.shutdown_user:0000000000000000 shutdown_user

UNDEFINED SYMBOLS
register_code
unregister_code
clear_keyboard
bootloader_jump
disable_action_cache
layer_switch_get_layer
update_source_layers_cache
keymap_key_to_keycode
process_tap_dance
process_leader
read_source_layers_cache
__tablejump2__
eeconfig_is_enabled
eeconfig_init
eeconfig_read_keymap
keymap_config
debug_config
rgblight_toggle
rgblight_step
rgblight_increase_hue
rgblight_decrease_hue
rgblight_increase_sat
rgblight_decrease_sat
rgblight_increase_val
rgblight_decrease_val
eeconfig_update_keymap
timer_read
register_mods
timer_elapsed
unregister_mods
layer_state
layer_on
layer_off
matrix_scan_tap_dance
matrix_scan_kb
backlight_init
matrix_init_kb
__do_clear_bss
