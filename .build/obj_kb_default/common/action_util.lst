   1               		.file	"action_util.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.get_oneshot_locked_mods,"ax",@progbits
  11               	.global	get_oneshot_locked_mods
  13               	get_oneshot_locked_mods:
  14               	.LFB103:
  15               		.file 1 "./tmk_core/common/action_util.c"
   1:./tmk_core/common/action_util.c **** /*
   2:./tmk_core/common/action_util.c **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/action_util.c **** 
   4:./tmk_core/common/action_util.c **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/action_util.c **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/action_util.c **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/action_util.c **** (at your option) any later version.
   8:./tmk_core/common/action_util.c **** 
   9:./tmk_core/common/action_util.c **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/action_util.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/action_util.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/action_util.c **** GNU General Public License for more details.
  13:./tmk_core/common/action_util.c **** 
  14:./tmk_core/common/action_util.c **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/action_util.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/action_util.c **** */
  17:./tmk_core/common/action_util.c **** #include "host.h"
  18:./tmk_core/common/action_util.c **** #include "report.h"
  19:./tmk_core/common/action_util.c **** #include "debug.h"
  20:./tmk_core/common/action_util.c **** #include "action_util.h"
  21:./tmk_core/common/action_util.c **** #include "action_layer.h"
  22:./tmk_core/common/action_util.c **** #include "timer.h"
  23:./tmk_core/common/action_util.c **** #include "keycode_config.h"
  24:./tmk_core/common/action_util.c **** 
  25:./tmk_core/common/action_util.c **** extern keymap_config_t keymap_config;
  26:./tmk_core/common/action_util.c **** 
  27:./tmk_core/common/action_util.c **** 
  28:./tmk_core/common/action_util.c **** static inline void add_key_byte(uint8_t code);
  29:./tmk_core/common/action_util.c **** static inline void del_key_byte(uint8_t code);
  30:./tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
  31:./tmk_core/common/action_util.c **** static inline void add_key_bit(uint8_t code);
  32:./tmk_core/common/action_util.c **** static inline void del_key_bit(uint8_t code);
  33:./tmk_core/common/action_util.c **** #endif
  34:./tmk_core/common/action_util.c **** 
  35:./tmk_core/common/action_util.c **** static uint8_t real_mods = 0;
  36:./tmk_core/common/action_util.c **** static uint8_t weak_mods = 0;
  37:./tmk_core/common/action_util.c **** static uint8_t macro_mods = 0;
  38:./tmk_core/common/action_util.c **** 
  39:./tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
  40:./tmk_core/common/action_util.c **** #define RO_ADD(a, b) ((a + b) % KEYBOARD_REPORT_KEYS)
  41:./tmk_core/common/action_util.c **** #define RO_SUB(a, b) ((a - b + KEYBOARD_REPORT_KEYS) % KEYBOARD_REPORT_KEYS)
  42:./tmk_core/common/action_util.c **** #define RO_INC(a) RO_ADD(a, 1)
  43:./tmk_core/common/action_util.c **** #define RO_DEC(a) RO_SUB(a, 1)
  44:./tmk_core/common/action_util.c **** static int8_t cb_head = 0;
  45:./tmk_core/common/action_util.c **** static int8_t cb_tail = 0;
  46:./tmk_core/common/action_util.c **** static int8_t cb_count = 0;
  47:./tmk_core/common/action_util.c **** #endif
  48:./tmk_core/common/action_util.c **** 
  49:./tmk_core/common/action_util.c **** // TODO: pointer variable is not needed
  50:./tmk_core/common/action_util.c **** //report_keyboard_t keyboard_report = {};
  51:./tmk_core/common/action_util.c **** report_keyboard_t *keyboard_report = &(report_keyboard_t){};
  52:./tmk_core/common/action_util.c **** 
  53:./tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  54:./tmk_core/common/action_util.c **** static int8_t oneshot_mods = 0;
  55:./tmk_core/common/action_util.c **** static int8_t oneshot_locked_mods = 0;
  56:./tmk_core/common/action_util.c **** int8_t get_oneshot_locked_mods(void) { return oneshot_locked_mods; }
  16               		.loc 1 56 38 view -0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22               		.loc 1 56 40 view .LVU1
  23               		.loc 1 56 1 is_stmt 0 view .LVU2
  24 0000 8091 0000 		lds r24,oneshot_locked_mods
  25               	/* epilogue start */
  26 0004 0895      		ret
  27               		.cfi_endproc
  28               	.LFE103:
  30               		.section	.text.set_oneshot_locked_mods,"ax",@progbits
  31               	.global	set_oneshot_locked_mods
  33               	set_oneshot_locked_mods:
  34               	.LVL0:
  35               	.LFB104:
  57:./tmk_core/common/action_util.c **** void set_oneshot_locked_mods(int8_t mods) { oneshot_locked_mods = mods; }
  36               		.loc 1 57 43 is_stmt 1 view -0
  37               		.cfi_startproc
  38               	/* prologue: function */
  39               	/* frame size = 0 */
  40               	/* stack size = 0 */
  41               	.L__stack_usage = 0
  42               		.loc 1 57 45 view .LVU4
  43               		.loc 1 57 65 is_stmt 0 view .LVU5
  44 0000 8093 0000 		sts oneshot_locked_mods,r24
  45               	/* epilogue start */
  46               		.loc 1 57 1 view .LVU6
  47 0004 0895      		ret
  48               		.cfi_endproc
  49               	.LFE104:
  51               		.section	.text.clear_oneshot_locked_mods,"ax",@progbits
  52               	.global	clear_oneshot_locked_mods
  54               	clear_oneshot_locked_mods:
  55               	.LFB105:
  58:./tmk_core/common/action_util.c **** void clear_oneshot_locked_mods(void) { oneshot_locked_mods = 0; }
  56               		.loc 1 58 38 is_stmt 1 view -0
  57               		.cfi_startproc
  58               	/* prologue: function */
  59               	/* frame size = 0 */
  60               	/* stack size = 0 */
  61               	.L__stack_usage = 0
  62               		.loc 1 58 40 view .LVU8
  63               		.loc 1 58 60 is_stmt 0 view .LVU9
  64 0000 1092 0000 		sts oneshot_locked_mods,__zero_reg__
  65               	/* epilogue start */
  66               		.loc 1 58 1 view .LVU10
  67 0004 0895      		ret
  68               		.cfi_endproc
  69               	.LFE105:
  71               		.section	.text.get_oneshot_layer,"ax",@progbits
  72               	.global	get_oneshot_layer
  74               	get_oneshot_layer:
  75               	.LFB106:
  59:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  60:./tmk_core/common/action_util.c **** static int16_t oneshot_time = 0;
  61:./tmk_core/common/action_util.c **** inline bool has_oneshot_mods_timed_out() {
  62:./tmk_core/common/action_util.c ****   return TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT;
  63:./tmk_core/common/action_util.c **** }
  64:./tmk_core/common/action_util.c **** #endif
  65:./tmk_core/common/action_util.c **** #endif
  66:./tmk_core/common/action_util.c **** 
  67:./tmk_core/common/action_util.c **** /* oneshot layer */
  68:./tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  69:./tmk_core/common/action_util.c **** /* oneshot_layer_data bits
  70:./tmk_core/common/action_util.c **** * LLLL LSSS
  71:./tmk_core/common/action_util.c **** * where:
  72:./tmk_core/common/action_util.c **** *   L => are layer bits
  73:./tmk_core/common/action_util.c **** *   S => oneshot state bits
  74:./tmk_core/common/action_util.c **** */
  75:./tmk_core/common/action_util.c **** static int8_t oneshot_layer_data = 0;
  76:./tmk_core/common/action_util.c **** 
  77:./tmk_core/common/action_util.c **** inline uint8_t get_oneshot_layer(void) { return oneshot_layer_data >> 3; }
  76               		.loc 1 77 40 is_stmt 1 view -0
  77               		.cfi_startproc
  78               	/* prologue: function */
  79               	/* frame size = 0 */
  80               	/* stack size = 0 */
  81               	.L__stack_usage = 0
  82               		.loc 1 77 42 view .LVU12
  83               		.loc 1 77 68 is_stmt 0 view .LVU13
  84 0000 8091 0000 		lds r24,oneshot_layer_data
  85               		.loc 1 77 1 view .LVU14
  86 0004 8595      		asr r24
  87 0006 8595      		asr r24
  88 0008 8595      		asr r24
  89               	/* epilogue start */
  90 000a 0895      		ret
  91               		.cfi_endproc
  92               	.LFE106:
  94               		.section	.text.get_oneshot_layer_state,"ax",@progbits
  95               	.global	get_oneshot_layer_state
  97               	get_oneshot_layer_state:
  98               	.LFB107:
  78:./tmk_core/common/action_util.c **** inline uint8_t get_oneshot_layer_state(void) { return oneshot_layer_data & 0b111; }
  99               		.loc 1 78 46 is_stmt 1 view -0
 100               		.cfi_startproc
 101               	/* prologue: function */
 102               	/* frame size = 0 */
 103               	/* stack size = 0 */
 104               	.L__stack_usage = 0
 105               		.loc 1 78 48 view .LVU16
 106               		.loc 1 78 74 is_stmt 0 view .LVU17
 107 0000 8091 0000 		lds r24,oneshot_layer_data
 108               		.loc 1 78 1 view .LVU18
 109 0004 8770      		andi r24,lo8(7)
 110               	/* epilogue start */
 111 0006 0895      		ret
 112               		.cfi_endproc
 113               	.LFE107:
 115               		.section	.text.set_oneshot_layer,"ax",@progbits
 116               	.global	set_oneshot_layer
 118               	set_oneshot_layer:
 119               	.LVL1:
 120               	.LFB108:
  79:./tmk_core/common/action_util.c **** 
  80:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  81:./tmk_core/common/action_util.c **** static int16_t oneshot_layer_time = 0;
  82:./tmk_core/common/action_util.c **** inline bool has_oneshot_layer_timed_out() {
  83:./tmk_core/common/action_util.c ****     return TIMER_DIFF_16(timer_read(), oneshot_layer_time) >= ONESHOT_TIMEOUT &&
  84:./tmk_core/common/action_util.c ****         !(get_oneshot_layer_state() & ONESHOT_TOGGLED);
  85:./tmk_core/common/action_util.c **** }
  86:./tmk_core/common/action_util.c **** #endif
  87:./tmk_core/common/action_util.c **** 
  88:./tmk_core/common/action_util.c **** /* Oneshot layer */
  89:./tmk_core/common/action_util.c **** void set_oneshot_layer(uint8_t layer, uint8_t state)
  90:./tmk_core/common/action_util.c **** {
 121               		.loc 1 90 1 is_stmt 1 view -0
 122               		.cfi_startproc
 123               	/* prologue: function */
 124               	/* frame size = 0 */
 125               	/* stack size = 0 */
 126               	.L__stack_usage = 0
  91:./tmk_core/common/action_util.c ****     oneshot_layer_data = layer << 3 | state;
 127               		.loc 1 91 5 view .LVU20
 128               		.loc 1 91 32 is_stmt 0 view .LVU21
 129 0000 98E0      		ldi r25,lo8(8)
 130 0002 899F      		mul r24,r25
 131 0004 9001      		movw r18,r0
 132 0006 1124      		clr __zero_reg__
 133               		.loc 1 91 37 view .LVU22
 134 0008 622B      		or r22,r18
 135               	.LVL2:
 136               		.loc 1 91 24 view .LVU23
 137 000a 6093 0000 		sts oneshot_layer_data,r22
  92:./tmk_core/common/action_util.c ****     layer_on(layer);
 138               		.loc 1 92 5 is_stmt 1 view .LVU24
 139 000e 0C94 0000 		jmp layer_on
 140               	.LVL3:
 141               		.loc 1 92 5 is_stmt 0 view .LVU25
 142               		.cfi_endproc
 143               	.LFE108:
 145               		.section	.text.reset_oneshot_layer,"ax",@progbits
 146               	.global	reset_oneshot_layer
 148               	reset_oneshot_layer:
 149               	.LFB109:
  93:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  94:./tmk_core/common/action_util.c ****     oneshot_layer_time = timer_read();
  95:./tmk_core/common/action_util.c **** #endif
  96:./tmk_core/common/action_util.c **** }
  97:./tmk_core/common/action_util.c **** void reset_oneshot_layer(void) {
 150               		.loc 1 97 32 is_stmt 1 view -0
 151               		.cfi_startproc
 152               	/* prologue: function */
 153               	/* frame size = 0 */
 154               	/* stack size = 0 */
 155               	.L__stack_usage = 0
  98:./tmk_core/common/action_util.c ****     oneshot_layer_data = 0;
 156               		.loc 1 98 5 view .LVU27
 157               		.loc 1 98 24 is_stmt 0 view .LVU28
 158 0000 1092 0000 		sts oneshot_layer_data,__zero_reg__
 159               	/* epilogue start */
  99:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 100:./tmk_core/common/action_util.c ****     oneshot_layer_time = 0;
 101:./tmk_core/common/action_util.c **** #endif
 102:./tmk_core/common/action_util.c **** }
 160               		.loc 1 102 1 view .LVU29
 161 0004 0895      		ret
 162               		.cfi_endproc
 163               	.LFE109:
 165               		.section	.text.clear_oneshot_layer_state,"ax",@progbits
 166               	.global	clear_oneshot_layer_state
 168               	clear_oneshot_layer_state:
 169               	.LVL4:
 170               	.LFB110:
 103:./tmk_core/common/action_util.c **** void clear_oneshot_layer_state(oneshot_fullfillment_t state)
 104:./tmk_core/common/action_util.c **** {
 171               		.loc 1 104 1 is_stmt 1 view -0
 172               		.cfi_startproc
 173               	/* prologue: function */
 174               	/* frame size = 0 */
 175               	/* stack size = 0 */
 176               	.L__stack_usage = 0
 105:./tmk_core/common/action_util.c ****     uint8_t start_state = oneshot_layer_data;
 177               		.loc 1 105 5 view .LVU31
 178               		.loc 1 105 13 is_stmt 0 view .LVU32
 179 0000 9091 0000 		lds r25,oneshot_layer_data
 180               	.LVL5:
 106:./tmk_core/common/action_util.c ****     oneshot_layer_data &= ~state;
 181               		.loc 1 106 5 is_stmt 1 view .LVU33
 182               		.loc 1 106 24 is_stmt 0 view .LVU34
 183 0004 8095      		com r24
 184               	.LVL6:
 185               		.loc 1 106 24 view .LVU35
 186 0006 8923      		and r24,r25
 187               	.LVL7:
 188               		.loc 1 106 24 view .LVU36
 189 0008 8093 0000 		sts oneshot_layer_data,r24
 107:./tmk_core/common/action_util.c ****     if (!get_oneshot_layer_state() && start_state != oneshot_layer_data) {
 190               		.loc 1 107 5 is_stmt 1 view .LVU37
 191               	.LBB8:
 192               	.LBI8:
  78:./tmk_core/common/action_util.c **** 
 193               		.loc 1 78 16 view .LVU38
 194               	.LBB9:
  78:./tmk_core/common/action_util.c **** 
 195               		.loc 1 78 48 view .LVU39
  78:./tmk_core/common/action_util.c **** 
 196               		.loc 1 78 74 is_stmt 0 view .LVU40
 197 000c 282F      		mov r18,r24
 198 000e 2770      		andi r18,lo8(7)
 199               	.LBE9:
 200               	.LBE8:
 201               		.loc 1 107 8 view .LVU41
 202 0010 01F4      		brne .L8
 203               		.loc 1 107 51 discriminator 1 view .LVU42
 204 0012 282F      		mov r18,r24
 205 0014 082E      		mov __tmp_reg__,r24
 206 0016 000C      		lsl r0
 207 0018 330B      		sbc r19,r19
 208               		.loc 1 107 36 discriminator 1 view .LVU43
 209 001a 9217      		cp r25,r18
 210 001c 1306      		cpc __zero_reg__,r19
 211 001e 01F0      		breq .L8
 108:./tmk_core/common/action_util.c ****         layer_off(get_oneshot_layer());
 212               		.loc 1 108 9 is_stmt 1 view .LVU44
 213               	.LBB10:
 214               	.LBI10:
  77:./tmk_core/common/action_util.c **** inline uint8_t get_oneshot_layer_state(void) { return oneshot_layer_data & 0b111; }
 215               		.loc 1 77 16 view .LVU45
 216               	.LBB11:
  77:./tmk_core/common/action_util.c **** inline uint8_t get_oneshot_layer_state(void) { return oneshot_layer_data & 0b111; }
 217               		.loc 1 77 42 view .LVU46
 218               	.LBE11:
 219               	.LBE10:
 220               		.loc 1 108 9 is_stmt 0 view .LVU47
 221 0020 8595      		asr r24
 222 0022 8595      		asr r24
 223 0024 8595      		asr r24
 224 0026 0C94 0000 		jmp layer_off
 225               	.LVL8:
 226               	.L8:
 227               	/* epilogue start */
 109:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 110:./tmk_core/common/action_util.c ****     oneshot_layer_time = 0;
 111:./tmk_core/common/action_util.c **** #endif
 112:./tmk_core/common/action_util.c ****     }
 113:./tmk_core/common/action_util.c **** }
 228               		.loc 1 113 1 view .LVU48
 229 002a 0895      		ret
 230               		.cfi_endproc
 231               	.LFE110:
 233               		.section	.text.is_oneshot_layer_active,"ax",@progbits
 234               	.global	is_oneshot_layer_active
 236               	is_oneshot_layer_active:
 237               	.LFB111:
 114:./tmk_core/common/action_util.c **** bool is_oneshot_layer_active(void)
 115:./tmk_core/common/action_util.c **** {
 238               		.loc 1 115 1 is_stmt 1 view -0
 239               		.cfi_startproc
 240               	/* prologue: function */
 241               	/* frame size = 0 */
 242               	/* stack size = 0 */
 243               	.L__stack_usage = 0
 116:./tmk_core/common/action_util.c ****     return get_oneshot_layer_state();
 244               		.loc 1 116 5 view .LVU50
 245               	.LBB12:
 246               	.LBI12:
  78:./tmk_core/common/action_util.c **** 
 247               		.loc 1 78 16 view .LVU51
 248               	.LBB13:
  78:./tmk_core/common/action_util.c **** 
 249               		.loc 1 78 48 view .LVU52
  78:./tmk_core/common/action_util.c **** 
 250               		.loc 1 78 74 is_stmt 0 view .LVU53
 251 0000 9091 0000 		lds r25,oneshot_layer_data
 252 0004 9770      		andi r25,lo8(7)
 253               	.LBE13:
 254               	.LBE12:
 255               		.loc 1 116 12 view .LVU54
 256 0006 81E0      		ldi r24,lo8(1)
 257 0008 01F4      		brne .L11
 258 000a 80E0      		ldi r24,0
 259               	.L11:
 260               	/* epilogue start */
 117:./tmk_core/common/action_util.c **** }
 261               		.loc 1 117 1 view .LVU55
 262 000c 0895      		ret
 263               		.cfi_endproc
 264               	.LFE111:
 266               		.section	.text.add_key,"ax",@progbits
 267               	.global	add_key
 269               	add_key:
 270               	.LVL9:
 271               	.LFB113:
 118:./tmk_core/common/action_util.c **** #endif
 119:./tmk_core/common/action_util.c **** 
 120:./tmk_core/common/action_util.c **** void send_keyboard_report(void) {
 121:./tmk_core/common/action_util.c ****     keyboard_report->mods  = real_mods;
 122:./tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
 123:./tmk_core/common/action_util.c ****     keyboard_report->mods |= macro_mods;
 124:./tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 125:./tmk_core/common/action_util.c ****     if (oneshot_mods) {
 126:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 127:./tmk_core/common/action_util.c ****         if (has_oneshot_mods_timed_out()) {
 128:./tmk_core/common/action_util.c ****             dprintf("Oneshot: timeout\n");
 129:./tmk_core/common/action_util.c ****             clear_oneshot_mods();
 130:./tmk_core/common/action_util.c ****         }
 131:./tmk_core/common/action_util.c **** #endif
 132:./tmk_core/common/action_util.c ****         keyboard_report->mods |= oneshot_mods;
 133:./tmk_core/common/action_util.c ****         if (has_anykey()) {
 134:./tmk_core/common/action_util.c ****             clear_oneshot_mods();
 135:./tmk_core/common/action_util.c ****         }
 136:./tmk_core/common/action_util.c ****     }
 137:./tmk_core/common/action_util.c **** 
 138:./tmk_core/common/action_util.c **** #endif
 139:./tmk_core/common/action_util.c ****     host_keyboard_send(keyboard_report);
 140:./tmk_core/common/action_util.c **** }
 141:./tmk_core/common/action_util.c **** 
 142:./tmk_core/common/action_util.c **** /* key */
 143:./tmk_core/common/action_util.c **** void add_key(uint8_t key)
 144:./tmk_core/common/action_util.c **** {
 272               		.loc 1 144 1 is_stmt 1 view -0
 273               		.cfi_startproc
 274               	/* prologue: function */
 275               	/* frame size = 0 */
 276               	/* stack size = 0 */
 277               	.L__stack_usage = 0
 145:./tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 146:./tmk_core/common/action_util.c ****     if (keyboard_protocol && keymap_config.nkro) {
 278               		.loc 1 146 5 view .LVU57
 279               		.loc 1 146 8 is_stmt 0 view .LVU58
 280 0000 9091 0000 		lds r25,keyboard_protocol
 281 0004 9923      		tst r25
 282 0006 01F0      		breq .L13
 283               		.loc 1 146 27 discriminator 1 view .LVU59
 284 0008 9091 0000 		lds r25,keymap_config
 285 000c 97FF      		sbrs r25,7
 286 000e 00C0      		rjmp .L13
 147:./tmk_core/common/action_util.c ****         add_key_bit(key);
 287               		.loc 1 147 9 is_stmt 1 view .LVU60
 288               	.LVL10:
 289               	.LBB18:
 290               	.LBI18:
 148:./tmk_core/common/action_util.c ****         return;
 149:./tmk_core/common/action_util.c ****     }
 150:./tmk_core/common/action_util.c **** #endif
 151:./tmk_core/common/action_util.c ****     add_key_byte(key);
 152:./tmk_core/common/action_util.c **** }
 153:./tmk_core/common/action_util.c **** 
 154:./tmk_core/common/action_util.c **** void del_key(uint8_t key)
 155:./tmk_core/common/action_util.c **** {
 156:./tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 157:./tmk_core/common/action_util.c ****     if (keyboard_protocol && keymap_config.nkro) {
 158:./tmk_core/common/action_util.c ****         del_key_bit(key);
 159:./tmk_core/common/action_util.c ****         return;
 160:./tmk_core/common/action_util.c ****     }
 161:./tmk_core/common/action_util.c **** #endif
 162:./tmk_core/common/action_util.c ****     del_key_byte(key);
 163:./tmk_core/common/action_util.c **** }
 164:./tmk_core/common/action_util.c **** 
 165:./tmk_core/common/action_util.c **** void clear_keys(void)
 166:./tmk_core/common/action_util.c **** {
 167:./tmk_core/common/action_util.c ****     // not clear mods
 168:./tmk_core/common/action_util.c ****     for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 169:./tmk_core/common/action_util.c ****         keyboard_report->raw[i] = 0;
 170:./tmk_core/common/action_util.c ****     }
 171:./tmk_core/common/action_util.c **** }
 172:./tmk_core/common/action_util.c **** 
 173:./tmk_core/common/action_util.c **** 
 174:./tmk_core/common/action_util.c **** /* modifier */
 175:./tmk_core/common/action_util.c **** uint8_t get_mods(void) { return real_mods; }
 176:./tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 177:./tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 178:./tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 179:./tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 180:./tmk_core/common/action_util.c **** 
 181:./tmk_core/common/action_util.c **** /* weak modifier */
 182:./tmk_core/common/action_util.c **** uint8_t get_weak_mods(void) { return weak_mods; }
 183:./tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 184:./tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 185:./tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 186:./tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 187:./tmk_core/common/action_util.c **** 
 188:./tmk_core/common/action_util.c **** /* macro modifier */
 189:./tmk_core/common/action_util.c **** uint8_t get_macro_mods(void) { return macro_mods; }
 190:./tmk_core/common/action_util.c **** void add_macro_mods(uint8_t mods) { macro_mods |= mods; }
 191:./tmk_core/common/action_util.c **** void del_macro_mods(uint8_t mods) { macro_mods &= ~mods; }
 192:./tmk_core/common/action_util.c **** void set_macro_mods(uint8_t mods) { macro_mods = mods; }
 193:./tmk_core/common/action_util.c **** void clear_macro_mods(void) { macro_mods = 0; }
 194:./tmk_core/common/action_util.c **** 
 195:./tmk_core/common/action_util.c **** /* Oneshot modifier */
 196:./tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 197:./tmk_core/common/action_util.c **** void set_oneshot_mods(uint8_t mods)
 198:./tmk_core/common/action_util.c **** {
 199:./tmk_core/common/action_util.c ****     oneshot_mods = mods;
 200:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 201:./tmk_core/common/action_util.c ****     oneshot_time = timer_read();
 202:./tmk_core/common/action_util.c **** #endif
 203:./tmk_core/common/action_util.c **** }
 204:./tmk_core/common/action_util.c **** void clear_oneshot_mods(void)
 205:./tmk_core/common/action_util.c **** {
 206:./tmk_core/common/action_util.c ****     oneshot_mods = 0;
 207:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 208:./tmk_core/common/action_util.c ****     oneshot_time = 0;
 209:./tmk_core/common/action_util.c **** #endif
 210:./tmk_core/common/action_util.c **** }
 211:./tmk_core/common/action_util.c **** uint8_t get_oneshot_mods(void)
 212:./tmk_core/common/action_util.c **** {
 213:./tmk_core/common/action_util.c ****     return oneshot_mods;
 214:./tmk_core/common/action_util.c **** }
 215:./tmk_core/common/action_util.c **** #endif
 216:./tmk_core/common/action_util.c **** 
 217:./tmk_core/common/action_util.c **** /*
 218:./tmk_core/common/action_util.c ****  * inspect keyboard state
 219:./tmk_core/common/action_util.c ****  */
 220:./tmk_core/common/action_util.c **** uint8_t has_anykey(void)
 221:./tmk_core/common/action_util.c **** {
 222:./tmk_core/common/action_util.c ****     uint8_t cnt = 0;
 223:./tmk_core/common/action_util.c ****     for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 224:./tmk_core/common/action_util.c ****         if (keyboard_report->raw[i])
 225:./tmk_core/common/action_util.c ****             cnt++;
 226:./tmk_core/common/action_util.c ****     }
 227:./tmk_core/common/action_util.c ****     return cnt;
 228:./tmk_core/common/action_util.c **** }
 229:./tmk_core/common/action_util.c **** 
 230:./tmk_core/common/action_util.c **** uint8_t has_anymod(void)
 231:./tmk_core/common/action_util.c **** {
 232:./tmk_core/common/action_util.c ****     return bitpop(real_mods);
 233:./tmk_core/common/action_util.c **** }
 234:./tmk_core/common/action_util.c **** 
 235:./tmk_core/common/action_util.c **** uint8_t get_first_key(void)
 236:./tmk_core/common/action_util.c **** {
 237:./tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 238:./tmk_core/common/action_util.c ****     if (keyboard_protocol && keymap_config.nkro) {
 239:./tmk_core/common/action_util.c ****         uint8_t i = 0;
 240:./tmk_core/common/action_util.c ****         for (; i < KEYBOARD_REPORT_BITS && !keyboard_report->nkro.bits[i]; i++)
 241:./tmk_core/common/action_util.c ****             ;
 242:./tmk_core/common/action_util.c ****         return i<<3 | biton(keyboard_report->nkro.bits[i]);
 243:./tmk_core/common/action_util.c ****     }
 244:./tmk_core/common/action_util.c **** #endif
 245:./tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 246:./tmk_core/common/action_util.c ****     uint8_t i = cb_head;
 247:./tmk_core/common/action_util.c ****     do {
 248:./tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] != 0) {
 249:./tmk_core/common/action_util.c ****             break;
 250:./tmk_core/common/action_util.c ****         }
 251:./tmk_core/common/action_util.c ****         i = RO_INC(i);
 252:./tmk_core/common/action_util.c ****     } while (i != cb_tail);
 253:./tmk_core/common/action_util.c ****     return keyboard_report->keys[i];
 254:./tmk_core/common/action_util.c **** #else
 255:./tmk_core/common/action_util.c ****     return keyboard_report->keys[0];
 256:./tmk_core/common/action_util.c **** #endif
 257:./tmk_core/common/action_util.c **** }
 258:./tmk_core/common/action_util.c **** 
 259:./tmk_core/common/action_util.c **** 
 260:./tmk_core/common/action_util.c **** 
 261:./tmk_core/common/action_util.c **** /* local functions */
 262:./tmk_core/common/action_util.c **** static inline void add_key_byte(uint8_t code)
 263:./tmk_core/common/action_util.c **** {
 264:./tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 265:./tmk_core/common/action_util.c ****     int8_t i = cb_head;
 266:./tmk_core/common/action_util.c ****     int8_t empty = -1;
 267:./tmk_core/common/action_util.c ****     if (cb_count) {
 268:./tmk_core/common/action_util.c ****         do {
 269:./tmk_core/common/action_util.c ****             if (keyboard_report->keys[i] == code) {
 270:./tmk_core/common/action_util.c ****                 return;
 271:./tmk_core/common/action_util.c ****             }
 272:./tmk_core/common/action_util.c ****             if (empty == -1 && keyboard_report->keys[i] == 0) {
 273:./tmk_core/common/action_util.c ****                 empty = i;
 274:./tmk_core/common/action_util.c ****             }
 275:./tmk_core/common/action_util.c ****             i = RO_INC(i);
 276:./tmk_core/common/action_util.c ****         } while (i != cb_tail);
 277:./tmk_core/common/action_util.c ****         if (i == cb_tail) {
 278:./tmk_core/common/action_util.c ****             if (cb_tail == cb_head) {
 279:./tmk_core/common/action_util.c ****                 // buffer is full
 280:./tmk_core/common/action_util.c ****                 if (empty == -1) {
 281:./tmk_core/common/action_util.c ****                     // pop head when has no empty space
 282:./tmk_core/common/action_util.c ****                     cb_head = RO_INC(cb_head);
 283:./tmk_core/common/action_util.c ****                     cb_count--;
 284:./tmk_core/common/action_util.c ****                 }
 285:./tmk_core/common/action_util.c ****                 else {
 286:./tmk_core/common/action_util.c ****                     // left shift when has empty space
 287:./tmk_core/common/action_util.c ****                     uint8_t offset = 1;
 288:./tmk_core/common/action_util.c ****                     i = RO_INC(empty);
 289:./tmk_core/common/action_util.c ****                     do {
 290:./tmk_core/common/action_util.c ****                         if (keyboard_report->keys[i] != 0) {
 291:./tmk_core/common/action_util.c ****                             keyboard_report->keys[empty] = keyboard_report->keys[i];
 292:./tmk_core/common/action_util.c ****                             keyboard_report->keys[i] = 0;
 293:./tmk_core/common/action_util.c ****                             empty = RO_INC(empty);
 294:./tmk_core/common/action_util.c ****                         }
 295:./tmk_core/common/action_util.c ****                         else {
 296:./tmk_core/common/action_util.c ****                             offset++;
 297:./tmk_core/common/action_util.c ****                         }
 298:./tmk_core/common/action_util.c ****                         i = RO_INC(i);
 299:./tmk_core/common/action_util.c ****                     } while (i != cb_tail);
 300:./tmk_core/common/action_util.c ****                     cb_tail = RO_SUB(cb_tail, offset);
 301:./tmk_core/common/action_util.c ****                 }
 302:./tmk_core/common/action_util.c ****             }
 303:./tmk_core/common/action_util.c ****         }
 304:./tmk_core/common/action_util.c ****     }
 305:./tmk_core/common/action_util.c ****     // add to tail
 306:./tmk_core/common/action_util.c ****     keyboard_report->keys[cb_tail] = code;
 307:./tmk_core/common/action_util.c ****     cb_tail = RO_INC(cb_tail);
 308:./tmk_core/common/action_util.c ****     cb_count++;
 309:./tmk_core/common/action_util.c **** #else
 310:./tmk_core/common/action_util.c ****     int8_t i = 0;
 311:./tmk_core/common/action_util.c ****     int8_t empty = -1;
 312:./tmk_core/common/action_util.c ****     for (; i < KEYBOARD_REPORT_KEYS; i++) {
 313:./tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 314:./tmk_core/common/action_util.c ****             break;
 315:./tmk_core/common/action_util.c ****         }
 316:./tmk_core/common/action_util.c ****         if (empty == -1 && keyboard_report->keys[i] == 0) {
 317:./tmk_core/common/action_util.c ****             empty = i;
 318:./tmk_core/common/action_util.c ****         }
 319:./tmk_core/common/action_util.c ****     }
 320:./tmk_core/common/action_util.c ****     if (i == KEYBOARD_REPORT_KEYS) {
 321:./tmk_core/common/action_util.c ****         if (empty != -1) {
 322:./tmk_core/common/action_util.c ****             keyboard_report->keys[empty] = code;
 323:./tmk_core/common/action_util.c ****         }
 324:./tmk_core/common/action_util.c ****     }
 325:./tmk_core/common/action_util.c **** #endif
 326:./tmk_core/common/action_util.c **** }
 327:./tmk_core/common/action_util.c **** 
 328:./tmk_core/common/action_util.c **** static inline void del_key_byte(uint8_t code)
 329:./tmk_core/common/action_util.c **** {
 330:./tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 331:./tmk_core/common/action_util.c ****     uint8_t i = cb_head;
 332:./tmk_core/common/action_util.c ****     if (cb_count) {
 333:./tmk_core/common/action_util.c ****         do {
 334:./tmk_core/common/action_util.c ****             if (keyboard_report->keys[i] == code) {
 335:./tmk_core/common/action_util.c ****                 keyboard_report->keys[i] = 0;
 336:./tmk_core/common/action_util.c ****                 cb_count--;
 337:./tmk_core/common/action_util.c ****                 if (cb_count == 0) {
 338:./tmk_core/common/action_util.c ****                     // reset head and tail
 339:./tmk_core/common/action_util.c ****                     cb_tail = cb_head = 0;
 340:./tmk_core/common/action_util.c ****                 }
 341:./tmk_core/common/action_util.c ****                 if (i == RO_DEC(cb_tail)) {
 342:./tmk_core/common/action_util.c ****                     // left shift when next to tail
 343:./tmk_core/common/action_util.c ****                     do {
 344:./tmk_core/common/action_util.c ****                         cb_tail = RO_DEC(cb_tail);
 345:./tmk_core/common/action_util.c ****                         if (keyboard_report->keys[RO_DEC(cb_tail)] != 0) {
 346:./tmk_core/common/action_util.c ****                             break;
 347:./tmk_core/common/action_util.c ****                         }
 348:./tmk_core/common/action_util.c ****                     } while (cb_tail != cb_head);
 349:./tmk_core/common/action_util.c ****                 }
 350:./tmk_core/common/action_util.c ****                 break;
 351:./tmk_core/common/action_util.c ****             }
 352:./tmk_core/common/action_util.c ****             i = RO_INC(i);
 353:./tmk_core/common/action_util.c ****         } while (i != cb_tail);
 354:./tmk_core/common/action_util.c ****     }
 355:./tmk_core/common/action_util.c **** #else
 356:./tmk_core/common/action_util.c ****     for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
 357:./tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 358:./tmk_core/common/action_util.c ****             keyboard_report->keys[i] = 0;
 359:./tmk_core/common/action_util.c ****         }
 360:./tmk_core/common/action_util.c ****     }
 361:./tmk_core/common/action_util.c **** #endif
 362:./tmk_core/common/action_util.c **** }
 363:./tmk_core/common/action_util.c **** 
 364:./tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 365:./tmk_core/common/action_util.c **** static inline void add_key_bit(uint8_t code)
 291               		.loc 1 365 20 view .LVU61
 292               	.LBB19:
 366:./tmk_core/common/action_util.c **** {
 367:./tmk_core/common/action_util.c ****     if ((code>>3) < KEYBOARD_REPORT_BITS) {
 293               		.loc 1 367 5 view .LVU62
 294               		.loc 1 367 19 is_stmt 0 view .LVU63
 295 0010 E82F      		mov r30,r24
 296 0012 E695      		lsr r30
 297 0014 E695      		lsr r30
 298 0016 E695      		lsr r30
 299               		.loc 1 367 8 view .LVU64
 300 0018 EF31      		cpi r30,lo8(31)
 301 001a 01F0      		breq .L12
 368:./tmk_core/common/action_util.c ****         keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
 302               		.loc 1 368 9 is_stmt 1 view .LVU65
 303               		.loc 1 368 45 is_stmt 0 view .LVU66
 304 001c 2091 0000 		lds r18,keyboard_report
 305 0020 3091 0000 		lds r19,keyboard_report+1
 306 0024 E20F      		add r30,r18
 307 0026 F32F      		mov r31,r19
 308 0028 F11D      		adc r31,__zero_reg__
 309               		.loc 1 368 56 view .LVU67
 310 002a 8770      		andi r24,lo8(7)
 311               	.LVL11:
 312               		.loc 1 368 49 view .LVU68
 313 002c 21E0      		ldi r18,lo8(1)
 314 002e 30E0      		ldi r19,0
 315 0030 00C0      		rjmp 2f
 316               		1:
 317 0032 220F      		lsl r18
 318               		2:
 319 0034 8A95      		dec r24
 320 0036 02F4      		brpl 1b
 321               		.loc 1 368 45 view .LVU69
 322 0038 8181      		ldd r24,Z+1
 323 003a 822B      		or r24,r18
 324 003c 8183      		std Z+1,r24
 325 003e 0895      		ret
 326               	.LVL12:
 327               	.L13:
 328               		.loc 1 368 45 view .LVU70
 329               	.LBE19:
 330               	.LBE18:
 331               	.LBB20:
 332               	.LBB21:
 313:./tmk_core/common/action_util.c ****             break;
 333               		.loc 1 313 28 view .LVU71
 334 0040 2091 0000 		lds r18,keyboard_report
 335 0044 3091 0000 		lds r19,keyboard_report+1
 336 0048 F901      		movw r30,r18
 337 004a 3296      		adiw r30,2
 338 004c 9FEF      		ldi r25,lo8(-1)
 339 004e 40E0      		ldi r20,0
 340               	.L16:
 341               	.LVL13:
 313:./tmk_core/common/action_util.c ****             break;
 342               		.loc 1 313 9 is_stmt 1 view .LVU72
 313:./tmk_core/common/action_util.c ****             break;
 343               		.loc 1 313 34 is_stmt 0 view .LVU73
 344 0050 5191      		ld r21,Z+
 313:./tmk_core/common/action_util.c ****             break;
 345               		.loc 1 313 12 view .LVU74
 346 0052 8517      		cp r24,r21
 347 0054 01F0      		breq .L12
 316:./tmk_core/common/action_util.c ****             empty = i;
 348               		.loc 1 316 9 is_stmt 1 view .LVU75
 316:./tmk_core/common/action_util.c ****             empty = i;
 349               		.loc 1 316 12 is_stmt 0 view .LVU76
 350 0056 9F3F      		cpi r25,lo8(-1)
 351 0058 01F4      		brne .L15
 316:./tmk_core/common/action_util.c ****             empty = i;
 352               		.loc 1 316 25 view .LVU77
 353 005a 5111      		cpse r21,__zero_reg__
 354 005c 00C0      		rjmp .L15
 355 005e 942F      		mov r25,r20
 356               	.LVL14:
 357               	.L15:
 312:./tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 358               		.loc 1 312 38 is_stmt 1 view .LVU78
 359 0060 4F5F      		subi r20,lo8(-(1))
 360               	.LVL15:
 312:./tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 361               		.loc 1 312 12 view .LVU79
 312:./tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 362               		.loc 1 312 5 is_stmt 0 view .LVU80
 363 0062 4E31      		cpi r20,lo8(30)
 364 0064 01F4      		brne .L16
 320:./tmk_core/common/action_util.c ****         if (empty != -1) {
 365               		.loc 1 320 5 is_stmt 1 view .LVU81
 321:./tmk_core/common/action_util.c ****             keyboard_report->keys[empty] = code;
 366               		.loc 1 321 9 view .LVU82
 321:./tmk_core/common/action_util.c ****             keyboard_report->keys[empty] = code;
 367               		.loc 1 321 12 is_stmt 0 view .LVU83
 368 0066 9F3F      		cpi r25,lo8(-1)
 369 0068 01F4      		brne .L18
 370               	.LVL16:
 371               	.L12:
 372               	/* epilogue start */
 321:./tmk_core/common/action_util.c ****             keyboard_report->keys[empty] = code;
 373               		.loc 1 321 12 view .LVU84
 374               	.LBE21:
 375               	.LBE20:
 152:./tmk_core/common/action_util.c **** 
 376               		.loc 1 152 1 view .LVU85
 377 006a 0895      		ret
 378               	.LVL17:
 379               	.L18:
 380               	.LBB23:
 381               	.LBB22:
 322:./tmk_core/common/action_util.c ****         }
 382               		.loc 1 322 13 is_stmt 1 view .LVU86
 322:./tmk_core/common/action_util.c ****         }
 383               		.loc 1 322 42 is_stmt 0 view .LVU87
 384 006c 290F      		add r18,r25
 385 006e 311D      		adc r19,__zero_reg__
 386 0070 97FD      		sbrc r25,7
 387 0072 3A95      		dec r19
 388 0074 F901      		movw r30,r18
 389 0076 8283      		std Z+2,r24
 390               	.LVL18:
 322:./tmk_core/common/action_util.c ****         }
 391               		.loc 1 322 42 view .LVU88
 392 0078 0895      		ret
 393               	.LBE22:
 394               	.LBE23:
 395               		.cfi_endproc
 396               	.LFE113:
 398               		.section	.text.del_key,"ax",@progbits
 399               	.global	del_key
 401               	del_key:
 402               	.LVL19:
 403               	.LFB114:
 155:./tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 404               		.loc 1 155 1 is_stmt 1 view -0
 405               		.cfi_startproc
 406               	/* prologue: function */
 407               	/* frame size = 0 */
 408               	/* stack size = 0 */
 409               	.L__stack_usage = 0
 157:./tmk_core/common/action_util.c ****         del_key_bit(key);
 410               		.loc 1 157 5 view .LVU90
 157:./tmk_core/common/action_util.c ****         del_key_bit(key);
 411               		.loc 1 157 8 is_stmt 0 view .LVU91
 412 0000 9091 0000 		lds r25,keyboard_protocol
 413 0004 9923      		tst r25
 414 0006 01F0      		breq .L28
 157:./tmk_core/common/action_util.c ****         del_key_bit(key);
 415               		.loc 1 157 27 discriminator 1 view .LVU92
 416 0008 9091 0000 		lds r25,keymap_config
 417 000c 97FF      		sbrs r25,7
 418 000e 00C0      		rjmp .L28
 158:./tmk_core/common/action_util.c ****         return;
 419               		.loc 1 158 9 is_stmt 1 view .LVU93
 420               	.LVL20:
 421               	.LBB29:
 422               	.LBI29:
 369:./tmk_core/common/action_util.c ****     } else {
 370:./tmk_core/common/action_util.c ****         dprintf("add_key_bit: can't add: %02X\n", code);
 371:./tmk_core/common/action_util.c ****     }
 372:./tmk_core/common/action_util.c **** }
 373:./tmk_core/common/action_util.c **** 
 374:./tmk_core/common/action_util.c **** static inline void del_key_bit(uint8_t code)
 423               		.loc 1 374 20 view .LVU94
 424               	.LBB30:
 375:./tmk_core/common/action_util.c **** {
 376:./tmk_core/common/action_util.c ****     if ((code>>3) < KEYBOARD_REPORT_BITS) {
 425               		.loc 1 376 5 view .LVU95
 426               		.loc 1 376 19 is_stmt 0 view .LVU96
 427 0010 E82F      		mov r30,r24
 428 0012 E695      		lsr r30
 429 0014 E695      		lsr r30
 430 0016 E695      		lsr r30
 431               		.loc 1 376 8 view .LVU97
 432 0018 EF31      		cpi r30,lo8(31)
 433 001a 01F0      		breq .L27
 377:./tmk_core/common/action_util.c ****         keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
 434               		.loc 1 377 9 is_stmt 1 view .LVU98
 435               		.loc 1 377 45 is_stmt 0 view .LVU99
 436 001c 2091 0000 		lds r18,keyboard_report
 437 0020 3091 0000 		lds r19,keyboard_report+1
 438 0024 E20F      		add r30,r18
 439 0026 F32F      		mov r31,r19
 440 0028 F11D      		adc r31,__zero_reg__
 441               		.loc 1 377 58 view .LVU100
 442 002a 8770      		andi r24,lo8(7)
 443               	.LVL21:
 444               		.loc 1 377 51 view .LVU101
 445 002c 21E0      		ldi r18,lo8(1)
 446 002e 30E0      		ldi r19,0
 447 0030 A901      		movw r20,r18
 448 0032 00C0      		rjmp 2f
 449               		1:
 450 0034 440F      		lsl r20
 451 0036 551F      		rol r21
 452               		2:
 453 0038 8A95      		dec r24
 454 003a 02F4      		brpl 1b
 455 003c CA01      		movw r24,r20
 456               		.loc 1 377 45 view .LVU102
 457 003e 8095      		com r24
 458 0040 9181      		ldd r25,Z+1
 459 0042 8923      		and r24,r25
 460 0044 8183      		std Z+1,r24
 461 0046 0895      		ret
 462               	.LVL22:
 463               	.L28:
 464               		.loc 1 377 45 view .LVU103
 465               	.LBE30:
 466               	.LBE29:
 467               	.LBB31:
 468               	.LBB32:
 357:./tmk_core/common/action_util.c ****             keyboard_report->keys[i] = 0;
 469               		.loc 1 357 28 view .LVU104
 470 0048 2091 0000 		lds r18,keyboard_report
 471 004c 3091 0000 		lds r19,keyboard_report+1
 472 0050 F901      		movw r30,r18
 473 0052 3296      		adiw r30,2
 474 0054 205E      		subi r18,-32
 475 0056 3F4F      		sbci r19,-1
 476               	.L32:
 477               	.LVL23:
 357:./tmk_core/common/action_util.c ****             keyboard_report->keys[i] = 0;
 478               		.loc 1 357 9 is_stmt 1 view .LVU105
 357:./tmk_core/common/action_util.c ****             keyboard_report->keys[i] = 0;
 479               		.loc 1 357 34 is_stmt 0 view .LVU106
 480 0058 9191      		ld r25,Z+
 481               	.LVL24:
 357:./tmk_core/common/action_util.c ****             keyboard_report->keys[i] = 0;
 482               		.loc 1 357 12 view .LVU107
 483 005a 8913      		cpse r24,r25
 484 005c 00C0      		rjmp .L31
 358:./tmk_core/common/action_util.c ****         }
 485               		.loc 1 358 13 is_stmt 1 view .LVU108
 358:./tmk_core/common/action_util.c ****         }
 486               		.loc 1 358 38 is_stmt 0 view .LVU109
 487 005e DF01      		movw r26,r30
 488 0060 1197      		sbiw r26,1
 489 0062 1C92      		st X,__zero_reg__
 490               	.L31:
 356:./tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 491               		.loc 1 356 51 is_stmt 1 view .LVU110
 492               	.LVL25:
 356:./tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 493               		.loc 1 356 25 view .LVU111
 356:./tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 494               		.loc 1 356 5 is_stmt 0 view .LVU112
 495 0064 E217      		cp r30,r18
 496 0066 F307      		cpc r31,r19
 497 0068 01F4      		brne .L32
 498               	.LVL26:
 499               	.L27:
 500               	/* epilogue start */
 356:./tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 501               		.loc 1 356 5 view .LVU113
 502               	.LBE32:
 503               	.LBE31:
 163:./tmk_core/common/action_util.c **** 
 504               		.loc 1 163 1 view .LVU114
 505 006a 0895      		ret
 506               		.cfi_endproc
 507               	.LFE114:
 509               		.section	.text.clear_keys,"ax",@progbits
 510               	.global	clear_keys
 512               	clear_keys:
 513               	.LFB115:
 166:./tmk_core/common/action_util.c ****     // not clear mods
 514               		.loc 1 166 1 is_stmt 1 view -0
 515               		.cfi_startproc
 516               	/* prologue: function */
 517               	/* frame size = 0 */
 518               	/* stack size = 0 */
 519               	.L__stack_usage = 0
 168:./tmk_core/common/action_util.c ****         keyboard_report->raw[i] = 0;
 520               		.loc 1 168 5 view .LVU116
 521               	.LBB33:
 168:./tmk_core/common/action_util.c ****         keyboard_report->raw[i] = 0;
 522               		.loc 1 168 10 view .LVU117
 523               	.LVL27:
 168:./tmk_core/common/action_util.c ****         keyboard_report->raw[i] = 0;
 524               		.loc 1 168 24 view .LVU118
 525               	.LBE33:
 166:./tmk_core/common/action_util.c ****     // not clear mods
 526               		.loc 1 166 1 is_stmt 0 view .LVU119
 527 0000 81E0      		ldi r24,lo8(1)
 528 0002 90E0      		ldi r25,0
 529               	.LVL28:
 530               	.L41:
 531               	.LBB34:
 169:./tmk_core/common/action_util.c ****     }
 532               		.loc 1 169 9 is_stmt 1 discriminator 3 view .LVU120
 169:./tmk_core/common/action_util.c ****     }
 533               		.loc 1 169 24 is_stmt 0 discriminator 3 view .LVU121
 534 0004 E091 0000 		lds r30,keyboard_report
 535 0008 F091 0000 		lds r31,keyboard_report+1
 169:./tmk_core/common/action_util.c ****     }
 536               		.loc 1 169 33 discriminator 3 view .LVU122
 537 000c E80F      		add r30,r24
 538 000e F91F      		adc r31,r25
 539 0010 1082      		st Z,__zero_reg__
 168:./tmk_core/common/action_util.c ****         keyboard_report->raw[i] = 0;
 540               		.loc 1 168 50 is_stmt 1 discriminator 3 view .LVU123
 541               	.LVL29:
 168:./tmk_core/common/action_util.c ****         keyboard_report->raw[i] = 0;
 542               		.loc 1 168 24 discriminator 3 view .LVU124
 543 0012 0196      		adiw r24,1
 544               	.LVL30:
 168:./tmk_core/common/action_util.c ****         keyboard_report->raw[i] = 0;
 545               		.loc 1 168 5 is_stmt 0 discriminator 3 view .LVU125
 546 0014 8032      		cpi r24,32
 547 0016 9105      		cpc r25,__zero_reg__
 548 0018 01F4      		brne .L41
 549               	/* epilogue start */
 550               	.LBE34:
 171:./tmk_core/common/action_util.c **** 
 551               		.loc 1 171 1 view .LVU126
 552 001a 0895      		ret
 553               		.cfi_endproc
 554               	.LFE115:
 556               		.section	.text.get_mods,"ax",@progbits
 557               	.global	get_mods
 559               	get_mods:
 560               	.LFB116:
 175:./tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 561               		.loc 1 175 24 is_stmt 1 view -0
 562               		.cfi_startproc
 563               	/* prologue: function */
 564               	/* frame size = 0 */
 565               	/* stack size = 0 */
 566               	.L__stack_usage = 0
 175:./tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 567               		.loc 1 175 26 view .LVU128
 175:./tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 568               		.loc 1 175 1 is_stmt 0 view .LVU129
 569 0000 8091 0000 		lds r24,real_mods
 570               	/* epilogue start */
 571 0004 0895      		ret
 572               		.cfi_endproc
 573               	.LFE116:
 575               		.section	.text.add_mods,"ax",@progbits
 576               	.global	add_mods
 578               	add_mods:
 579               	.LVL31:
 580               	.LFB117:
 176:./tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 581               		.loc 1 176 29 is_stmt 1 view -0
 582               		.cfi_startproc
 583               	/* prologue: function */
 584               	/* frame size = 0 */
 585               	/* stack size = 0 */
 586               	.L__stack_usage = 0
 176:./tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 587               		.loc 1 176 31 view .LVU131
 176:./tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 588               		.loc 1 176 41 is_stmt 0 view .LVU132
 589 0000 9091 0000 		lds r25,real_mods
 590 0004 982B      		or r25,r24
 591 0006 9093 0000 		sts real_mods,r25
 592               	/* epilogue start */
 176:./tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 593               		.loc 1 176 1 view .LVU133
 594 000a 0895      		ret
 595               		.cfi_endproc
 596               	.LFE117:
 598               		.section	.text.del_mods,"ax",@progbits
 599               	.global	del_mods
 601               	del_mods:
 602               	.LVL32:
 603               	.LFB118:
 177:./tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 604               		.loc 1 177 29 is_stmt 1 view -0
 605               		.cfi_startproc
 606               	/* prologue: function */
 607               	/* frame size = 0 */
 608               	/* stack size = 0 */
 609               	.L__stack_usage = 0
 177:./tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 610               		.loc 1 177 31 view .LVU135
 177:./tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 611               		.loc 1 177 41 is_stmt 0 view .LVU136
 612 0000 982F      		mov r25,r24
 613 0002 9095      		com r25
 614 0004 8091 0000 		lds r24,real_mods
 615               	.LVL33:
 177:./tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 616               		.loc 1 177 41 view .LVU137
 617 0008 8923      		and r24,r25
 618 000a 8093 0000 		sts real_mods,r24
 619               	/* epilogue start */
 177:./tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 620               		.loc 1 177 1 view .LVU138
 621 000e 0895      		ret
 622               		.cfi_endproc
 623               	.LFE118:
 625               		.section	.text.set_mods,"ax",@progbits
 626               	.global	set_mods
 628               	set_mods:
 629               	.LVL34:
 630               	.LFB119:
 178:./tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 631               		.loc 1 178 29 is_stmt 1 view -0
 632               		.cfi_startproc
 633               	/* prologue: function */
 634               	/* frame size = 0 */
 635               	/* stack size = 0 */
 636               	.L__stack_usage = 0
 178:./tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 637               		.loc 1 178 31 view .LVU140
 178:./tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 638               		.loc 1 178 41 is_stmt 0 view .LVU141
 639 0000 8093 0000 		sts real_mods,r24
 640               	/* epilogue start */
 178:./tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 641               		.loc 1 178 1 view .LVU142
 642 0004 0895      		ret
 643               		.cfi_endproc
 644               	.LFE119:
 646               		.section	.text.clear_mods,"ax",@progbits
 647               	.global	clear_mods
 649               	clear_mods:
 650               	.LFB120:
 179:./tmk_core/common/action_util.c **** 
 651               		.loc 1 179 23 is_stmt 1 view -0
 652               		.cfi_startproc
 653               	/* prologue: function */
 654               	/* frame size = 0 */
 655               	/* stack size = 0 */
 656               	.L__stack_usage = 0
 179:./tmk_core/common/action_util.c **** 
 657               		.loc 1 179 25 view .LVU144
 179:./tmk_core/common/action_util.c **** 
 658               		.loc 1 179 35 is_stmt 0 view .LVU145
 659 0000 1092 0000 		sts real_mods,__zero_reg__
 660               	/* epilogue start */
 179:./tmk_core/common/action_util.c **** 
 661               		.loc 1 179 1 view .LVU146
 662 0004 0895      		ret
 663               		.cfi_endproc
 664               	.LFE120:
 666               		.section	.text.get_weak_mods,"ax",@progbits
 667               	.global	get_weak_mods
 669               	get_weak_mods:
 670               	.LFB121:
 182:./tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 671               		.loc 1 182 29 is_stmt 1 view -0
 672               		.cfi_startproc
 673               	/* prologue: function */
 674               	/* frame size = 0 */
 675               	/* stack size = 0 */
 676               	.L__stack_usage = 0
 182:./tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 677               		.loc 1 182 31 view .LVU148
 182:./tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 678               		.loc 1 182 1 is_stmt 0 view .LVU149
 679 0000 8091 0000 		lds r24,weak_mods
 680               	/* epilogue start */
 681 0004 0895      		ret
 682               		.cfi_endproc
 683               	.LFE121:
 685               		.section	.text.add_weak_mods,"ax",@progbits
 686               	.global	add_weak_mods
 688               	add_weak_mods:
 689               	.LVL35:
 690               	.LFB122:
 183:./tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 691               		.loc 1 183 34 is_stmt 1 view -0
 692               		.cfi_startproc
 693               	/* prologue: function */
 694               	/* frame size = 0 */
 695               	/* stack size = 0 */
 696               	.L__stack_usage = 0
 183:./tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 697               		.loc 1 183 36 view .LVU151
 183:./tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 698               		.loc 1 183 46 is_stmt 0 view .LVU152
 699 0000 9091 0000 		lds r25,weak_mods
 700 0004 982B      		or r25,r24
 701 0006 9093 0000 		sts weak_mods,r25
 702               	/* epilogue start */
 183:./tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 703               		.loc 1 183 1 view .LVU153
 704 000a 0895      		ret
 705               		.cfi_endproc
 706               	.LFE122:
 708               		.section	.text.del_weak_mods,"ax",@progbits
 709               	.global	del_weak_mods
 711               	del_weak_mods:
 712               	.LVL36:
 713               	.LFB123:
 184:./tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 714               		.loc 1 184 34 is_stmt 1 view -0
 715               		.cfi_startproc
 716               	/* prologue: function */
 717               	/* frame size = 0 */
 718               	/* stack size = 0 */
 719               	.L__stack_usage = 0
 184:./tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 720               		.loc 1 184 36 view .LVU155
 184:./tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 721               		.loc 1 184 46 is_stmt 0 view .LVU156
 722 0000 982F      		mov r25,r24
 723 0002 9095      		com r25
 724 0004 8091 0000 		lds r24,weak_mods
 725               	.LVL37:
 184:./tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 726               		.loc 1 184 46 view .LVU157
 727 0008 8923      		and r24,r25
 728 000a 8093 0000 		sts weak_mods,r24
 729               	/* epilogue start */
 184:./tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 730               		.loc 1 184 1 view .LVU158
 731 000e 0895      		ret
 732               		.cfi_endproc
 733               	.LFE123:
 735               		.section	.text.set_weak_mods,"ax",@progbits
 736               	.global	set_weak_mods
 738               	set_weak_mods:
 739               	.LVL38:
 740               	.LFB124:
 185:./tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 741               		.loc 1 185 34 is_stmt 1 view -0
 742               		.cfi_startproc
 743               	/* prologue: function */
 744               	/* frame size = 0 */
 745               	/* stack size = 0 */
 746               	.L__stack_usage = 0
 185:./tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 747               		.loc 1 185 36 view .LVU160
 185:./tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 748               		.loc 1 185 46 is_stmt 0 view .LVU161
 749 0000 8093 0000 		sts weak_mods,r24
 750               	/* epilogue start */
 185:./tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 751               		.loc 1 185 1 view .LVU162
 752 0004 0895      		ret
 753               		.cfi_endproc
 754               	.LFE124:
 756               		.section	.text.clear_weak_mods,"ax",@progbits
 757               	.global	clear_weak_mods
 759               	clear_weak_mods:
 760               	.LFB125:
 186:./tmk_core/common/action_util.c **** 
 761               		.loc 1 186 28 is_stmt 1 view -0
 762               		.cfi_startproc
 763               	/* prologue: function */
 764               	/* frame size = 0 */
 765               	/* stack size = 0 */
 766               	.L__stack_usage = 0
 186:./tmk_core/common/action_util.c **** 
 767               		.loc 1 186 30 view .LVU164
 186:./tmk_core/common/action_util.c **** 
 768               		.loc 1 186 40 is_stmt 0 view .LVU165
 769 0000 1092 0000 		sts weak_mods,__zero_reg__
 770               	/* epilogue start */
 186:./tmk_core/common/action_util.c **** 
 771               		.loc 1 186 1 view .LVU166
 772 0004 0895      		ret
 773               		.cfi_endproc
 774               	.LFE125:
 776               		.section	.text.get_macro_mods,"ax",@progbits
 777               	.global	get_macro_mods
 779               	get_macro_mods:
 780               	.LFB126:
 189:./tmk_core/common/action_util.c **** void add_macro_mods(uint8_t mods) { macro_mods |= mods; }
 781               		.loc 1 189 30 is_stmt 1 view -0
 782               		.cfi_startproc
 783               	/* prologue: function */
 784               	/* frame size = 0 */
 785               	/* stack size = 0 */
 786               	.L__stack_usage = 0
 189:./tmk_core/common/action_util.c **** void add_macro_mods(uint8_t mods) { macro_mods |= mods; }
 787               		.loc 1 189 32 view .LVU168
 189:./tmk_core/common/action_util.c **** void add_macro_mods(uint8_t mods) { macro_mods |= mods; }
 788               		.loc 1 189 1 is_stmt 0 view .LVU169
 789 0000 8091 0000 		lds r24,macro_mods
 790               	/* epilogue start */
 791 0004 0895      		ret
 792               		.cfi_endproc
 793               	.LFE126:
 795               		.section	.text.add_macro_mods,"ax",@progbits
 796               	.global	add_macro_mods
 798               	add_macro_mods:
 799               	.LVL39:
 800               	.LFB127:
 190:./tmk_core/common/action_util.c **** void del_macro_mods(uint8_t mods) { macro_mods &= ~mods; }
 801               		.loc 1 190 35 is_stmt 1 view -0
 802               		.cfi_startproc
 803               	/* prologue: function */
 804               	/* frame size = 0 */
 805               	/* stack size = 0 */
 806               	.L__stack_usage = 0
 190:./tmk_core/common/action_util.c **** void del_macro_mods(uint8_t mods) { macro_mods &= ~mods; }
 807               		.loc 1 190 37 view .LVU171
 190:./tmk_core/common/action_util.c **** void del_macro_mods(uint8_t mods) { macro_mods &= ~mods; }
 808               		.loc 1 190 48 is_stmt 0 view .LVU172
 809 0000 9091 0000 		lds r25,macro_mods
 810 0004 982B      		or r25,r24
 811 0006 9093 0000 		sts macro_mods,r25
 812               	/* epilogue start */
 190:./tmk_core/common/action_util.c **** void del_macro_mods(uint8_t mods) { macro_mods &= ~mods; }
 813               		.loc 1 190 1 view .LVU173
 814 000a 0895      		ret
 815               		.cfi_endproc
 816               	.LFE127:
 818               		.section	.text.del_macro_mods,"ax",@progbits
 819               	.global	del_macro_mods
 821               	del_macro_mods:
 822               	.LVL40:
 823               	.LFB128:
 191:./tmk_core/common/action_util.c **** void set_macro_mods(uint8_t mods) { macro_mods = mods; }
 824               		.loc 1 191 35 is_stmt 1 view -0
 825               		.cfi_startproc
 826               	/* prologue: function */
 827               	/* frame size = 0 */
 828               	/* stack size = 0 */
 829               	.L__stack_usage = 0
 191:./tmk_core/common/action_util.c **** void set_macro_mods(uint8_t mods) { macro_mods = mods; }
 830               		.loc 1 191 37 view .LVU175
 191:./tmk_core/common/action_util.c **** void set_macro_mods(uint8_t mods) { macro_mods = mods; }
 831               		.loc 1 191 48 is_stmt 0 view .LVU176
 832 0000 982F      		mov r25,r24
 833 0002 9095      		com r25
 834 0004 8091 0000 		lds r24,macro_mods
 835               	.LVL41:
 191:./tmk_core/common/action_util.c **** void set_macro_mods(uint8_t mods) { macro_mods = mods; }
 836               		.loc 1 191 48 view .LVU177
 837 0008 8923      		and r24,r25
 838 000a 8093 0000 		sts macro_mods,r24
 839               	/* epilogue start */
 191:./tmk_core/common/action_util.c **** void set_macro_mods(uint8_t mods) { macro_mods = mods; }
 840               		.loc 1 191 1 view .LVU178
 841 000e 0895      		ret
 842               		.cfi_endproc
 843               	.LFE128:
 845               		.section	.text.set_macro_mods,"ax",@progbits
 846               	.global	set_macro_mods
 848               	set_macro_mods:
 849               	.LVL42:
 850               	.LFB129:
 192:./tmk_core/common/action_util.c **** void clear_macro_mods(void) { macro_mods = 0; }
 851               		.loc 1 192 35 is_stmt 1 view -0
 852               		.cfi_startproc
 853               	/* prologue: function */
 854               	/* frame size = 0 */
 855               	/* stack size = 0 */
 856               	.L__stack_usage = 0
 192:./tmk_core/common/action_util.c **** void clear_macro_mods(void) { macro_mods = 0; }
 857               		.loc 1 192 37 view .LVU180
 192:./tmk_core/common/action_util.c **** void clear_macro_mods(void) { macro_mods = 0; }
 858               		.loc 1 192 48 is_stmt 0 view .LVU181
 859 0000 8093 0000 		sts macro_mods,r24
 860               	/* epilogue start */
 192:./tmk_core/common/action_util.c **** void clear_macro_mods(void) { macro_mods = 0; }
 861               		.loc 1 192 1 view .LVU182
 862 0004 0895      		ret
 863               		.cfi_endproc
 864               	.LFE129:
 866               		.section	.text.clear_macro_mods,"ax",@progbits
 867               	.global	clear_macro_mods
 869               	clear_macro_mods:
 870               	.LFB130:
 193:./tmk_core/common/action_util.c **** 
 871               		.loc 1 193 29 is_stmt 1 view -0
 872               		.cfi_startproc
 873               	/* prologue: function */
 874               	/* frame size = 0 */
 875               	/* stack size = 0 */
 876               	.L__stack_usage = 0
 193:./tmk_core/common/action_util.c **** 
 877               		.loc 1 193 31 view .LVU184
 193:./tmk_core/common/action_util.c **** 
 878               		.loc 1 193 42 is_stmt 0 view .LVU185
 879 0000 1092 0000 		sts macro_mods,__zero_reg__
 880               	/* epilogue start */
 193:./tmk_core/common/action_util.c **** 
 881               		.loc 1 193 1 view .LVU186
 882 0004 0895      		ret
 883               		.cfi_endproc
 884               	.LFE130:
 886               		.section	.text.set_oneshot_mods,"ax",@progbits
 887               	.global	set_oneshot_mods
 889               	set_oneshot_mods:
 890               	.LVL43:
 891               	.LFB131:
 198:./tmk_core/common/action_util.c ****     oneshot_mods = mods;
 892               		.loc 1 198 1 is_stmt 1 view -0
 893               		.cfi_startproc
 894               	/* prologue: function */
 895               	/* frame size = 0 */
 896               	/* stack size = 0 */
 897               	.L__stack_usage = 0
 199:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 898               		.loc 1 199 5 view .LVU188
 199:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 899               		.loc 1 199 18 is_stmt 0 view .LVU189
 900 0000 8093 0000 		sts oneshot_mods,r24
 901               	/* epilogue start */
 203:./tmk_core/common/action_util.c **** void clear_oneshot_mods(void)
 902               		.loc 1 203 1 view .LVU190
 903 0004 0895      		ret
 904               		.cfi_endproc
 905               	.LFE131:
 907               		.section	.text.clear_oneshot_mods,"ax",@progbits
 908               	.global	clear_oneshot_mods
 910               	clear_oneshot_mods:
 911               	.LFB132:
 205:./tmk_core/common/action_util.c ****     oneshot_mods = 0;
 912               		.loc 1 205 1 is_stmt 1 view -0
 913               		.cfi_startproc
 914               	/* prologue: function */
 915               	/* frame size = 0 */
 916               	/* stack size = 0 */
 917               	.L__stack_usage = 0
 206:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 918               		.loc 1 206 5 view .LVU192
 206:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 919               		.loc 1 206 18 is_stmt 0 view .LVU193
 920 0000 1092 0000 		sts oneshot_mods,__zero_reg__
 921               	/* epilogue start */
 210:./tmk_core/common/action_util.c **** uint8_t get_oneshot_mods(void)
 922               		.loc 1 210 1 view .LVU194
 923 0004 0895      		ret
 924               		.cfi_endproc
 925               	.LFE132:
 927               		.section	.text.get_oneshot_mods,"ax",@progbits
 928               	.global	get_oneshot_mods
 930               	get_oneshot_mods:
 931               	.LFB133:
 212:./tmk_core/common/action_util.c ****     return oneshot_mods;
 932               		.loc 1 212 1 is_stmt 1 view -0
 933               		.cfi_startproc
 934               	/* prologue: function */
 935               	/* frame size = 0 */
 936               	/* stack size = 0 */
 937               	.L__stack_usage = 0
 213:./tmk_core/common/action_util.c **** }
 938               		.loc 1 213 5 view .LVU196
 214:./tmk_core/common/action_util.c **** #endif
 939               		.loc 1 214 1 is_stmt 0 view .LVU197
 940 0000 8091 0000 		lds r24,oneshot_mods
 941               	/* epilogue start */
 942 0004 0895      		ret
 943               		.cfi_endproc
 944               	.LFE133:
 946               		.section	.text.has_anykey,"ax",@progbits
 947               	.global	has_anykey
 949               	has_anykey:
 950               	.LFB134:
 221:./tmk_core/common/action_util.c ****     uint8_t cnt = 0;
 951               		.loc 1 221 1 is_stmt 1 view -0
 952               		.cfi_startproc
 953               	/* prologue: function */
 954               	/* frame size = 0 */
 955               	/* stack size = 0 */
 956               	.L__stack_usage = 0
 222:./tmk_core/common/action_util.c ****     for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 957               		.loc 1 222 5 view .LVU199
 958               	.LVL44:
 223:./tmk_core/common/action_util.c ****         if (keyboard_report->raw[i])
 959               		.loc 1 223 5 view .LVU200
 960               	.LBB35:
 223:./tmk_core/common/action_util.c ****         if (keyboard_report->raw[i])
 961               		.loc 1 223 10 view .LVU201
 223:./tmk_core/common/action_util.c ****         if (keyboard_report->raw[i])
 962               		.loc 1 223 25 view .LVU202
 224:./tmk_core/common/action_util.c ****             cnt++;
 963               		.loc 1 224 28 is_stmt 0 view .LVU203
 964 0000 2091 0000 		lds r18,keyboard_report
 965 0004 3091 0000 		lds r19,keyboard_report+1
 966 0008 F901      		movw r30,r18
 967 000a 3196      		adiw r30,1
 968 000c 205E      		subi r18,-32
 969 000e 3F4F      		sbci r19,-1
 970               	.LBE35:
 222:./tmk_core/common/action_util.c ****     for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 971               		.loc 1 222 13 view .LVU204
 972 0010 80E0      		ldi r24,0
 973               	.LVL45:
 974               	.L63:
 975               	.LBB36:
 224:./tmk_core/common/action_util.c ****             cnt++;
 976               		.loc 1 224 9 is_stmt 1 view .LVU205
 224:./tmk_core/common/action_util.c ****             cnt++;
 977               		.loc 1 224 33 is_stmt 0 view .LVU206
 978 0012 9191      		ld r25,Z+
 979               	.LVL46:
 224:./tmk_core/common/action_util.c ****             cnt++;
 980               		.loc 1 224 12 view .LVU207
 981 0014 9111      		cpse r25,__zero_reg__
 225:./tmk_core/common/action_util.c ****     }
 982               		.loc 1 225 13 is_stmt 1 view .LVU208
 225:./tmk_core/common/action_util.c ****     }
 983               		.loc 1 225 16 is_stmt 0 view .LVU209
 984 0016 8F5F      		subi r24,lo8(-(1))
 985               	.LVL47:
 986               	.L62:
 223:./tmk_core/common/action_util.c ****         if (keyboard_report->raw[i])
 987               		.loc 1 223 51 is_stmt 1 discriminator 2 view .LVU210
 223:./tmk_core/common/action_util.c ****         if (keyboard_report->raw[i])
 988               		.loc 1 223 25 discriminator 2 view .LVU211
 223:./tmk_core/common/action_util.c ****         if (keyboard_report->raw[i])
 989               		.loc 1 223 5 is_stmt 0 discriminator 2 view .LVU212
 990 0018 E217      		cp r30,r18
 991 001a F307      		cpc r31,r19
 992 001c 01F4      		brne .L63
 993               	/* epilogue start */
 223:./tmk_core/common/action_util.c ****         if (keyboard_report->raw[i])
 994               		.loc 1 223 5 discriminator 2 view .LVU213
 995               	.LBE36:
 228:./tmk_core/common/action_util.c **** 
 996               		.loc 1 228 1 view .LVU214
 997 001e 0895      		ret
 998               		.cfi_endproc
 999               	.LFE134:
 1001               		.section	.text.send_keyboard_report,"ax",@progbits
 1002               	.global	send_keyboard_report
 1004               	send_keyboard_report:
 1005               	.LFB112:
 120:./tmk_core/common/action_util.c ****     keyboard_report->mods  = real_mods;
 1006               		.loc 1 120 33 is_stmt 1 view -0
 1007               		.cfi_startproc
 1008               	/* prologue: function */
 1009               	/* frame size = 0 */
 1010               	/* stack size = 0 */
 1011               	.L__stack_usage = 0
 121:./tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
 1012               		.loc 1 121 5 view .LVU216
 121:./tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
 1013               		.loc 1 121 20 is_stmt 0 view .LVU217
 1014 0000 E091 0000 		lds r30,keyboard_report
 1015 0004 F091 0000 		lds r31,keyboard_report+1
 121:./tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
 1016               		.loc 1 121 28 view .LVU218
 1017 0008 8091 0000 		lds r24,real_mods
 1018 000c 8083      		st Z,r24
 122:./tmk_core/common/action_util.c ****     keyboard_report->mods |= macro_mods;
 1019               		.loc 1 122 5 is_stmt 1 view .LVU219
 122:./tmk_core/common/action_util.c ****     keyboard_report->mods |= macro_mods;
 1020               		.loc 1 122 27 is_stmt 0 view .LVU220
 1021 000e E091 0000 		lds r30,keyboard_report
 1022 0012 F091 0000 		lds r31,keyboard_report+1
 1023 0016 8081      		ld r24,Z
 1024 0018 9091 0000 		lds r25,weak_mods
 1025 001c 892B      		or r24,r25
 1026 001e 8083      		st Z,r24
 123:./tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 1027               		.loc 1 123 5 is_stmt 1 view .LVU221
 123:./tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 1028               		.loc 1 123 27 is_stmt 0 view .LVU222
 1029 0020 E091 0000 		lds r30,keyboard_report
 1030 0024 F091 0000 		lds r31,keyboard_report+1
 1031 0028 8081      		ld r24,Z
 1032 002a 9091 0000 		lds r25,macro_mods
 1033 002e 892B      		or r24,r25
 1034 0030 8083      		st Z,r24
 125:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 1035               		.loc 1 125 5 is_stmt 1 view .LVU223
 125:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 1036               		.loc 1 125 9 is_stmt 0 view .LVU224
 1037 0032 9091 0000 		lds r25,oneshot_mods
 125:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 1038               		.loc 1 125 8 view .LVU225
 1039 0036 9923      		tst r25
 1040 0038 01F0      		breq .L70
 132:./tmk_core/common/action_util.c ****         if (has_anykey()) {
 1041               		.loc 1 132 9 is_stmt 1 view .LVU226
 132:./tmk_core/common/action_util.c ****         if (has_anykey()) {
 1042               		.loc 1 132 31 is_stmt 0 view .LVU227
 1043 003a E091 0000 		lds r30,keyboard_report
 1044 003e F091 0000 		lds r31,keyboard_report+1
 1045 0042 8081      		ld r24,Z
 1046 0044 892B      		or r24,r25
 1047 0046 8083      		st Z,r24
 133:./tmk_core/common/action_util.c ****             clear_oneshot_mods();
 1048               		.loc 1 133 9 is_stmt 1 view .LVU228
 133:./tmk_core/common/action_util.c ****             clear_oneshot_mods();
 1049               		.loc 1 133 13 is_stmt 0 view .LVU229
 1050 0048 0E94 0000 		call has_anykey
 1051               	.LVL48:
 133:./tmk_core/common/action_util.c ****             clear_oneshot_mods();
 1052               		.loc 1 133 12 view .LVU230
 1053 004c 8111      		cpse r24,__zero_reg__
 134:./tmk_core/common/action_util.c ****         }
 1054               		.loc 1 134 13 is_stmt 1 view .LVU231
 1055               	.LBB39:
 1056               	.LBI39:
 204:./tmk_core/common/action_util.c **** {
 1057               		.loc 1 204 6 view .LVU232
 1058               	.LBB40:
 206:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 1059               		.loc 1 206 5 view .LVU233
 206:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 1060               		.loc 1 206 18 is_stmt 0 view .LVU234
 1061 004e 1092 0000 		sts oneshot_mods,__zero_reg__
 1062               	.L70:
 1063               	.LBE40:
 1064               	.LBE39:
 139:./tmk_core/common/action_util.c **** }
 1065               		.loc 1 139 5 is_stmt 1 view .LVU235
 1066 0052 8091 0000 		lds r24,keyboard_report
 1067 0056 9091 0000 		lds r25,keyboard_report+1
 1068 005a 0C94 0000 		jmp host_keyboard_send
 1069               	.LVL49:
 1070               		.cfi_endproc
 1071               	.LFE112:
 1073               		.section	.text.has_anymod,"ax",@progbits
 1074               	.global	has_anymod
 1076               	has_anymod:
 1077               	.LFB135:
 231:./tmk_core/common/action_util.c ****     return bitpop(real_mods);
 1078               		.loc 1 231 1 view -0
 1079               		.cfi_startproc
 1080               	/* prologue: function */
 1081               	/* frame size = 0 */
 1082               	/* stack size = 0 */
 1083               	.L__stack_usage = 0
 232:./tmk_core/common/action_util.c **** }
 1084               		.loc 1 232 5 view .LVU237
 232:./tmk_core/common/action_util.c **** }
 1085               		.loc 1 232 12 is_stmt 0 view .LVU238
 1086 0000 8091 0000 		lds r24,real_mods
 1087 0004 0C94 0000 		jmp bitpop
 1088               	.LVL50:
 1089               		.cfi_endproc
 1090               	.LFE135:
 1092               		.section	.text.get_first_key,"ax",@progbits
 1093               	.global	get_first_key
 1095               	get_first_key:
 1096               	.LFB136:
 236:./tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 1097               		.loc 1 236 1 is_stmt 1 view -0
 1098               		.cfi_startproc
 1099 0000 CF93      		push r28
 1100               	.LCFI0:
 1101               		.cfi_def_cfa_offset 3
 1102               		.cfi_offset 28, -2
 1103 0002 DF93      		push r29
 1104               	.LCFI1:
 1105               		.cfi_def_cfa_offset 4
 1106               		.cfi_offset 29, -3
 1107               	/* prologue: function */
 1108               	/* frame size = 0 */
 1109               	/* stack size = 2 */
 1110               	.L__stack_usage = 2
 238:./tmk_core/common/action_util.c ****         uint8_t i = 0;
 1111               		.loc 1 238 5 view .LVU240
 1112 0004 E091 0000 		lds r30,keyboard_report
 1113 0008 F091 0000 		lds r31,keyboard_report+1
 238:./tmk_core/common/action_util.c ****         uint8_t i = 0;
 1114               		.loc 1 238 8 is_stmt 0 view .LVU241
 1115 000c 8091 0000 		lds r24,keyboard_protocol
 1116 0010 8823      		tst r24
 1117 0012 01F0      		breq .L77
 238:./tmk_core/common/action_util.c ****         uint8_t i = 0;
 1118               		.loc 1 238 27 discriminator 1 view .LVU242
 1119 0014 8091 0000 		lds r24,keymap_config
 1120 0018 DF01      		movw r26,r30
 1121 001a 1196      		adiw r26,1
 1122               	.LBB41:
 239:./tmk_core/common/action_util.c ****         for (; i < KEYBOARD_REPORT_BITS && !keyboard_report->nkro.bits[i]; i++)
 1123               		.loc 1 239 17 discriminator 1 view .LVU243
 1124 001c C0E0      		ldi r28,0
 1125               	.LBE41:
 238:./tmk_core/common/action_util.c ****         uint8_t i = 0;
 1126               		.loc 1 238 27 discriminator 1 view .LVU244
 1127 001e 87FD      		sbrc r24,7
 1128 0020 00C0      		rjmp .L78
 1129               	.L77:
 255:./tmk_core/common/action_util.c **** #endif
 1130               		.loc 1 255 5 is_stmt 1 view .LVU245
 255:./tmk_core/common/action_util.c **** #endif
 1131               		.loc 1 255 33 is_stmt 0 view .LVU246
 1132 0022 8281      		ldd r24,Z+2
 1133 0024 00C0      		rjmp .L76
 1134               	.LVL51:
 1135               	.L80:
 1136               	.LBB42:
 241:./tmk_core/common/action_util.c ****         return i<<3 | biton(keyboard_report->nkro.bits[i]);
 1137               		.loc 1 241 13 is_stmt 1 discriminator 3 view .LVU247
 240:./tmk_core/common/action_util.c ****             ;
 1138               		.loc 1 240 76 discriminator 3 view .LVU248
 240:./tmk_core/common/action_util.c ****             ;
 1139               		.loc 1 240 77 is_stmt 0 discriminator 3 view .LVU249
 1140 0026 CF5F      		subi r28,lo8(-(1))
 1141               	.LVL52:
 240:./tmk_core/common/action_util.c ****             ;
 1142               		.loc 1 240 16 is_stmt 1 discriminator 3 view .LVU250
 240:./tmk_core/common/action_util.c ****             ;
 1143               		.loc 1 240 9 is_stmt 0 discriminator 3 view .LVU251
 1144 0028 CF31      		cpi r28,lo8(31)
 1145 002a 01F0      		breq .L79
 1146               	.LVL53:
 1147               	.L78:
 240:./tmk_core/common/action_util.c ****             ;
 1148               		.loc 1 240 71 discriminator 2 view .LVU252
 1149 002c 8D91      		ld r24,X+
 240:./tmk_core/common/action_util.c ****             ;
 1150               		.loc 1 240 41 discriminator 2 view .LVU253
 1151 002e 8823      		tst r24
 1152 0030 01F0      		breq .L80
 1153               	.L79:
 242:./tmk_core/common/action_util.c ****     }
 1154               		.loc 1 242 9 is_stmt 1 view .LVU254
 242:./tmk_core/common/action_util.c ****     }
 1155               		.loc 1 242 17 is_stmt 0 view .LVU255
 1156 0032 D0E0      		ldi r29,0
 242:./tmk_core/common/action_util.c ****     }
 1157               		.loc 1 242 23 view .LVU256
 1158 0034 EC0F      		add r30,r28
 1159 0036 FD1F      		adc r31,r29
 1160 0038 8181      		ldd r24,Z+1
 1161 003a 0E94 0000 		call biton
 1162               	.LVL54:
 242:./tmk_core/common/action_util.c ****     }
 1163               		.loc 1 242 17 view .LVU257
 1164 003e 93E0      		ldi r25,3
 1165               		1:
 1166 0040 CC0F      		lsl r28
 1167 0042 DD1F      		rol r29
 1168 0044 9A95      		dec r25
 1169 0046 01F4      		brne 1b
 1170               	.LVL55:
 242:./tmk_core/common/action_util.c ****     }
 1171               		.loc 1 242 21 view .LVU258
 1172 0048 8C2B      		or r24,r28
 1173               	.L76:
 1174               	/* epilogue start */
 242:./tmk_core/common/action_util.c ****     }
 1175               		.loc 1 242 21 view .LVU259
 1176               	.LBE42:
 257:./tmk_core/common/action_util.c **** 
 1177               		.loc 1 257 1 view .LVU260
 1178 004a DF91      		pop r29
 1179 004c CF91      		pop r28
 1180 004e 0895      		ret
 1181               		.cfi_endproc
 1182               	.LFE136:
 1184               		.section	.bss.oneshot_layer_data,"aw",@nobits
 1187               	oneshot_layer_data:
 1188 0000 00        		.zero	1
 1189               		.section	.bss.oneshot_locked_mods,"aw",@nobits
 1192               	oneshot_locked_mods:
 1193 0000 00        		.zero	1
 1194               		.section	.bss.oneshot_mods,"aw",@nobits
 1197               	oneshot_mods:
 1198 0000 00        		.zero	1
 1199               	.global	keyboard_report
 1200               		.section	.data.keyboard_report,"aw"
 1203               	keyboard_report:
 1204 0000 0000      		.word	__compound_literal.0
 1205               		.section	.bss.__compound_literal.0,"aw",@nobits
 1208               	__compound_literal.0:
 1209 0000 0000 0000 		.zero	32
 1209      0000 0000 
 1209      0000 0000 
 1209      0000 0000 
 1209      0000 0000 
 1210               		.section	.bss.macro_mods,"aw",@nobits
 1213               	macro_mods:
 1214 0000 00        		.zero	1
 1215               		.section	.bss.weak_mods,"aw",@nobits
 1218               	weak_mods:
 1219 0000 00        		.zero	1
 1220               		.section	.bss.real_mods,"aw",@nobits
 1223               	real_mods:
 1224 0000 00        		.zero	1
 1225               		.text
 1226               	.Letext0:
 1227               		.file 2 "/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/stdint.h"
 1228               		.file 3 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 1229               		.file 4 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 1230               		.file 5 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 1231               		.file 6 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/HostStandardReq.h"
 1232               		.file 7 "/opt/homebrew/Cellar/avr-gcc@9/9.3.0_3/avr/include/stdio.h"
 1233               		.file 8 "./tmk_core/common/report.h"
 1234               		.file 9 "./tmk_core/common/host.h"
 1235               		.file 10 "./tmk_core/common/debug.h"
 1236               		.file 11 "./tmk_core/common/action_util.h"
 1237               		.file 12 "./tmk_core/common/action.h"
 1238               		.file 13 "./tmk_core/common/action_layer.h"
 1239               		.file 14 "./tmk_core/common/timer.h"
 1240               		.file 15 "./quantum/keycode_config.h"
 1241               		.file 16 "./tmk_core/common/util.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action_util.c
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//ccfF6IdA.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//ccfF6IdA.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//ccfF6IdA.s:4      *ABS*:000000000000003f __SREG__
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//ccfF6IdA.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//ccfF6IdA.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//ccfF6IdA.s:13     .text.get_oneshot_locked_mods:0000000000000000 get_oneshot_locked_mods
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//ccfF6IdA.s:1192   .bss.oneshot_locked_mods:0000000000000000 oneshot_locked_mods
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//ccfF6IdA.s:33     .text.set_oneshot_locked_mods:0000000000000000 set_oneshot_locked_mods
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//ccfF6IdA.s:54     .text.clear_oneshot_locked_mods:0000000000000000 clear_oneshot_locked_mods
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//ccfF6IdA.s:74     .text.get_oneshot_layer:0000000000000000 get_oneshot_layer
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//ccfF6IdA.s:1187   .bss.oneshot_layer_data:0000000000000000 oneshot_layer_data
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//ccfF6IdA.s:97     .text.get_oneshot_layer_state:0000000000000000 get_oneshot_layer_state
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//ccfF6IdA.s:118    .text.set_oneshot_layer:0000000000000000 set_oneshot_layer
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//ccfF6IdA.s:148    .text.reset_oneshot_layer:0000000000000000 reset_oneshot_layer
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//ccfF6IdA.s:168    .text.clear_oneshot_layer_state:0000000000000000 clear_oneshot_layer_state
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//ccfF6IdA.s:236    .text.is_oneshot_layer_active:0000000000000000 is_oneshot_layer_active
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//ccfF6IdA.s:269    .text.add_key:0000000000000000 add_key
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//ccfF6IdA.s:1203   .data.keyboard_report:0000000000000000 keyboard_report
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//ccfF6IdA.s:401    .text.del_key:0000000000000000 del_key
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//ccfF6IdA.s:512    .text.clear_keys:0000000000000000 clear_keys
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//ccfF6IdA.s:559    .text.get_mods:0000000000000000 get_mods
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//ccfF6IdA.s:1223   .bss.real_mods:0000000000000000 real_mods
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//ccfF6IdA.s:578    .text.add_mods:0000000000000000 add_mods
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//ccfF6IdA.s:601    .text.del_mods:0000000000000000 del_mods
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//ccfF6IdA.s:628    .text.set_mods:0000000000000000 set_mods
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//ccfF6IdA.s:649    .text.clear_mods:0000000000000000 clear_mods
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//ccfF6IdA.s:669    .text.get_weak_mods:0000000000000000 get_weak_mods
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//ccfF6IdA.s:1218   .bss.weak_mods:0000000000000000 weak_mods
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//ccfF6IdA.s:688    .text.add_weak_mods:0000000000000000 add_weak_mods
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//ccfF6IdA.s:711    .text.del_weak_mods:0000000000000000 del_weak_mods
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//ccfF6IdA.s:738    .text.set_weak_mods:0000000000000000 set_weak_mods
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//ccfF6IdA.s:759    .text.clear_weak_mods:0000000000000000 clear_weak_mods
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//ccfF6IdA.s:779    .text.get_macro_mods:0000000000000000 get_macro_mods
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//ccfF6IdA.s:1213   .bss.macro_mods:0000000000000000 macro_mods
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//ccfF6IdA.s:798    .text.add_macro_mods:0000000000000000 add_macro_mods
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//ccfF6IdA.s:821    .text.del_macro_mods:0000000000000000 del_macro_mods
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//ccfF6IdA.s:848    .text.set_macro_mods:0000000000000000 set_macro_mods
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//ccfF6IdA.s:869    .text.clear_macro_mods:0000000000000000 clear_macro_mods
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//ccfF6IdA.s:889    .text.set_oneshot_mods:0000000000000000 set_oneshot_mods
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//ccfF6IdA.s:1197   .bss.oneshot_mods:0000000000000000 oneshot_mods
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//ccfF6IdA.s:910    .text.clear_oneshot_mods:0000000000000000 clear_oneshot_mods
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//ccfF6IdA.s:930    .text.get_oneshot_mods:0000000000000000 get_oneshot_mods
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//ccfF6IdA.s:949    .text.has_anykey:0000000000000000 has_anykey
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//ccfF6IdA.s:1004   .text.send_keyboard_report:0000000000000000 send_keyboard_report
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//ccfF6IdA.s:1076   .text.has_anymod:0000000000000000 has_anymod
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//ccfF6IdA.s:1095   .text.get_first_key:0000000000000000 get_first_key
/var/folders/0z/ym_gdwfd5tg7m49f_1nfh8300000gn/T//ccfF6IdA.s:1208   .bss.__compound_literal.0:0000000000000000 __compound_literal.0

UNDEFINED SYMBOLS
layer_on
layer_off
keyboard_protocol
keymap_config
host_keyboard_send
bitpop
biton
__do_copy_data
__do_clear_bss
